{
    "theorem_file": {
      "spec_same_level": "NMake.v",
      "spec_pos": "NMake.v",
      "digits_dom_op_incr": "NMake.v",
      "spec_0": "NMake.v",
      "spec_1": "NMake.v",
      "succ_fold": "NMake.v",
      "spec_succ": "NMake.v",
      "spec_2": "NMake.v",
      "add_fold": "NMake.v",
      "spec_add": "NMake.v",
      "pred_fold": "NMake.v",
      "spec_pred_pos": "NMake.v",
      "spec_pred0": "NMake.v",
      "spec_pred": "NMake.v",
      "sub_fold": "NMake.v",
      "spec_sub_pos": "NMake.v",
      "spec_sub0": "NMake.v",
      "spec_sub": "NMake.v",
      "compare_fold": "NMake.v",
      "spec_compare": "NMake.v",
      "spec_eqb": "NMake.v",
      "spec_ltb": "NMake.v",
      "spec_leb": "NMake.v",
      "spec_max": "NMake.v",
      "spec_min": "NMake.v",
      "mul_fold": "NMake.v",
      "spec_muln": "NMake.v",
      "spec_mul_add_n1": "NMake.v",
      "spec_wn_mul": "NMake.v",
      "spec_mul": "NMake.v",
      "div_gt_fold": "NMake.v",
      "spec_get_endn": "NMake.v",
      "spec_div_gt_aux": "NMake.v",
      "spec_div_gt": "NMake.v",
      "spec_div_eucl": "NMake.v",
      "spec_div": "NMake.v",
      "mod_gt_fold": "NMake.v",
      "spec_mod_gt": "NMake.v",
      "spec_modulo": "NMake.v",
      "square_fold": "NMake.v",
      "spec_square": "NMake.v",
      "sqrt_fold": "NMake.v",
      "spec_sqrt_aux": "NMake.v",
      "spec_sqrt": "NMake.v",
      "spec_pow_pos": "NMake.v",
      "spec_pow_N": "NMake.v",
      "spec_pow": "NMake.v",
      "digits_fold": "NMake.v",
      "spec_digits": "NMake.v",
      "digits_level": "NMake.v",
      "Zspec_gcd_gt_body": "NMake.v",
      "Zspec_gcd_gt_aux": "NMake.v",
      "spec_gcd_gt": "NMake.v",
      "spec_gcd": "NMake.v",
      "even_fold": "NMake.v",
      "spec_even_aux": "NMake.v",
      "spec_even": "NMake.v",
      "spec_odd": "NMake.v",
      "pheight_correct": "NMake.v",
      "spec_of_pos": "NMake.v",
      "spec_of_N": "NMake.v",
      "head0_fold": "NMake.v",
      "spec_head00": "NMake.v",
      "pow2_pos_minus_1": "NMake.v",
      "spec_head0": "NMake.v",
      "tail0_fold": "NMake.v",
      "spec_tail00": "NMake.v",
      "spec_tail0": "NMake.v",
      "Ndigits_fold": "NMake.v",
      "spec_Ndigits": "NMake.v",
      "log2_fold": "NMake.v",
      "spec_log2_0": "NMake.v",
      "head0_zdigits": "NMake.v",
      "spec_log2_pos": "NMake.v",
      "spec_log2": "NMake.v",
      "log2_digits_head0": "NMake.v",
      "shiftr_fold": "NMake.v",
      "div_pow2_bound": "NMake.v",
      "spec_shiftr_pow2": "NMake.v",
      "spec_shiftr": "NMake.v",
      "unsafe_shiftl_fold": "NMake.v",
      "spec_unsafe_shiftl_aux": "NMake.v",
      "spec_unsafe_shiftl": "NMake.v",
      "double_size_fold": "NMake.v",
      "double_size_level": "NMake.v",
      "spec_double_size_digits": "NMake.v",
      "spec_double_size": "NMake.v",
      "spec_double_size_head0": "NMake.v",
      "spec_double_size_head0_pos": "NMake.v",
      "spec_shiftl_aux_body": "NMake.v",
      "spec_shiftl_aux": "NMake.v",
      "spec_shiftl_pow2": "NMake.v",
      "spec_shiftl": "NMake.v",
      "spec_testbit": "NMake.v",
      "spec_div2": "NMake.v",
      "lor_fold": "NMake.v",
      "spec_lor": "NMake.v",
      "land_fold": "NMake.v",
      "spec_land": "NMake.v",
      "lxor_fold": "NMake.v",
      "spec_lxor": "NMake.v",
      "ldiff_fold": "NMake.v",
      "ldiff_alt": "NMake.v",
      "spec_ldiff": "NMake.v"
    },
    "custom_tactics": {
      "NMake.v": {
        "spec_same_level": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_pos": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "digits_dom_op_incr": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_0": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_1": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "succ_fold": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_succ": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_2": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "add_fold": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_add": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "pred_fold": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_pred_pos": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_pred0": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_pred": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "sub_fold": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_sub_pos": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": [
            "custom20",
            "custom8"
          ]
        },
        "spec_sub0": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": [
            "custom20"
          ]
        },
        "spec_sub": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "compare_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_compare": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_eqb": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_ltb": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_leb": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_max": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_min": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "mul_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_muln": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mul_add_n1": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_wn_mul": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mul": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "div_gt_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_get_endn": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_div_gt_aux": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_div_gt": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_div_eucl": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_div": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "mod_gt_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mod_gt": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_modulo": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "square_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_square": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "sqrt_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_sqrt_aux": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_sqrt": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_pow_pos": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_pow_N": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_pow": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "digits_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_digits": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "digits_level": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "Zspec_gcd_gt_body": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "Zspec_gcd_gt_aux": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_gcd_gt": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_gcd": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "even_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_even_aux": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_even": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_odd": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "pheight_correct": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_of_pos": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_of_N": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "head0_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_head00": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "pow2_pos_minus_1": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_head0": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "tail0_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_tail00": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_tail0": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "Ndigits_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_Ndigits": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "log2_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_log2_0": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "head0_zdigits": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_log2_pos": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_log2": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "log2_digits_head0": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "shiftr_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "div_pow2_bound": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_shiftr_pow2": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_shiftr": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "unsafe_shiftl_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_unsafe_shiftl_aux": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_unsafe_shiftl": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "double_size_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "double_size_level": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_double_size_digits": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_double_size": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_double_size_head0": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_double_size_head0_pos": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_shiftl_aux_body": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_shiftl_aux": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_shiftl_pow2": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_shiftl": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_testbit": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            },
            {
              "name": "custom97",
              "definition": "Ltac custom97 H0 H1 H2 H3 := intros; unfold H0; symmetry; rewrite H1, H2; apply H3.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom97": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom97 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c1_goal : forall x p : t, Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom97 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_div2": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            },
            {
              "name": "custom97",
              "definition": "Ltac custom97 H0 H1 H2 H3 := intros; unfold H0; symmetry; rewrite H1, H2; apply H3.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom97": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom97 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c1_goal : forall x p : t, Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom97 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "lor_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            },
            {
              "name": "custom97",
              "definition": "Ltac custom97 H0 H1 H2 H3 := intros; unfold H0; symmetry; rewrite H1, H2; apply H3.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom97": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom97 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c1_goal : forall x p : t, Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom97 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_lor": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            },
            {
              "name": "custom97",
              "definition": "Ltac custom97 H0 H1 H2 H3 := intros; unfold H0; symmetry; rewrite H1, H2; apply H3.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom97": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom97 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c1_goal : forall x p : t, Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom97 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "land_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            },
            {
              "name": "custom97",
              "definition": "Ltac custom97 H0 H1 H2 H3 := intros; unfold H0; symmetry; rewrite H1, H2; apply H3.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom97": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom97 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c1_goal : forall x p : t, Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom97 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_land": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            },
            {
              "name": "custom97",
              "definition": "Ltac custom97 H0 H1 H2 H3 := intros; unfold H0; symmetry; rewrite H1, H2; apply H3.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom97": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom97 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c1_goal : forall x p : t, Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom97 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "lxor_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            },
            {
              "name": "custom97",
              "definition": "Ltac custom97 H0 H1 H2 H3 := intros; unfold H0; symmetry; rewrite H1, H2; apply H3.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom97": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom97 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c1_goal : forall x p : t, Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom97 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_lxor": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            },
            {
              "name": "custom97",
              "definition": "Ltac custom97 H0 H1 H2 H3 := intros; unfold H0; symmetry; rewrite H1, H2; apply H3.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom97": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom97 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c1_goal : forall x p : t, Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom97 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "ldiff_fold": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            },
            {
              "name": "custom97",
              "definition": "Ltac custom97 H0 H1 H2 H3 := intros; unfold H0; symmetry; rewrite H1, H2; apply H3.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom97": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom97 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c1_goal : forall x p : t, Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom97 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "ldiff_alt": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            },
            {
              "name": "custom97",
              "definition": "Ltac custom97 H0 H1 H2 H3 := intros; unfold H0; symmetry; rewrite H1, H2; apply H3.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom97": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom97 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c1_goal : forall x p : t, Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom97 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_ldiff": {
          "available_tactics": [
            {
              "name": "custom20",
              "definition": "Ltac custom20 H0 H1 H2 H3 H4 := rewrite H0; apply H1; clear H2 H3; intros H4 H2 H3; simpl.\n"
            },
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := rewrite H0; assumption.\n"
            },
            {
              "name": "custom34",
              "definition": "Ltac custom34 H0 H1 H2 := intros; unfold H0, H1; rewrite H2; destruct Z.compare; reflexivity.\n"
            },
            {
              "name": "custom97",
              "definition": "Ltac custom97 H0 H1 H2 H3 := intros; unfold H0; symmetry; rewrite H1, H2; apply H3.\n"
            }
          ],
          "examples": {
            "custom20": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.le (to_Z y) (to_Z x),\nLogic.eq (to_Z (sub x y)) (Z.sub (to_Z x) (to_Z y))",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.le (ZnZ.to_Z y) (ZnZ.to_Z x),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom20 sub_fold spec_same_level _i _i n .",
                "tactic_args": [
                  "c2_goal : forall _ : Z.lt (to_Z x) (to_Z y), Logic.eq (to_Z (sub x y)) 0",
                  "c2_x : True",
                  "c2_y : True"
                ],
                "tactic_res": [
                  "c3_goal : forall _ : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y),\nLogic.eq\n  (to_Z\n     match ZnZ.sub_c x y with\n     | CarryType.C0 r => reduce n r\n     | CarryType.C1 _ => zero\n     end) 0",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom8": [
              {
                "lemma_name": "spec_sub_pos",
                "tactic_sig": "custom8 spec_reduce .",
                "tactic_args": [
                  "c7_goal : Logic.eq (to_Z (reduce n z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))"
                ],
                "tactic_res": []
              }
            ],
            "custom34": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom34 max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_min",
                "tactic_sig": "custom34 min Z.min spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (min n m)) (Z.min (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom97": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom97 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c1_goal : forall x p : t, Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom97 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        }
      }
    }
  }
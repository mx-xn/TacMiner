(* ************************************************************************* *)
(* Generated by Isabelle-to-Coq translation                                    *)
(* ************************************************************************* *)

(* Boolean type *)
Inductive Bool : Type :=
| TrueB
| FalseB.

(* A custom Peano natural number *)
Inductive Nat : Type :=
| Zero
| Succ (_ : Nat).

(* A linked list of Nats *)
Inductive List : Type :=
| Nil
| Cons (hd : Nat) (tl : List).

(* ------------------------------------------------------------------------- *)
(* tf0 and tf1: rebuild or replace the head of a list                         *)
(* ------------------------------------------------------------------------- *)

Fixpoint tf0 (l : List) : List :=
  match l with
  | Nil        => l
  | Cons h t   => Cons h (tf0 t)
  end.

Definition tf1 (x l : List) : List :=
  match l with
  | Nil        => x
  | Cons h t   => Cons h (tf0 t)
  end.

(* ------------------------------------------------------------------------- *)
(* plusN: addition on our custom Nat                                           *)
(* ------------------------------------------------------------------------- *)

Fixpoint plusN (n m : Nat) : Nat :=
  match n with
  | Zero    => m
  | Succ n' => Succ (plusN n' m)
  end.

(* ------------------------------------------------------------------------- *)
(* sum of a list, via tf4/tf3/sum                                              *)
(* ------------------------------------------------------------------------- *)

Fixpoint tf4 (l : List) : Nat :=
  match l with
  | Nil        => Zero
  | Cons h t   => plusN h (tf4 t)
  end.

Definition tf3 (l : List) : Nat := tf4 l.
Definition sum (l : List) : Nat := tf3 l.

(* ------------------------------------------------------------------------- *)
(* first “single‐pass” version                                                *)
(* ------------------------------------------------------------------------- *)

Definition tf2 (l : List) : Nat := sum (tf0 l).
Definition singlepass (l : List) : Nat := tf2 l.
Definition main (l : List) : Nat := singlepass l.

(* ------------------------------------------------------------------------- *)
(* second “new” version                                                       *)
(* ------------------------------------------------------------------------- *)

Fixpoint tf6 (l : List) : Nat :=
  match l with
  | Nil        => Zero
  | Cons h t   => plusN h (tf5 t)
  end
  with tf5 (l : List) : Nat :=
  match l with
  | Nil        => Zero  
  | Cons h t   => plusN h (tf6 t)
  end.

Definition tf7 (l : List) : Nat := tf5 l.
Definition singlepassNew (l : List) : Nat := tf7 l.
Definition mainNew (l : List) : Nat := singlepassNew l.

(* ------------------------------------------------------------------------- *)
(* Theorem: both implementations compute the same sum                         *)
(* ------------------------------------------------------------------------- *)

Theorem optimize : forall inp0 : List,
  main inp0 = mainNew inp0.
Proof.
  induction inp0 as [| h t IH]; simpl; auto.
Admitted.

{
    "theorem_file": {
      "spec_same_level": "NMake.v",
      "spec_pos": "NMake.v",
      "digits_dom_op_incr": "NMake.v",
      "spec_0": "NMake.v",
      "spec_1": "NMake.v",
      "succ_fold": "NMake.v",
      "spec_succ": "NMake.v",
      "spec_2": "NMake.v",
      "add_fold": "NMake.v",
      "spec_add": "NMake.v",
      "pred_fold": "NMake.v",
      "spec_pred_pos": "NMake.v",
      "spec_pred0": "NMake.v",
      "spec_pred": "NMake.v",
      "sub_fold": "NMake.v",
      "spec_sub_pos": "NMake.v",
      "spec_sub0": "NMake.v",
      "spec_sub": "NMake.v",
      "compare_fold": "NMake.v",
      "spec_compare": "NMake.v",
      "spec_eqb": "NMake.v",
      "spec_ltb": "NMake.v",
      "spec_leb": "NMake.v",
      "spec_max": "NMake.v",
      "spec_min": "NMake.v",
      "mul_fold": "NMake.v",
      "spec_muln": "NMake.v",
      "spec_mul_add_n1": "NMake.v",
      "spec_wn_mul": "NMake.v",
      "spec_mul": "NMake.v",
      "div_gt_fold": "NMake.v",
      "spec_get_endn": "NMake.v",
      "spec_div_gt_aux": "NMake.v",
      "spec_div_gt": "NMake.v",
      "spec_div_eucl": "NMake.v",
      "spec_div": "NMake.v",
      "mod_gt_fold": "NMake.v",
      "spec_mod_gt": "NMake.v",
      "spec_modulo": "NMake.v",
      "square_fold": "NMake.v",
      "spec_square": "NMake.v",
      "sqrt_fold": "NMake.v",
      "spec_sqrt_aux": "NMake.v",
      "spec_sqrt": "NMake.v",
      "spec_pow_pos": "NMake.v",
      "spec_pow_N": "NMake.v",
      "spec_pow": "NMake.v",
      "digits_fold": "NMake.v",
      "spec_digits": "NMake.v",
      "digits_level": "NMake.v",
      "Zspec_gcd_gt_body": "NMake.v",
      "Zspec_gcd_gt_aux": "NMake.v",
      "spec_gcd_gt": "NMake.v",
      "spec_gcd": "NMake.v",
      "even_fold": "NMake.v",
      "spec_even_aux": "NMake.v",
      "spec_even": "NMake.v",
      "spec_odd": "NMake.v",
      "pheight_correct": "NMake.v",
      "spec_of_pos": "NMake.v",
      "spec_of_N": "NMake.v",
      "head0_fold": "NMake.v",
      "spec_head00": "NMake.v",
      "pow2_pos_minus_1": "NMake.v",
      "spec_head0": "NMake.v",
      "tail0_fold": "NMake.v",
      "spec_tail00": "NMake.v",
      "spec_tail0": "NMake.v",
      "Ndigits_fold": "NMake.v",
      "spec_Ndigits": "NMake.v",
      "log2_fold": "NMake.v",
      "spec_log2_0": "NMake.v",
      "head0_zdigits": "NMake.v",
      "spec_log2_pos": "NMake.v",
      "spec_log2": "NMake.v",
      "log2_digits_head0": "NMake.v",
      "shiftr_fold": "NMake.v",
      "div_pow2_bound": "NMake.v",
      "spec_shiftr_pow2": "NMake.v",
      "spec_shiftr": "NMake.v",
      "unsafe_shiftl_fold": "NMake.v",
      "spec_unsafe_shiftl_aux": "NMake.v",
      "spec_unsafe_shiftl": "NMake.v",
      "double_size_fold": "NMake.v",
      "double_size_level": "NMake.v",
      "spec_double_size_digits": "NMake.v",
      "spec_double_size": "NMake.v",
      "spec_double_size_head0": "NMake.v",
      "spec_double_size_head0_pos": "NMake.v",
      "spec_shiftl_aux_body": "NMake.v",
      "spec_shiftl_aux": "NMake.v",
      "spec_shiftl_pow2": "NMake.v",
      "spec_shiftl": "NMake.v",
      "spec_testbit": "NMake.v",
      "spec_div2": "NMake.v",
      "lor_fold": "NMake.v",
      "spec_lor": "NMake.v",
      "land_fold": "NMake.v",
      "spec_land": "NMake.v",
      "lxor_fold": "NMake.v",
      "spec_lxor": "NMake.v",
      "ldiff_fold": "NMake.v",
      "ldiff_alt": "NMake.v",
      "spec_ldiff": "NMake.v"
    },
    "custom_tactics": {
      "NMake.v": {
        "spec_same_level": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_pos": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "digits_dom_op_incr": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_0": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_1": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "succ_fold": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_succ": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_2": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "add_fold": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_add": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "pred_fold": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_pred_pos": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ]
          },
          "used_tactics": [
            "custom63"
          ]
        },
        "spec_pred0": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": [
            "custom63",
            "custom36"
          ]
        },
        "spec_pred": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "sub_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_sub_pos": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_sub0": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ]
          },
          "used_tactics": [
            "custom36",
            "custom65"
          ]
        },
        "spec_sub": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "compare_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_compare": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_eqb": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_ltb": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": [
            "custom27",
            "custom45"
          ]
        },
        "spec_leb": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_max": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": [
            "custom9"
          ]
        },
        "spec_min": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "mul_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_muln": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mul_add_n1": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_wn_mul": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mul": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "div_gt_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_get_endn": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_div_gt_aux": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_div_gt": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_div_eucl": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_div": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "mod_gt_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mod_gt": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_modulo": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "square_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_square": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "sqrt_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_sqrt_aux": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_sqrt": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_pow_pos": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_pow_N": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_pow": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "digits_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_digits": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "digits_level": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "Zspec_gcd_gt_body": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "Zspec_gcd_gt_aux": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_gcd_gt": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_gcd": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "even_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_even_aux": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_even": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_odd": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "pheight_correct": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_of_pos": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_of_N": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "head0_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_head00": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "pow2_pos_minus_1": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_head0": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "tail0_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_tail00": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_tail0": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "Ndigits_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_Ndigits": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "log2_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_log2_0": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "head0_zdigits": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_log2_pos": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_log2": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "log2_digits_head0": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "shiftr_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "div_pow2_bound": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_shiftr_pow2": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_shiftr": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "unsafe_shiftl_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_unsafe_shiftl_aux": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_unsafe_shiftl": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "double_size_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "double_size_level": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_double_size_digits": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_double_size": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_double_size_head0": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_double_size_head0_pos": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_shiftl_aux_body": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_shiftl_aux": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_shiftl_pow2": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_shiftl": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_testbit": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 H3 :=  unfold H0; [symmetry; [rewrite H1, H2; [apply H3 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ],
            "custom25": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom25 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c2_goal : Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom25 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c2_goal : Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": [
            "custom25"
          ]
        },
        "spec_div2": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 H3 :=  unfold H0; [symmetry; [rewrite H1, H2; [apply H3 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ],
            "custom25": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom25 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c2_goal : Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom25 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c2_goal : Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": [
            "custom25"
          ]
        },
        "lor_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 H3 :=  unfold H0; [symmetry; [rewrite H1, H2; [apply H3 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ],
            "custom25": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom25 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c2_goal : Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom25 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c2_goal : Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_lor": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 H3 :=  unfold H0; [symmetry; [rewrite H1, H2; [apply H3 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ],
            "custom25": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom25 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c2_goal : Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom25 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c2_goal : Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "land_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 H3 :=  unfold H0; [symmetry; [rewrite H1, H2; [apply H3 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ],
            "custom25": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom25 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c2_goal : Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom25 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c2_goal : Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_land": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 H3 :=  unfold H0; [symmetry; [rewrite H1, H2; [apply H3 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ],
            "custom25": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom25 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c2_goal : Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom25 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c2_goal : Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "lxor_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 H3 :=  unfold H0; [symmetry; [rewrite H1, H2; [apply H3 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ],
            "custom25": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom25 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c2_goal : Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom25 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c2_goal : Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_lxor": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 H3 :=  unfold H0; [symmetry; [rewrite H1, H2; [apply H3 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ],
            "custom25": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom25 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c2_goal : Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom25 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c2_goal : Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "ldiff_fold": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 H3 :=  unfold H0; [symmetry; [rewrite H1, H2; [apply H3 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ],
            "custom25": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom25 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c2_goal : Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom25 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c2_goal : Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "ldiff_alt": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 H3 :=  unfold H0; [symmetry; [rewrite H1, H2; [apply H3 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ],
            "custom25": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom25 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c2_goal : Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom25 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c2_goal : Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_ldiff": {
          "available_tactics": [
            {
              "name": "custom2",
              "definition": "Ltac custom2 H0 H1 H4 :=  intros H0; [rewrite H1; [destr_t H0 as ( n, H4 ) | .. ] | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H9 H0 H1 H4 H2 H5 H6 H7 H8 :=  custom2 H9 H0 H1; [intros H4; [generalize ( ZnZ.spec_pred_c H2 ); [case ZnZ.pred_c; [intros H5 H6 | intros H7 H8 | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom63",
              "definition": "Ltac custom63 H10 H0 H1 H3 H2 H4 H5 H6 H7 H9 :=  custom11 H10 H0 H1 H3 H2 H4 H5 H6 H7; [rewrite H9 | .. ].\n"
            },
            {
              "name": "custom36",
              "definition": "Ltac custom36 H0 :=  generalize ( ZnZ.spec_to_Z H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom1",
              "definition": "Ltac custom1 H0 H1 :=  rewrite H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom5",
              "definition": "Ltac custom5 H0 H1 H2 H3 H4 H5 H6 :=  intros H0 H1; [custom1 H2 H3; [clear H0 H1; [intros H4 H5 H6 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom13",
              "definition": "Ltac custom13 H2 H3 H0 H1 H4 H5 H6 H7 H8 H9 H10 :=  custom5 H2 H3 H0 H1 H4 H5 H6; [simpl; [generalize ( ZnZ.spec_sub_c H5 H6 ); [case ZnZ.sub_c; [intros H7 H8 H9; [rewrite H10 | .. ] | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom65",
              "definition": "Ltac custom65 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2 H11 H12 H13 :=  custom13 H3 H4 H0 H1 H5 H6 H7 H8 H9 H10 H2; [ | intros H11 H12 H13 | .. ].\n"
            },
            {
              "name": "custom27",
              "definition": "Ltac custom27 H0 H1 H2 H3 H4 :=  apply H0; [rewrite H1; [unfold H2, H3; [rewrite H4 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom45",
              "definition": "Ltac custom45  :=  split; [now destruct Z.compare | now intros -> | .. ].\n"
            },
            {
              "name": "custom9",
              "definition": "Ltac custom9 H0 H1 H2 H3 H4 :=  intros H0 H1; [unfold H2, H3; [rewrite H4; [destruct Z.compare; [reflexivity | reflexivity | reflexivity | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom19",
              "definition": "Ltac custom19 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom38",
              "definition": "Ltac custom38 H0 :=  generalize ( spec_pos H0 ); [auto with zarith | .. ].\n"
            },
            {
              "name": "custom41",
              "definition": "Ltac custom41 H0 H1 H2 :=  custom19 H0; [apply H1 | apply H2 | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 H3 :=  unfold H0; [symmetry; [rewrite H1, H2; [apply H3 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom35",
              "definition": "Ltac custom35 H0 :=  simpl; [rewrite H0 | .. ].\n"
            }
          ],
          "examples": {
            "custom2": [],
            "custom11": [],
            "custom63": [
              {
                "lemma_name": "spec_pred_pos",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Z.lt 0 (to_Z x)),\nLogic.eq (to_Z (pred x)) (Z.sub (to_Z x) 1)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Z.lt 0 (ZnZ.to_Z x)",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              },
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom63 x pred_fold x H x y H' y H' spec_reduce .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (_ : Logic.eq (to_Z x) 0), Logic.eq (to_Z (pred x)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c2_y : dom_t n",
                  "c2_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_H' : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 y)) (Z.sub (ZnZ.to_Z x) 1)",
                  "c3_y : dom_t n",
                  "c3_H : Logic.eq (ZnZ.to_Z x) 0",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom36": [
              {
                "lemma_name": "spec_pred0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z y) 0",
                  "c2_y : dom_t n"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom36 _i .",
                "tactic_args": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_z : dom_t n"
                ],
                "tactic_res": []
              }
            ],
            "custom1": [],
            "custom5": [],
            "custom13": [],
            "custom65": [
              {
                "lemma_name": "spec_sub0",
                "tactic_sig": "custom65 x y sub_fold spec_same_level n x y z H LE spec_reduce z H LE .",
                "tactic_args": [
                  "c1_goal : forall (x y : t) (_ : Z.lt (to_Z x) (to_Z y)),\nLogic.eq (to_Z (sub x y)) 0"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (ZnZ.to_Z z) 0",
                  "c2_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c2_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C0 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c2_z : dom_t n",
                  "c2_y : dom_t n",
                  "c2_x : dom_t n",
                  "c2_n : nat",
                  "c3_goal : Logic.eq (to_Z zero) 0",
                  "c3_LE : Z.lt (ZnZ.to_Z x) (ZnZ.to_Z y)",
                  "c3_H : Logic.eq\n  (interp_carry (-1) (base (ZnZ.digits (dom_op n))) ZnZ.to_Z\n     (CarryType.C1 z)) (Z.sub (ZnZ.to_Z x) (ZnZ.to_Z y))",
                  "c3_z : dom_t n",
                  "c3_y : dom_t n",
                  "c3_x : dom_t n",
                  "c3_n : nat"
                ]
              }
            ],
            "custom27": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom27 eq_iff_eq_true Z.ltb_lt Z.lt ltb spec_compare .",
                "tactic_args": [
                  "c1_goal : Logic.eq (ltb x y) (Z.ltb (to_Z x) (to_Z y))"
                ],
                "tactic_res": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ]
              }
            ],
            "custom45": [
              {
                "lemma_name": "spec_ltb",
                "tactic_sig": "custom45 .",
                "tactic_args": [
                  "c2_goal : iff\n  (Logic.eq\n     match Z.compare (to_Z x) (to_Z y) with\n     | Lt => true\n     | _ => false\n     end true) (Logic.eq (Z.compare (to_Z x) (to_Z y)) Lt)"
                ],
                "tactic_res": []
              }
            ],
            "custom9": [
              {
                "lemma_name": "spec_max",
                "tactic_sig": "custom9 n m max Z.max spec_compare .",
                "tactic_args": [
                  "c1_goal : forall n m : t, Logic.eq (to_Z (max n m)) (Z.max (to_Z n) (to_Z m))"
                ],
                "tactic_res": []
              }
            ],
            "custom19": [],
            "custom38": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom38 _i .",
                "tactic_args": [
                  "c8_goal : Logic.eq (to_Z x) 0",
                  "c2_x : True"
                ],
                "tactic_res": []
              }
            ],
            "custom41": [
              {
                "lemma_name": "spec_log2",
                "tactic_sig": "custom41 Z.log2_unique spec_pos spec_log2_pos .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Z (log2 x)) (Z.log2 (to_Z x))"
                ],
                "tactic_res": [
                  "c5_goal : not (Logic.eq (to_Z x) 0)"
                ]
              }
            ],
            "custom25": [
              {
                "lemma_name": "spec_testbit",
                "tactic_sig": "custom25 testbit spec_odd spec_shiftr Z.testbit_odd .",
                "tactic_args": [
                  "c2_goal : Logic.eq (testbit x p) (Z.testbit (to_Z x) (to_Z p))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_div2",
                "tactic_sig": "custom25 div2 spec_shiftr spec_1 Z.div2_spec .",
                "tactic_args": [
                  "c2_goal : Logic.eq (to_Z (div2 x)) (Z.div2 (to_Z x))"
                ],
                "tactic_res": []
              }
            ],
            "custom35": []
          },
          "used_tactics": []
        }
      }
    }
  }
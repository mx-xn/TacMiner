{
    "theorem_file": {
      "N_to_Z_pos": "QMake.v",
      "strong_spec_of_Q": "QMake.v",
      "spec_of_Q": "QMake.v",
      "spec_0": "QMake.v",
      "spec_1": "QMake.v",
      "spec_m1": "QMake.v",
      "spec_compare": "QMake.v",
      "spec_min": "QMake.v",
      "spec_max": "QMake.v",
      "spec_eq_bool": "QMake.v",
      "strong_spec_check_int": "QMake.v",
      "spec_norm": "QMake.v",
      "strong_spec_norm": "QMake.v",
      "spec_red": "QMake.v",
      "strong_spec_red": "QMake.v",
      "spec_add": "QMake.v",
      "spec_add_norm": "QMake.v",
      "strong_spec_opp": "QMake.v",
      "spec_opp": "QMake.v",
      "spec_sub": "QMake.v",
      "spec_sub_norm": "QMake.v",
      "spec_mul": "QMake.v",
      "spec_norm_denum": "QMake.v",
      "spec_irred": "QMake.v",
      "spec_irred_zero": "QMake.v",
      "strong_spec_irred": "QMake.v",
      "spec_mul_norm_Qz_Qq": "QMake.v",
      "spec_mul_norm": "QMake.v",
      "spec_inv": "QMake.v",
      "spec_inv_norm": "QMake.v",
      "spec_div": "QMake.v",
      "spec_div_norm": "QMake.v",
      "spec_square": "QMake.v",
      "spec_power_pos": "QMake.v",
      "spec_power": "QMake.v",
      "spec_power_norm": "QMake.v",
      "strong_spec_of_Qc": "QMake.v",
      "spec_of_Qc": "QMake.v",
      "spec_oppc": "QMake.v",
      "spec_oppc_bis": "QMake.v",
      "spec_comparec": "QMake.v",
      "spec_addc": "QMake.v",
      "spec_add_normc": "QMake.v",
      "spec_add_normc_bis": "QMake.v",
      "spec_subc": "QMake.v",
      "spec_sub_normc": "QMake.v",
      "spec_sub_normc_bis": "QMake.v",
      "spec_mulc": "QMake.v",
      "spec_mul_normc": "QMake.v",
      "spec_mul_normc_bis": "QMake.v",
      "spec_invc": "QMake.v",
      "spec_inv_normc": "QMake.v",
      "spec_inv_normc_bis": "QMake.v",
      "spec_divc": "QMake.v",
      "spec_div_normc": "QMake.v",
      "spec_div_normc_bis": "QMake.v",
      "spec_squarec": "QMake.v",
      "spec_power_posc": "QMake.v"
    },
    "custom_tactics": {
      "QMake.v": {
        "N_to_Z_pos": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "strong_spec_of_Q": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": [
            "custom28"
          ]
        },
        "spec_of_Q": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_0": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_1": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_m1": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_compare": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_min": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_max": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_eq_bool": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "strong_spec_check_int": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": [
            "custom25",
            "custom81"
          ]
        },
        "spec_norm": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "strong_spec_norm": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_red": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": [
            "custom86"
          ]
        },
        "strong_spec_red": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": [
            "custom71",
            "custom70",
            "custom86"
          ]
        },
        "spec_add": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_add_norm": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "strong_spec_opp": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": [
            "strong_spec_opp_tac"
          ]
        },
        "spec_opp": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_sub": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_sub_norm": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mul": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_norm_denum": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": [
            "custom82",
            "custom81"
          ]
        },
        "spec_irred": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_irred_zero": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "strong_spec_irred": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mul_norm_Qz_Qq": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mul_norm": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_inv": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_inv_norm": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_div": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_div_norm": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_square": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_power_pos": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_power": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": [
            "custom11"
          ]
        },
        "spec_power_norm": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": [
            "custom11"
          ]
        },
        "strong_spec_of_Qc": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_of_Qc": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_oppc": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_oppc_bis": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_comparec": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_addc": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_add_normc": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_add_normc_bis": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_subc": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_sub_normc": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_sub_normc_bis": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mulc": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mul_normc": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mul_normc_bis": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_invc": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_inv_normc": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_inv_normc_bis": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_divc": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_div_normc": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_div_normc_bis": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_squarec": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_power_posc": {
          "available_tactics": [
            {
              "name": "custom28",
              "definition": "Ltac custom28  :=  simpl; [rewrite ?ZZ.spec_of_Z; [destr_eqb; [now rewrite ?NN.spec_0, ?NN.spec_of_N | now rewrite ?NN.spec_0, ?NN.spec_of_N | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom25",
              "definition": "Ltac custom25 H0 H1 H2 :=  intros H0 H1; [unfold H2; [nzsimpl; [destr_zcompare; [ | .. ] | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "custom81",
              "definition": "Ltac custom81  :=  qsimpl; [congruence | .. ].\n"
            },
            {
              "name": "custom51",
              "definition": "Ltac custom51 H0 H1 :=  unfold H0; [apply H1 | .. ].\n"
            },
            {
              "name": "custom86",
              "definition": "Ltac custom86 H0 H1 H2 H3 H4 :=  intros [ H0 | H1 H2 ]; [ | custom51 H3 H4 | .. ].\n"
            },
            {
              "name": "custom70",
              "definition": "Ltac custom70 H0 :=  symmetry; [apply H0 | .. ].\n"
            },
            {
              "name": "custom71",
              "definition": "Ltac custom71  :=  simpl; [auto with zarith | .. ].\n"
            },
            {
              "name": "custom82",
              "definition": "Ltac custom82 H0 H1 H2 :=  unfold H0; [intros H1 H2 | .. ].\n"
            },
            {
              "name": "custom2",
              "definition": "Ltac custom2  :=  simpl; [nzsimpl | .. ].\n"
            },
            {
              "name": "custom11",
              "definition": "Ltac custom11 H0 H6 H7 H8 :=  destruct H0; [custom2 ; [red; [auto | .. ] | .. ] | apply H6 | simpl; [rewrite H7, H6; [apply H8 | .. ] | .. ] | .. ].\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom28": [
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c3_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xI y |}))\n  {| Qnum := x; Qden := xI y |}"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_of_Q",
                "tactic_sig": "custom28 .",
                "tactic_args": [
                  "c4_goal : eq (to_Q (of_Q {| Qnum := x; Qden := xO y |}))\n  {| Qnum := x; Qden := xO y |}"
                ],
                "tactic_res": []
              }
            ],
            "custom25": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom25 n d check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c2_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t",
                  "c3_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c3_H : Z.lt 1 (NN.to_Z d)",
                  "c3_d : NN.t",
                  "c3_n : ZZ.t",
                  "c4_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c4_H : Z.lt (NN.to_Z d) 1",
                  "c4_d : NN.t",
                  "c4_n : ZZ.t"
                ]
              }
            ],
            "custom81": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom81 .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d))\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos (NN.to_Z d) |})"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.mul (ZZ.to_Z n) (NN.to_Z d)) (ZZ.to_Z n)",
                  "c4_e : Logic.eq (NN.to_Z d) 1%Z",
                  "c4_H : Z.lt 0 (NN.to_Z d)"
                ]
              }
            ],
            "custom51": [],
            "custom86": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom86 n d z red spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Qeq (to_Q (red x)) (to_Q x)"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (red (Qz n))) (to_Q (Qz n))",
                  "c2_n : ZZ.t"
                ]
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom86 n d z red strong_spec_norm .",
                "tactic_args": [
                  "c1_goal : forall x : t, Logic.eq (to_Q (red x)) (Qred (to_Q x))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (Qz n))) (Qred (to_Q (Qz n)))",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom70": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom70 Qred_identity .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (Qred (to_Q (Qz n)))"
                ],
                "tactic_res": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ]
              }
            ],
            "custom71": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom71 .",
                "tactic_args": [
                  "c4_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz n))) (Zpos (Qden (to_Q (Qz n))))) 1%Z"
                ],
                "tactic_res": []
              }
            ],
            "custom82": [
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom82 norm_denum n d .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom2": [],
            "custom11": [
              {
                "lemma_name": "spec_power",
                "tactic_sig": "custom11 z spec_power_pos spec_inv Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "spec_power_norm",
                "tactic_sig": "custom11 z spec_power_pos spec_inv_norm Qeq_refl .",
                "tactic_args": [
                  "c1_goal : forall (x : t) (z : Z), Qeq (to_Q (power_norm x z)) (Qpower (to_Q x) z)"
                ],
                "tactic_res": []
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        }
      }
    }
  }
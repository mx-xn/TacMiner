{
    "theorem_file": {
      "N_to_Z_pos": "QMake.v",
      "strong_spec_of_Q": "QMake.v",
      "spec_of_Q": "QMake.v",
      "spec_0": "QMake.v",
      "spec_1": "QMake.v",
      "spec_m1": "QMake.v",
      "spec_compare": "QMake.v",
      "spec_min": "QMake.v",
      "spec_max": "QMake.v",
      "spec_eq_bool": "QMake.v",
      "strong_spec_check_int": "QMake.v",
      "spec_norm": "QMake.v",
      "strong_spec_norm": "QMake.v",
      "spec_red": "QMake.v",
      "strong_spec_red": "QMake.v",
      "spec_add": "QMake.v",
      "spec_add_norm": "QMake.v",
      "strong_spec_opp": "QMake.v",
      "spec_opp": "QMake.v",
      "spec_sub": "QMake.v",
      "spec_sub_norm": "QMake.v",
      "spec_mul": "QMake.v",
      "spec_norm_denum": "QMake.v",
      "spec_irred": "QMake.v",
      "spec_irred_zero": "QMake.v",
      "strong_spec_irred": "QMake.v",
      "spec_mul_norm_Qz_Qq": "QMake.v",
      "spec_mul_norm": "QMake.v",
      "spec_inv": "QMake.v",
      "spec_inv_norm": "QMake.v",
      "spec_div": "QMake.v",
      "spec_div_norm": "QMake.v",
      "spec_square": "QMake.v",
      "spec_power_pos": "QMake.v",
      "spec_power": "QMake.v",
      "spec_power_norm": "QMake.v",
      "strong_spec_of_Qc": "QMake.v",
      "spec_of_Qc": "QMake.v",
      "spec_oppc": "QMake.v",
      "spec_oppc_bis": "QMake.v",
      "spec_comparec": "QMake.v",
      "spec_addc": "QMake.v",
      "spec_add_normc": "QMake.v",
      "spec_add_normc_bis": "QMake.v",
      "spec_subc": "QMake.v",
      "spec_sub_normc": "QMake.v",
      "spec_sub_normc_bis": "QMake.v",
      "spec_mulc": "QMake.v",
      "spec_mul_normc": "QMake.v",
      "spec_mul_normc_bis": "QMake.v",
      "spec_invc": "QMake.v",
      "spec_inv_normc": "QMake.v",
      "spec_inv_normc_bis": "QMake.v",
      "spec_divc": "QMake.v",
      "spec_div_normc": "QMake.v",
      "spec_div_normc_bis": "QMake.v",
      "spec_squarec": "QMake.v",
      "spec_power_posc": "QMake.v"
    },
    "custom_tactics": {
      "QMake.v": {
        "N_to_Z_pos": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "strong_spec_of_Q": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_of_Q": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_0": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_1": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_m1": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_compare": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_min": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_max": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "spec_eq_bool": {
          "available_tactics": [],
          "examples": {},
          "used_tactics": []
        },
        "strong_spec_check_int": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ]
          },
          "used_tactics": [
            "custom17",
            "custom12",
            "custom8"
          ]
        },
        "spec_norm": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "strong_spec_norm": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_red": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": [
            "custom26"
          ]
        },
        "strong_spec_red": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ]
          },
          "used_tactics": [
            "custom26",
            "custom21"
          ]
        },
        "spec_add": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_add_norm": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "strong_spec_opp": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": [
            "strong_spec_opp_tac"
          ]
        },
        "spec_opp": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ]
          },
          "used_tactics": []
        },
        "spec_sub": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_sub_norm": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mul": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_norm_denum": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": [
            "custom33"
          ]
        },
        "spec_irred": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_irred_zero": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "strong_spec_irred": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mul_norm_Qz_Qq": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mul_norm": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_inv": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_inv_norm": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_div": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_div_norm": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_square": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_power_pos": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_power": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_power_norm": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "strong_spec_of_Qc": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_of_Qc": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_oppc": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_oppc_bis": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_comparec": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_addc": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_add_normc": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_add_normc_bis": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_subc": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_sub_normc": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_sub_normc_bis": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mulc": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mul_normc": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_mul_normc_bis": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_invc": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_inv_normc": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_inv_normc_bis": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_divc": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_div_normc": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_div_normc_bis": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_squarec": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        },
        "spec_power_posc": {
          "available_tactics": [
            {
              "name": "custom8",
              "definition": "Ltac custom8 H0 := intros; unfold H0.\n"
            },
            {
              "name": "custom12",
              "definition": "Ltac custom12  := nzsimpl; destr_zcompare.\n"
            },
            {
              "name": "custom17",
              "definition": "Ltac custom17 H0 := simpl; rewrite <- H0.\n"
            },
            {
              "name": "custom26",
              "definition": "Ltac custom26 H0 H1 := unfold H0; apply H1.\n"
            },
            {
              "name": "custom21",
              "definition": "Ltac custom21 H0 := symmetry; apply H0.\n"
            },
            {
              "name": "strong_spec_opp_tac",
              "definition": "Ltac strong_spec_opp_tac := \n match goal with  |- context[NN.eqb ?X ?Y] =>\n  generalize (NN.spec_eqb X Y); case NN.eqb\n end. \n"
            },
            {
              "name": "custom33",
              "definition": "Ltac custom33 H0 := unfold H0; intros.\n"
            },
            {
              "name": "custom39",
              "definition": "Ltac custom39 H0 H1 := apply H0; apply H1.\n"
            }
          ],
          "examples": {
            "custom8": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom8 check_int .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nLogic.eq (to_Q (check_int n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom12": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom12 .",
                "tactic_args": [
                  "c2_goal : Logic.eq\n  (to_Q\n     match NN.compare NN.one d with\n     | Eq => Qz n\n     | Lt => Qq n d\n     | Gt => zero\n     end) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)",
                  "c4_goal : Logic.eq (to_Q (Qq n d)) (to_Q (Qq n d))",
                  "c4_H : Z.lt 1 (NN.to_Z d)",
                  "c5_goal : Logic.eq (to_Q zero) (to_Q (Qq n d))",
                  "c5_H : Z.lt (NN.to_Z d) 1"
                ]
              }
            ],
            "custom17": [
              {
                "lemma_name": "strong_spec_check_int",
                "tactic_sig": "custom17 _i .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (Qz n)) (to_Q (Qq n d))",
                  "c3_H : Logic.eq 1%Z (NN.to_Z d)"
                ],
                "tactic_res": [
                  "c6_goal : Logic.eq {| Qnum := ZZ.to_Z n; Qden := 1 |}\n  (if NN.eqb d NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z n; Qden := Z.to_pos 1%Z |})"
                ]
              }
            ],
            "custom26": [
              {
                "lemma_name": "spec_red",
                "tactic_sig": "custom26 red spec_norm .",
                "tactic_args": [
                  "c3_goal : Qeq (to_Q (red (Qq n d))) (to_Q (Qq n d))"
                ],
                "tactic_res": []
              },
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom26 red strong_spec_norm .",
                "tactic_args": [
                  "c3_goal : Logic.eq (to_Q (red (Qq n d))) (Qred (to_Q (Qq n d)))"
                ],
                "tactic_res": []
              }
            ],
            "custom21": [
              {
                "lemma_name": "strong_spec_red",
                "tactic_sig": "custom21 Qred_identity .",
                "tactic_args": [
                  "c4_goal : Logic.eq (to_Q (Qz z)) (Qred (to_Q (Qz z)))"
                ],
                "tactic_res": [
                  "c5_goal : Logic.eq (Z.gcd (Qnum (to_Q (Qz z))) (Zpos (Qden (to_Q (Qz z))))) 1%Z"
                ]
              }
            ],
            "strong_spec_opp_tac": [
              {
                "lemma_name": "strong_spec_opp",
                "tactic_sig": "strong_spec_opp_tac .",
                "tactic_args": [
                  "c5_goal : Logic.eq\n  (if NN.eqb y NN.zero\n   then 0\n   else {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |})\n  (Qopp\n     (if NN.eqb y NN.zero\n      then 0\n      else {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |}))"
                ],
                "tactic_res": [
                  "c7_goal : forall _ : Logic.eq true (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq 0 (Qopp 0)",
                  "c8_goal : forall _ : Logic.eq false (Z.eqb (NN.to_Z y) (NN.to_Z NN.zero)),\nLogic.eq {| Qnum := ZZ.to_Z (ZZ.opp x); Qden := Z.to_pos (NN.to_Z y) |}\n  (Qopp {| Qnum := ZZ.to_Z x; Qden := Z.to_pos (NN.to_Z y) |})"
                ]
              }
            ],
            "custom33": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom33 Reduced .",
                "tactic_args": [
                  "c1_goal : Reduced (opp q)"
                ],
                "tactic_res": [
                  "c2_goal : Logic.eq (to_Q (red (opp q))) (to_Q (opp q))"
                ]
              },
              {
                "lemma_name": "spec_norm_denum",
                "tactic_sig": "custom33 norm_denum .",
                "tactic_args": [
                  "c1_goal : forall (n : ZZ.t) (d : NN.t),\nQeq (to_Q (norm_denum n d)) (to_Q (Qq n d))"
                ],
                "tactic_res": [
                  "c2_goal : Qeq (to_Q (if NN.eqb d NN.one then Qz n else Qq n d)) (to_Q (Qq n d))",
                  "c2_d : NN.t",
                  "c2_n : ZZ.t"
                ]
              }
            ],
            "custom39": [
              {
                "lemma_name": "strong_spec_opp_norm",
                "tactic_sig": "custom39 Qred_complete spec_opp .",
                "tactic_args": [
                  "c3_goal : Logic.eq (Qred (to_Q (opp q))) (Qred (Qopp (to_Q q)))"
                ],
                "tactic_res": []
              }
            ]
          },
          "used_tactics": []
        }
      }
    }
  }
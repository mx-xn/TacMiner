[
    {
        "lemma_name": "functional_extensionality_dep",
        "proof": [
            {
                "tactic_sig": "Lemma functional_extensionality_dep : forall { A : Type } { B : A -> Type } ( f g : forall x : A , B x ) , ( forall x , f x = g x ) -> f = g .",
                "tactic_sig_no_out_arg": "Lemma functional_extensionality_dep : forall { A : Type } { B : A -> Type } ( f g : forall x : A , B x ) , ( forall x , f x = g x ) -> f = g .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (A : Type) (B : forall _ : A, Type) (f g : forall x : A, B x)\n  (_ : forall x : A, eq (f x) (g x)), eq f g"
                ]
            }
        ]
    },
    {
        "lemma_name": "functional_extensionality",
        "proof": [
            {
                "tactic_sig": "Lemma functional_extensionality : forall { A B : Type } ( f g : A -> B ) , ( forall x , f x = g x ) -> f = g .",
                "tactic_sig_no_out_arg": "Lemma functional_extensionality : forall { A B : Type } ( f g : A -> B ) , ( forall x , f x = g x ) -> f = g .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (A B : Type) (f g : forall _ : A, B)\n  (_ : forall x : A, eq (f x) (g x)), eq f g"
                ]
            }
        ]
    },
    {
        "lemma_name": "extensionality",
        "proof": [
            {
                "tactic_sig": "Lemma extensionality : forall { A B : Type } ( f g : A -> B ) , ( forall x , f x = g x ) -> f = g .",
                "tactic_sig_no_out_arg": "Lemma extensionality : forall { A B : Type } ( f g : A -> B ) , ( forall x , f x = g x ) -> f = g .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (A B : Type) (f g : forall _ : A, B)\n  (_ : forall x : A, eq (f x) (g x)), eq f g"
                ]
            }
        ]
    }
]
[
    {
        "lemma_name": "cong_end",
        "proof": [
            {
                "tactic_sig": "Theorem cong_end : forall P Q , step_process_cong P Q <- > step_process P Q .",
                "tactic_sig_no_out_arg": "Theorem cong_end : forall P Q , step_process_cong P Q <- > step_process P Q .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall P Q : process, iff (step_process_cong P Q) (step_process P Q)"
                ]
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall P Q : process, iff (step_process_cong P Q) (step_process P Q)"
                ],
                "tactic_res": [
                    "c2_goal : iff (step_process_cong P Q) (step_process P Q)",
                    "c2_P : process",
                    "c2_Q : process"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c2_goal : iff (step_process_cong P Q) (step_process P Q)"
                ],
                "tactic_res": [
                    "c3_goal : forall _ : step_process_cong P Q, step_process P Q",
                    "c4_goal : forall _ : step_process P Q, step_process_cong P Q"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c3_goal : forall _ : step_process_cong P Q, step_process P Q"
                ],
                "tactic_res": [
                    "c5_goal : step_process P Q",
                    "c5_H : step_process_cong P Q"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c5_goal : step_process P Q",
                    "c5_H : step_process_cong P Q"
                ],
                "tactic_res": [
                    "c6_goal : step_process (compose P1 P3) (compose P2 P3)",
                    "c6_IHstep_process_cong : step_process P1 P2",
                    "c6_H : step_process_cong P1 P2",
                    "c6_P3 : process",
                    "c6_P2 : process",
                    "c6_P1 : process",
                    "c7_goal : step_process (compose (output c z Q) (input c P))\n  (compose Q (open z P))",
                    "c7_z : channel",
                    "c7_c : channel",
                    "c8_goal : step_process P' Q'",
                    "c8_IHstep_process_cong : step_process P Q",
                    "c8_H1 : congruent Q Q'",
                    "c8_H0 : congruent P P'",
                    "c8_Q' : process",
                    "c8_P' : process"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c6_goal : step_process (compose P1 P3) (compose P2 P3)",
                    "_global_step_process : forall (_ : process) (_ : process), Prop"
                ],
                "tactic_res": [
                    "c9_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (congruent (compose P1 P3) P')\n        (and (congruent (compose P2 P3) Q') (step_process_base P' Q'))))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ P1' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P1' ] .",
                "tactic_args": [
                    "c6_IHstep_process_cong : step_process P1 P2"
                ],
                "tactic_res": [
                    "c9_H0 : ex\n  (fun Q' : process =>\n   and (congruent P1 P1')\n     (and (congruent P2 Q') (step_process_base P1' Q')))",
                    "c9_P1' : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ P2' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P2' ] .",
                "tactic_args": [
                    "c8_H0 : congruent P P'"
                ],
                "tactic_res": [
                    "c9_H0 : and (congruent P1 P1')\n  (and (congruent P2 P2') (step_process_base P1' P2'))",
                    "c9_P2' : process"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c9_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (congruent (compose P1 P3) P')\n        (and (congruent (compose P2 P3) Q') (step_process_base P' Q'))))",
                    "c9_P1' : process",
                    "c6_P3 : process"
                ],
                "tactic_res": [
                    "c10_goal : ex\n  (fun Q' : process =>\n   and (congruent (compose P1 P3) (compose P1' P3))\n     (and (congruent (compose P2 P3) Q')\n        (step_process_base (compose P1' P3) Q')))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c10_goal : ex\n  (fun Q' : process =>\n   and (congruent (compose P1 P3) (compose P1' P3))\n     (and (congruent (compose P2 P3) Q')\n        (step_process_base (compose P1' P3) Q')))",
                    "c9_P2' : process",
                    "c6_P3 : process"
                ],
                "tactic_res": [
                    "c11_goal : and (congruent (compose P1 P3) (compose P1' P3))\n  (and (congruent (compose P2 P3) (compose P2' P3))\n     (step_process_base (compose P1' P3) (compose P2' P3)))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ CP1 _i ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ CP1 _i ] .",
                "tactic_args": [
                    "c8_H0 : congruent P P'",
                    "c8_H0 : congruent P P'"
                ],
                "tactic_res": [
                    "c11_H0 : and (congruent P2 P2') (step_process_base P1' P2')",
                    "c11_CP1 : congruent P1 P1'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ CP2 SPB ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ CP2 SPB ] .",
                "tactic_args": [
                    "c8_H0 : congruent P P'"
                ],
                "tactic_res": [
                    "c11_SPB : step_process_base P1' P2'",
                    "c11_CP2 : congruent P2 P2'"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c11_goal : and (congruent (compose P1 P3) (compose P1' P3))\n  (and (congruent (compose P2 P3) (compose P2' P3))\n     (step_process_base (compose P1' P3) (compose P2' P3)))"
                ],
                "tactic_res": [
                    "c12_goal : congruent (compose P1 P3) (compose P1' P3)",
                    "c13_goal : congruent (compose P2 P3) (compose P2' P3)",
                    "c14_goal : step_process_base (compose P1' P3) (compose P2' P3)"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c12_goal : congruent (compose P1 P3) (compose P1' P3)",
                    "c6_P1 : process",
                    "c6_P3 : process",
                    "c6_P3 : process",
                    "c6_P1 : process"
                ],
                "tactic_res": [
                    "c15_goal : eq (compose P1 P3) (fill (c_compose_l c_hole P3) P1)",
                    "c16_goal : congruent (compose P1 P3) (compose P1' P3)",
                    "c16_H0 : eq (compose P1 P3) (fill (c_compose_l c_hole P3) P1)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c15_goal : eq (compose P1 P3) (fill (c_compose_l c_hole P3) P1)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c16_goal : congruent (compose P1 P3) (compose P1' P3)",
                    "c9_P1' : process",
                    "c6_P3 : process",
                    "c6_P3 : process",
                    "c9_P1' : process"
                ],
                "tactic_res": [
                    "c17_goal : eq (compose P1' P3) (fill (c_compose_l c_hole P3) P1')",
                    "c18_goal : congruent (compose P1 P3) (compose P1' P3)",
                    "c18_H1 : eq (compose P1' P3) (fill (c_compose_l c_hole P3) P1')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c17_goal : eq (compose P1' P3) (fill (c_compose_l c_hole P3) P1')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c18_goal : congruent (compose P1 P3) (compose P1' P3)",
                    "c8_H0 : congruent P P'"
                ],
                "tactic_res": [
                    "c19_goal : congruent (fill (c_compose_l c_hole P3) P1) (compose P1' P3)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c19_goal : congruent (fill (c_compose_l c_hole P3) P1) (compose P1' P3)",
                    "c8_H1 : congruent Q Q'"
                ],
                "tactic_res": [
                    "c20_goal : congruent (fill (c_compose_l c_hole P3) P1)\n  (fill (c_compose_l c_hole P3) P1')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c20_goal : congruent (fill (c_compose_l c_hole P3) P1)\n  (fill (c_compose_l c_hole P3) P1')",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c21_goal : congruent P1 P1'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c21_goal : congruent P1 P1'",
                    "c11_CP1 : congruent P1 P1'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c13_goal : congruent (compose P2 P3) (compose P2' P3)",
                    "c6_P2 : process",
                    "c6_P3 : process",
                    "c6_P3 : process",
                    "c6_P2 : process"
                ],
                "tactic_res": [
                    "c22_goal : eq (compose P2 P3) (fill (c_compose_l c_hole P3) P2)",
                    "c23_goal : congruent (compose P2 P3) (compose P2' P3)",
                    "c23_H0 : eq (compose P2 P3) (fill (c_compose_l c_hole P3) P2)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c22_goal : eq (compose P2 P3) (fill (c_compose_l c_hole P3) P2)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c23_goal : congruent (compose P2 P3) (compose P2' P3)",
                    "c9_P2' : process",
                    "c6_P3 : process",
                    "c6_P3 : process",
                    "c9_P2' : process"
                ],
                "tactic_res": [
                    "c24_goal : eq (compose P2' P3) (fill (c_compose_l c_hole P3) P2')",
                    "c25_goal : congruent (compose P2 P3) (compose P2' P3)",
                    "c25_H1 : eq (compose P2' P3) (fill (c_compose_l c_hole P3) P2')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c24_goal : eq (compose P2' P3) (fill (c_compose_l c_hole P3) P2')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c25_goal : congruent (compose P2 P3) (compose P2' P3)",
                    "c8_H0 : congruent P P'"
                ],
                "tactic_res": [
                    "c26_goal : congruent (fill (c_compose_l c_hole P3) P2) (compose P2' P3)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c26_goal : congruent (fill (c_compose_l c_hole P3) P2) (compose P2' P3)",
                    "c8_H1 : congruent Q Q'"
                ],
                "tactic_res": [
                    "c27_goal : congruent (fill (c_compose_l c_hole P3) P2)\n  (fill (c_compose_l c_hole P3) P2')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c27_goal : congruent (fill (c_compose_l c_hole P3) P2)\n  (fill (c_compose_l c_hole P3) P2')",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c28_goal : congruent P2 P2'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c28_goal : congruent P2 P2'",
                    "c11_CP2 : congruent P2 P2'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "constructor .",
                "tactic_sig_no_out_arg": "constructor .",
                "tactic_args": [
                    "c14_goal : step_process_base (compose P1' P3) (compose P2' P3)"
                ],
                "tactic_res": [
                    "c29_goal : step_process_base P1' P2'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c29_goal : step_process_base P1' P2'",
                    "c11_SPB : step_process_base P1' P2'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c7_goal : step_process (compose (output c z Q) (input c P))\n  (compose Q (open z P))",
                    "_global_step_process : forall (_ : process) (_ : process), Prop"
                ],
                "tactic_res": [
                    "c30_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (congruent (compose (output c z Q) (input c P)) P')\n        (and (congruent (compose Q (open z P)) Q')\n           (step_process_base P' Q'))))"
                ]
            },
            {
                "tactic_sig": "exists ( compose ( output _i _i _i ) ( input _i _i ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose ( output _i _i _i ) ( input _i _i ) ) .",
                "tactic_args": [
                    "c30_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (congruent (compose (output c z Q) (input c P)) P')\n        (and (congruent (compose Q (open z P)) Q')\n           (step_process_base P' Q'))))",
                    "c7_c : channel",
                    "c7_z : channel",
                    "c2_Q : process",
                    "c7_c : channel",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c31_goal : ex\n  (fun Q' : process =>\n   and\n     (congruent (compose (output c z Q) (input c P))\n        (compose (output c z Q) (input c P)))\n     (and (congruent (compose Q (open z P)) Q')\n        (step_process_base (compose (output c z Q) (input c P)) Q')))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i ( open _i _i ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i ( open _i _i ) ) .",
                "tactic_args": [
                    "c31_goal : ex\n  (fun Q' : process =>\n   and\n     (congruent (compose (output c z Q) (input c P))\n        (compose (output c z Q) (input c P)))\n     (and (congruent (compose Q (open z P)) Q')\n        (step_process_base (compose (output c z Q) (input c P)) Q')))",
                    "c2_Q : process",
                    "c7_z : channel",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c32_goal : and\n  (congruent (compose (output c z Q) (input c P))\n     (compose (output c z Q) (input c P)))\n  (and (congruent (compose Q (open z P)) (compose Q (open z P)))\n     (step_process_base (compose (output c z Q) (input c P))\n        (compose Q (open z P))))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c32_goal : and\n  (congruent (compose (output c z Q) (input c P))\n     (compose (output c z Q) (input c P)))\n  (and (congruent (compose Q (open z P)) (compose Q (open z P)))\n     (step_process_base (compose (output c z Q) (input c P))\n        (compose Q (open z P))))"
                ],
                "tactic_res": [
                    "c33_goal : congruent (compose (output c z Q) (input c P))\n  (compose (output c z Q) (input c P))",
                    "c34_goal : congruent (compose Q (open z P)) (compose Q (open z P))",
                    "c35_goal : step_process_base (compose (output c z Q) (input c P))\n  (compose Q (open z P))"
                ]
            },
            {
                "tactic_sig": "try ( eapply _i ) .",
                "tactic_sig_no_out_arg": "try ( eapply _i ) .",
                "tactic_args": [
                    "c33_goal : congruent (compose (output c z Q) (input c P))\n  (compose (output c z Q) (input c P))",
                    "_global_cong_refl : forall P : process, congruent P P"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try ( eapply _i ) .",
                "tactic_sig_no_out_arg": "try ( eapply _i ) .",
                "tactic_args": [
                    "c34_goal : congruent (compose Q (open z P)) (compose Q (open z P))",
                    "_global_cong_refl : forall P : process, congruent P P"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try ( eapply _i ) .",
                "tactic_sig_no_out_arg": "try ( eapply _i ) .",
                "tactic_args": [
                    "_global_cong_refl : forall P : process, congruent P P"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "constructor .",
                "tactic_sig_no_out_arg": "constructor .",
                "tactic_args": [
                    "c35_goal : step_process_base (compose (output c z Q) (input c P))\n  (compose Q (open z P))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ P1 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P1 ] .",
                "tactic_args": [
                    "c6_IHstep_process_cong : step_process P1 P2"
                ],
                "tactic_res": [
                    "c8_H2 : ex\n  (fun Q' : process =>\n   and (congruent P P1)\n     (and (congruent Q Q') (step_process_base P1 Q')))",
                    "c8_P1 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q1 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q1 ] .",
                "tactic_args": [
                    "c8_H2 : ex\n  (fun Q' : process =>\n   and (congruent P P1)\n     (and (congruent Q Q') (step_process_base P1 Q')))"
                ],
                "tactic_res": [
                    "c8_H2 : and (congruent P P1) (and (congruent Q Q1) (step_process_base P1 Q1))",
                    "c8_Q1 : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c8_goal : step_process P' Q'",
                    "c6_P1 : process"
                ],
                "tactic_res": [
                    "c36_goal : ex\n  (fun Q'0 : process =>\n   and (congruent P' P1)\n     (and (congruent Q' Q'0) (step_process_base P1 Q'0)))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c36_goal : ex\n  (fun Q'0 : process =>\n   and (congruent P' P1)\n     (and (congruent Q' Q'0) (step_process_base P1 Q'0)))",
                    "c8_Q1 : process"
                ],
                "tactic_res": [
                    "c37_goal : and (congruent P' P1) (and (congruent Q' Q1) (step_process_base P1 Q1))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c37_goal : and (congruent P' P1) (and (congruent Q' Q1) (step_process_base P1 Q1))"
                ],
                "tactic_res": [
                    "c38_goal : congruent P' P1",
                    "c39_goal : congruent Q' Q1",
                    "c40_goal : step_process_base P1 Q1"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c38_goal : congruent P' P1",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c41_goal : congruent P' ?Q",
                    "c42_goal : congruent ?Q P1"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c41_goal : congruent P' ?Q",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c43_goal : congruent ?Q P'"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c43_goal : congruent ?Q P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c42_goal : congruent P P1",
                    "c8_H2 : ex\n  (fun Q' : process =>\n   and (congruent P P1)\n     (and (congruent Q Q') (step_process_base P1 Q')))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c39_goal : congruent Q' Q1",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c44_goal : congruent Q' ?Q",
                    "c45_goal : congruent ?Q Q1"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c44_goal : congruent Q' ?Q",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c46_goal : congruent ?Q Q'"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c46_goal : congruent ?Q Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c45_goal : congruent Q Q1",
                    "c8_H2 : ex\n  (fun Q' : process =>\n   and (congruent P P1)\n     (and (congruent Q Q') (step_process_base P1 Q')))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c40_goal : step_process_base P1 Q1",
                    "c8_H2 : ex\n  (fun Q' : process =>\n   and (congruent P P1)\n     (and (congruent Q Q') (step_process_base P1 Q')))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c4_goal : forall _ : step_process P Q, step_process_cong P Q"
                ],
                "tactic_res": [
                    "c47_goal : step_process_cong P Q",
                    "c47_H : step_process P Q"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ P' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P' ] .",
                "tactic_args": [
                    "c47_H : step_process P Q"
                ],
                "tactic_res": [
                    "c47_H : ex\n  (fun Q' : process =>\n   and (congruent P P')\n     (and (congruent Q Q') (step_process_base P' Q')))",
                    "c47_P' : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q' ] .",
                "tactic_args": [
                    "c47_H : step_process P Q"
                ],
                "tactic_res": [
                    "c47_H : and (congruent P P') (and (congruent Q Q') (step_process_base P' Q'))",
                    "c47_Q' : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ CPP' _i ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ CPP' _i ] .",
                "tactic_args": [
                    "c47_H : step_process P Q",
                    "c47_H : step_process P Q"
                ],
                "tactic_res": [
                    "c47_H : and (congruent Q Q') (step_process_base P' Q')",
                    "c47_CPP' : congruent P P'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ CQQ' _i ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ CQQ' _i ] .",
                "tactic_args": [
                    "c47_H : step_process P Q",
                    "c47_H : step_process P Q"
                ],
                "tactic_res": [
                    "c47_H : step_process_base P' Q'",
                    "c47_CQQ' : congruent Q Q'"
                ]
            },
            {
                "tactic_sig": "apply _i with ( _i := _i ) ( _i := _i ) .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := _i ) ( _i := _i ) .",
                "tactic_args": [
                    "c47_goal : step_process_cong P Q",
                    "_global_step_cong : forall (P Q P' Q' : process) (_ : step_process_cong P Q)\n         (_ : congruent P P') (_ : congruent Q Q'), \n       step_process_cong P' Q'",
                    "c2_P : process",
                    "c47_P' : process",
                    "c2_Q : process",
                    "c47_Q' : process"
                ],
                "tactic_res": [
                    "c48_goal : step_process_cong P' Q'",
                    "c49_goal : congruent P' P",
                    "c50_goal : congruent Q' Q"
                ]
            },
            {
                "tactic_sig": "generalize dependent _i .",
                "tactic_sig_no_out_arg": "generalize dependent _i .",
                "tactic_args": [
                    "c48_goal : step_process_cong P' Q'",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c51_goal : forall (P : process) (_ : congruent P P'), step_process_cong P' Q'"
                ]
            },
            {
                "tactic_sig": "generalize dependent _i .",
                "tactic_sig_no_out_arg": "generalize dependent _i .",
                "tactic_args": [
                    "c51_goal : forall (P : process) (_ : congruent P P'), step_process_cong P' Q'",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c52_goal : forall (Q : process) (_ : congruent Q Q') (P : process)\n  (_ : congruent P P'), step_process_cong P' Q'"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c52_goal : forall (Q : process) (_ : congruent Q Q') (P : process)\n  (_ : congruent P P'), step_process_cong P' Q'",
                    "c47_H : step_process P Q"
                ],
                "tactic_res": [
                    "c53_goal : forall (Q : process) (_ : congruent Q (compose P2 P3)) \n  (P : process) (_ : congruent P (compose P1 P3)),\nstep_process_cong (compose P1 P3) (compose P2 P3)",
                    "c53_IHstep_process_base : forall (Q : process) (_ : congruent Q P2) (P : process)\n  (_ : congruent P P1), step_process_cong P1 P2",
                    "c53_H : step_process_base P1 P2",
                    "c53_P3 : process",
                    "c53_P2 : process",
                    "c53_P1 : process",
                    "c54_goal : forall (Q0 : process) (_ : congruent Q0 (compose Q (open z P)))\n  (P0 : process)\n  (_ : congruent P0 (compose (output c z Q) (input c P))),\nstep_process_cong (compose (output c z Q) (input c P))\n  (compose Q (open z P))",
                    "c54_Q : process",
                    "c54_P : process",
                    "c54_z : channel",
                    "c54_c : channel"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c53_goal : forall (Q : process) (_ : congruent Q (compose P2 P3)) \n  (P : process) (_ : congruent P (compose P1 P3)),\nstep_process_cong (compose P1 P3) (compose P2 P3)"
                ],
                "tactic_res": [
                    "c55_goal : step_process_cong (compose P1 P3) (compose P2 P3)",
                    "c55_Q : process",
                    "c55_CQQ' : congruent Q (compose P2 P3)",
                    "c55_P : process",
                    "c55_CPP' : congruent P (compose P1 P3)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c55_goal : step_process_cong (compose P1 P3) (compose P2 P3)",
                    "_global_step_composition_cong : forall (P1 P2 P3 : process) (_ : step_process_cong P1 P2),\n       step_process_cong (compose P1 P3) (compose P2 P3)"
                ],
                "tactic_res": [
                    "c56_goal : step_process_cong P1 P2"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c56_goal : step_process_cong P1 P2",
                    "c53_IHstep_process_base : forall (Q : process) (_ : congruent Q P2) (P : process)\n  (_ : congruent P P1), step_process_cong P1 P2"
                ],
                "tactic_res": [
                    "c57_goal : congruent ?Q P2",
                    "c58_goal : congruent ?P P1"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c57_goal : congruent ?Q P2",
                    "_global_cong_refl : forall P : process, congruent P P"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c58_goal : congruent ?P P1",
                    "_global_cong_refl : forall P : process, congruent P P"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c54_goal : forall (Q0 : process) (_ : congruent Q0 (compose Q (open z P)))\n  (P0 : process)\n  (_ : congruent P0 (compose (output c z Q) (input c P))),\nstep_process_cong (compose (output c z Q) (input c P))\n  (compose Q (open z P))"
                ],
                "tactic_res": [
                    "c59_goal : step_process_cong (compose (output c z Q) (input c P))\n  (compose Q (open z P))",
                    "c59_Q0 : process",
                    "c59_CQQ' : congruent Q0 (compose Q (open z P))",
                    "c59_P0 : process",
                    "c59_CPP' : congruent P0 (compose (output c z Q) (input c P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c59_goal : step_process_cong (compose (output c z Q) (input c P))\n  (compose Q (open z P))",
                    "_global_step_communication_cong : forall (c z : channel) (P Q : process),\n       step_process_cong (compose (output c z Q) (input c P))\n         (compose Q (open z P))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c49_goal : congruent P' P",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c60_goal : congruent P P'"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c60_goal : congruent P P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c50_goal : congruent Q' Q",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c61_goal : congruent Q Q'"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c61_goal : congruent Q Q'"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "lts_input_helper",
        "proof": [
            {
                "tactic_sig": "Lemma lts_input_helper : forall P Q c1 c2 , lts P ( recv_label c1 c2 ) Q -> exists R S , congruent P ( compose ( input c1 R ) S ) /\\ congruent Q ( compose ( open c2 R ) S ) .",
                "tactic_sig_no_out_arg": "Lemma lts_input_helper : forall P Q c1 c2 , lts P ( recv_label c1 c2 ) Q -> exists R S , congruent P ( compose ( input c1 R ) S ) /\\ congruent Q ( compose ( open c2 R ) S ) .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (P Q : process) (c1 c2 : channel)\n  (_ : lts P (recv_label c1 c2) Q),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (input c1 R) S))\n        (congruent Q (compose (open c2 R) S))))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (P Q : process) (c1 c2 : channel)\n  (_ : lts P (recv_label c1 c2) Q),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (input c1 R) S))\n        (congruent Q (compose (open c2 R) S))))"
                ],
                "tactic_res": [
                    "c2_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (input c1 R) S))\n        (congruent Q (compose (open c2 R) S))))",
                    "c2_P : process",
                    "c2_Q : process",
                    "c2_c1 : channel",
                    "c2_c2 : channel",
                    "c2_H : lts P (recv_label c1 c2) Q"
                ]
            },
            {
                "tactic_sig": "remember ( recv_label _i _i ) .",
                "tactic_sig_no_out_arg": "remember ( recv_label _i _i ) .",
                "tactic_args": [
                    "c2_c1 : channel",
                    "c2_c2 : channel"
                ],
                "tactic_res": [
                    "c2_H : lts P l Q",
                    "c2_Heql : eq l (recv_label c1 c2)",
                    "c2_l : label"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c2_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (input c1 R) S))\n        (congruent Q (compose (open c2 R) S))))",
                    "c2_H : lts P (recv_label c1 c2) Q"
                ],
                "tactic_res": [
                    "c3_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (compose P Q) (compose (input c1 R) S))\n        (congruent (compose P' Q) (compose (open c2 R) S))))",
                    "c3_IHlts : forall _ : eq l (recv_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (input c1 R) S))\n        (congruent P' (compose (open c2 R) S))))",
                    "c3_H : lts P l P'",
                    "c3_P' : process",
                    "c4_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (compose P Q) (compose (input c1 R) S))\n        (congruent (compose P Q') (compose (open c2 R) S))))",
                    "c4_IHlts : forall _ : eq l (recv_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent Q (compose (input c1 R) S))\n        (congruent Q' (compose (open c2 R) S))))",
                    "c4_H : lts Q l Q'",
                    "c4_Q' : process",
                    "c5_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (input c P) (compose (input c1 R) S))\n        (congruent (open n P) (compose (open c2 R) S))))",
                    "c5_Heql : eq (recv_label c n) (recv_label c1 c2)",
                    "c5_n : channel",
                    "c5_c : channel",
                    "c6_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (output c c' P) (compose (input c1 R) S))\n        (congruent P (compose (open c2 R) S))))",
                    "c6_Heql : eq (send_label c c') (recv_label c1 c2)",
                    "c6_c' : channel",
                    "c6_c : channel",
                    "c7_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (compose P Q) (compose (input c1 R) S))\n        (congruent (compose P' Q') (compose (open c2 R) S))))",
                    "c7_IHlts2 : forall _ : eq (recv_label c n) (recv_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent Q (compose (input c1 R) S))\n        (congruent Q' (compose (open c2 R) S))))",
                    "c7_IHlts1 : forall _ : eq (send_label c n) (recv_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (input c1 R) S))\n        (congruent P' (compose (open c2 R) S))))",
                    "c7_H0 : lts Q (recv_label c n) Q'",
                    "c7_H : lts P (send_label c n) P'",
                    "c7_n : channel",
                    "c7_c : channel",
                    "c7_Q' : process",
                    "c7_P' : process",
                    "c7_Heql : eq tau_label (recv_label c1 c2)",
                    "c8_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (compose P Q) (compose (input c1 R) S))\n        (congruent (compose P' Q') (compose (open c2 R) S))))",
                    "c8_IHlts2 : forall _ : eq (send_label c n) (recv_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent Q (compose (input c1 R) S))\n        (congruent Q' (compose (open c2 R) S))))",
                    "c8_IHlts1 : forall _ : eq (recv_label c n) (recv_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (input c1 R) S))\n        (congruent P' (compose (open c2 R) S))))",
                    "c8_H0 : lts Q (send_label c n) Q'",
                    "c8_H : lts P (recv_label c n) P'",
                    "c8_n : channel",
                    "c8_c : channel",
                    "c8_Q' : process",
                    "c8_P' : process",
                    "c8_Heql : eq tau_label (recv_label c1 c2)",
                    "c9_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (replicate P) (compose (input c1 R) S))\n        (congruent (compose P' (replicate P)) (compose (open c2 R) S))))",
                    "c9_IHlts : forall _ : eq a (recv_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (input c1 R) S))\n        (congruent P' (compose (open c2 R) S))))",
                    "c9_H : lts P a P'",
                    "c9_P' : process",
                    "c9_Heql : eq a (recv_label c1 c2)",
                    "c9_a : label",
                    "c10_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (replicate P) (compose (input c1 R) S))\n        (congruent (compose (compose P' P'') (replicate P))\n           (compose (open c2 R) S))))",
                    "c10_IHlts2 : forall _ : eq (recv_label c n) (recv_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (input c1 R) S))\n        (congruent P'' (compose (open c2 R) S))))",
                    "c10_IHlts1 : forall _ : eq (send_label c n) (recv_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (input c1 R) S))\n        (congruent P' (compose (open c2 R) S))))",
                    "c10_H0 : lts P (recv_label c n) P''",
                    "c10_H : lts P (send_label c n) P'",
                    "c10_P'' : process",
                    "c10_P' : process",
                    "c10_n : channel",
                    "c10_c : channel",
                    "c10_Heql : eq tau_label (recv_label c1 c2)"
                ]
            },
            {
                "tactic_sig": "try ( inversion _i ; subst ) .",
                "tactic_sig_no_out_arg": "try ( inversion _i ; subst ) .",
                "tactic_args": [
                    "c2_Heql : eq l (recv_label c1 c2)"
                ],
                "tactic_res": [
                    "c3_H : lts P (recv_label c1 c2) P'",
                    "c3_IHlts : forall _ : eq (recv_label c1 c2) (recv_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (input c1 R) S))\n        (congruent P' (compose (open c2 R) S))))",
                    "c3_H0 : eq (recv_label c1 c2) (recv_label c1 c2)"
                ]
            },
            {
                "tactic_sig": "try ( inversion _i ; subst ) .",
                "tactic_sig_no_out_arg": "try ( inversion _i ; subst ) .",
                "tactic_args": [
                    "c2_Heql : eq l (recv_label c1 c2)"
                ],
                "tactic_res": [
                    "c4_H : lts Q (recv_label c1 c2) Q'",
                    "c4_IHlts : forall _ : eq (recv_label c1 c2) (recv_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent Q (compose (input c1 R) S))\n        (congruent Q' (compose (open c2 R) S))))",
                    "c4_H0 : eq (recv_label c1 c2) (recv_label c1 c2)"
                ]
            },
            {
                "tactic_sig": "try ( inversion _i ; subst ) .",
                "tactic_sig_no_out_arg": "try ( inversion _i ; subst ) .",
                "tactic_args": [
                    "c5_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (input c P) (compose (input c1 R) S))\n        (congruent (open n P) (compose (open c2 R) S))))",
                    "c2_Heql : eq l (recv_label c1 c2)"
                ],
                "tactic_res": [
                    "c11_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (input c1 P) (compose (input c1 R) S))\n        (congruent (open c2 P) (compose (open c2 R) S))))",
                    "c11_Heql : eq (recv_label c1 c2) (recv_label c1 c2)"
                ]
            },
            {
                "tactic_sig": "try ( inversion _i ; subst ) .",
                "tactic_sig_no_out_arg": "try ( inversion _i ; subst ) .",
                "tactic_args": [
                    "c6_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (output c c' P) (compose (input c1 R) S))\n        (congruent P (compose (open c2 R) S))))",
                    "c2_Heql : eq l (recv_label c1 c2)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try ( inversion _i ; subst ) .",
                "tactic_sig_no_out_arg": "try ( inversion _i ; subst ) .",
                "tactic_args": [
                    "c7_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (compose P Q) (compose (input c1 R) S))\n        (congruent (compose P' Q') (compose (open c2 R) S))))",
                    "c2_Heql : eq l (recv_label c1 c2)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try ( inversion _i ; subst ) .",
                "tactic_sig_no_out_arg": "try ( inversion _i ; subst ) .",
                "tactic_args": [
                    "c8_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (compose P Q) (compose (input c1 R) S))\n        (congruent (compose P' Q') (compose (open c2 R) S))))",
                    "c2_Heql : eq l (recv_label c1 c2)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try ( inversion _i ; subst ) .",
                "tactic_sig_no_out_arg": "try ( inversion _i ; subst ) .",
                "tactic_args": [
                    "c2_Heql : eq l (recv_label c1 c2)"
                ],
                "tactic_res": [
                    "c9_H : lts P (recv_label c1 c2) P'",
                    "c9_IHlts : forall _ : eq (recv_label c1 c2) (recv_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (input c1 R) S))\n        (congruent P' (compose (open c2 R) S))))",
                    "c9_H0 : eq (recv_label c1 c2) (recv_label c1 c2)"
                ]
            },
            {
                "tactic_sig": "try ( inversion _i ; subst ) .",
                "tactic_sig_no_out_arg": "try ( inversion _i ; subst ) .",
                "tactic_args": [
                    "c10_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (replicate P) (compose (input c1 R) S))\n        (congruent (compose (compose P' P'') (replicate P))\n           (compose (open c2 R) S))))",
                    "c2_Heql : eq l (recv_label c1 c2)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i in _i .",
                "tactic_sig_no_out_arg": "apply _i in _i .",
                "tactic_args": [
                    "c3_IHlts : forall _ : eq l (recv_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (input c1 R) S))\n        (congruent P' (compose (open c2 R) S))))",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c3_H0 : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (input c1 R) S))\n        (congruent P' (compose (open c2 R) S))))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ R ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ R ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c3_H0 : ex\n  (fun S : process =>\n   and (congruent P (compose (input c1 R) S))\n     (congruent P' (compose (open c2 R) S)))",
                    "c3_R : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ S ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ S ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c3_H0 : and (congruent P (compose (input c1 R) S))\n  (congruent P' (compose (open c2 R) S))",
                    "c3_S : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c3_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (compose P Q) (compose (input c1 R) S))\n        (congruent (compose P' Q) (compose (open c2 R) S))))",
                    "c3_R : process"
                ],
                "tactic_res": [
                    "c12_goal : ex\n  (fun S : process =>\n   and (congruent (compose P Q) (compose (input c1 R) S))\n     (congruent (compose P' Q) (compose (open c2 R) S)))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c12_goal : ex\n  (fun S : process =>\n   and (congruent (compose P Q) (compose (input c1 R) S))\n     (congruent (compose P' Q) (compose (open c2 R) S)))",
                    "c3_S : process",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c13_goal : and (congruent (compose P Q) (compose (input c1 R) (compose S Q)))\n  (congruent (compose P' Q) (compose (open c2 R) (compose S Q)))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c13_goal : and (congruent (compose P Q) (compose (input c1 R) (compose S Q)))\n  (congruent (compose P' Q) (compose (open c2 R) (compose S Q)))"
                ],
                "tactic_res": [
                    "c14_goal : congruent (compose P Q) (compose (input c1 R) (compose S Q))",
                    "c15_goal : congruent (compose P' Q) (compose (open c2 R) (compose S Q))"
                ]
            },
            {
                "tactic_sig": "apply _i with ( _i := ( compose ( compose ( input _i _i ) _i ) _i ) ) .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ( compose ( compose ( input _i _i ) _i ) _i ) ) .",
                "tactic_args": [
                    "c14_goal : congruent (compose P Q) (compose (input c1 R) (compose S Q))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R",
                    "c2_Q : process",
                    "c2_c1 : channel",
                    "c3_R : process",
                    "c3_S : process",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c16_goal : congruent (compose P Q) (compose (compose (input c1 R) S) Q)",
                    "c17_goal : congruent (compose (compose (input c1 R) S) Q)\n  (compose (input c1 R) (compose S Q))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c16_goal : congruent (compose P Q) (compose (compose (input c1 R) S) Q)",
                    "c2_P : process",
                    "c2_Q : process",
                    "c2_Q : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c18_goal : eq (compose P Q) (fill (c_compose_l c_hole Q) P)",
                    "c19_goal : congruent (compose P Q) (compose (compose (input c1 R) S) Q)",
                    "c19_H1 : eq (compose P Q) (fill (c_compose_l c_hole Q) P)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c18_goal : eq (compose P Q) (fill (c_compose_l c_hole Q) P)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose ( compose ( input _i _i ) _i ) _i = fill ( c_compose_l c_hole _i ) ( compose ( input _i _i ) _i ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose ( compose ( input _i _i ) _i ) _i = fill ( c_compose_l c_hole _i ) ( compose ( input _i _i ) _i ) ) .",
                "tactic_args": [
                    "c19_goal : congruent (compose P Q) (compose (compose (input c1 R) S) Q)",
                    "c2_c1 : channel",
                    "c3_R : process",
                    "c3_S : process",
                    "c2_Q : process",
                    "c2_Q : process",
                    "c2_c1 : channel",
                    "c3_R : process",
                    "c3_S : process"
                ],
                "tactic_res": [
                    "c20_goal : eq (compose (compose (input c1 R) S) Q)\n  (fill (c_compose_l c_hole Q) (compose (input c1 R) S))",
                    "c21_goal : congruent (compose P Q) (compose (compose (input c1 R) S) Q)",
                    "c21_H2 : eq (compose (compose (input c1 R) S) Q)\n  (fill (c_compose_l c_hole Q) (compose (input c1 R) S))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c20_goal : eq (compose (compose (input c1 R) S) Q)\n  (fill (c_compose_l c_hole Q) (compose (input c1 R) S))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c21_goal : congruent (compose P Q) (compose (compose (input c1 R) S) Q)",
                    "c19_H1 : eq (compose P Q) (fill (c_compose_l c_hole Q) P)"
                ],
                "tactic_res": [
                    "c22_goal : congruent (fill (c_compose_l c_hole Q) P)\n  (compose (compose (input c1 R) S) Q)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c22_goal : congruent (fill (c_compose_l c_hole Q) P)\n  (compose (compose (input c1 R) S) Q)",
                    "c21_H2 : eq (compose (compose (input c1 R) S) Q)\n  (fill (c_compose_l c_hole Q) (compose (input c1 R) S))"
                ],
                "tactic_res": [
                    "c23_goal : congruent (fill (c_compose_l c_hole Q) P)\n  (fill (c_compose_l c_hole Q) (compose (input c1 R) S))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c23_goal : congruent (fill (c_compose_l c_hole Q) P)\n  (fill (c_compose_l c_hole Q) (compose (input c1 R) S))",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c24_goal : congruent P (compose (input c1 R) S)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c24_goal : congruent P (compose (input c1 R) S)",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c17_goal : congruent (compose (compose (input c1 R) S) Q)\n  (compose (input c1 R) (compose S Q))",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c25_goal : congruent (compose (input c1 R) (compose S Q))\n  (compose (compose (input c1 R) S) Q)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c25_goal : congruent (compose (input c1 R) (compose S Q))\n  (compose (compose (input c1 R) S) Q)",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i with ( _i := ( compose ( compose ( open _i _i ) _i ) _i ) ) .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ( compose ( compose ( open _i _i ) _i ) _i ) ) .",
                "tactic_args": [
                    "c15_goal : congruent (compose P' Q) (compose (open c2 R) (compose S Q))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R",
                    "c2_Q : process",
                    "c2_c2 : channel",
                    "c3_R : process",
                    "c3_S : process",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c26_goal : congruent (compose P' Q) (compose (compose (open c2 R) S) Q)",
                    "c27_goal : congruent (compose (compose (open c2 R) S) Q)\n  (compose (open c2 R) (compose S Q))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c26_goal : congruent (compose P' Q) (compose (compose (open c2 R) S) Q)",
                    "c3_P' : process",
                    "c2_Q : process",
                    "c2_Q : process",
                    "c3_P' : process"
                ],
                "tactic_res": [
                    "c28_goal : eq (compose P' Q) (fill (c_compose_l c_hole Q) P')",
                    "c29_goal : congruent (compose P' Q) (compose (compose (open c2 R) S) Q)",
                    "c29_H1 : eq (compose P' Q) (fill (c_compose_l c_hole Q) P')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c28_goal : eq (compose P' Q) (fill (c_compose_l c_hole Q) P')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose ( compose ( open _i _i ) _i ) _i = fill ( c_compose_l c_hole _i ) ( compose ( open _i _i ) _i ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose ( compose ( open _i _i ) _i ) _i = fill ( c_compose_l c_hole _i ) ( compose ( open _i _i ) _i ) ) .",
                "tactic_args": [
                    "c29_goal : congruent (compose P' Q) (compose (compose (open c2 R) S) Q)",
                    "c2_c2 : channel",
                    "c3_R : process",
                    "c3_S : process",
                    "c2_Q : process",
                    "c2_Q : process",
                    "c2_c2 : channel",
                    "c3_R : process",
                    "c3_S : process"
                ],
                "tactic_res": [
                    "c30_goal : eq (compose (compose (open c2 R) S) Q)\n  (fill (c_compose_l c_hole Q) (compose (open c2 R) S))",
                    "c31_goal : congruent (compose P' Q) (compose (compose (open c2 R) S) Q)",
                    "c31_H2 : eq (compose (compose (open c2 R) S) Q)\n  (fill (c_compose_l c_hole Q) (compose (open c2 R) S))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c30_goal : eq (compose (compose (open c2 R) S) Q)\n  (fill (c_compose_l c_hole Q) (compose (open c2 R) S))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c31_goal : congruent (compose P' Q) (compose (compose (open c2 R) S) Q)",
                    "c29_H1 : eq (compose P' Q) (fill (c_compose_l c_hole Q) P')"
                ],
                "tactic_res": [
                    "c32_goal : congruent (fill (c_compose_l c_hole Q) P')\n  (compose (compose (open c2 R) S) Q)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c32_goal : congruent (fill (c_compose_l c_hole Q) P')\n  (compose (compose (open c2 R) S) Q)",
                    "c31_H2 : eq (compose (compose (open c2 R) S) Q)\n  (fill (c_compose_l c_hole Q) (compose (open c2 R) S))"
                ],
                "tactic_res": [
                    "c33_goal : congruent (fill (c_compose_l c_hole Q) P')\n  (fill (c_compose_l c_hole Q) (compose (open c2 R) S))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c33_goal : congruent (fill (c_compose_l c_hole Q) P')\n  (fill (c_compose_l c_hole Q) (compose (open c2 R) S))",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c34_goal : congruent P' (compose (open c2 R) S)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c34_goal : congruent P' (compose (open c2 R) S)",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c27_goal : congruent (compose (compose (open c2 R) S) Q)\n  (compose (open c2 R) (compose S Q))",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c35_goal : congruent (compose (open c2 R) (compose S Q))\n  (compose (compose (open c2 R) S) Q)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c35_goal : congruent (compose (open c2 R) (compose S Q))\n  (compose (compose (open c2 R) S) Q)",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i in _i .",
                "tactic_sig_no_out_arg": "apply _i in _i .",
                "tactic_args": [
                    "c3_IHlts : forall _ : eq l (recv_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (input c1 R) S))\n        (congruent P' (compose (open c2 R) S))))",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c4_H0 : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent Q (compose (input c1 R) S))\n        (congruent Q' (compose (open c2 R) S))))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ R ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ R ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c4_H0 : ex\n  (fun S : process =>\n   and (congruent Q (compose (input c1 R) S))\n     (congruent Q' (compose (open c2 R) S)))",
                    "c4_R : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ S ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ S ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c4_H0 : and (congruent Q (compose (input c1 R) S))\n  (congruent Q' (compose (open c2 R) S))",
                    "c4_S : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c4_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (compose P Q) (compose (input c1 R) S))\n        (congruent (compose P Q') (compose (open c2 R) S))))",
                    "c3_R : process"
                ],
                "tactic_res": [
                    "c36_goal : ex\n  (fun S : process =>\n   and (congruent (compose P Q) (compose (input c1 R) S))\n     (congruent (compose P Q') (compose (open c2 R) S)))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c36_goal : ex\n  (fun S : process =>\n   and (congruent (compose P Q) (compose (input c1 R) S))\n     (congruent (compose P Q') (compose (open c2 R) S)))",
                    "c2_P : process",
                    "c3_S : process"
                ],
                "tactic_res": [
                    "c37_goal : and (congruent (compose P Q) (compose (input c1 R) (compose P S)))\n  (congruent (compose P Q') (compose (open c2 R) (compose P S)))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c37_goal : and (congruent (compose P Q) (compose (input c1 R) (compose P S)))\n  (congruent (compose P Q') (compose (open c2 R) (compose P S)))"
                ],
                "tactic_res": [
                    "c38_goal : congruent (compose P Q) (compose (input c1 R) (compose P S))",
                    "c39_goal : congruent (compose P Q') (compose (open c2 R) (compose P S))"
                ]
            },
            {
                "tactic_sig": "eapply _i with ( _i := ( compose _i ( compose ( input _i _i ) _i ) ) ) .",
                "tactic_sig_no_out_arg": "eapply _i with ( _i := ( compose _i ( compose ( input _i _i ) _i ) ) ) .",
                "tactic_args": [
                    "c38_goal : congruent (compose P Q) (compose (input c1 R) (compose P S))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R",
                    "c2_Q : process",
                    "c2_P : process",
                    "c2_c1 : channel",
                    "c3_R : process",
                    "c3_S : process"
                ],
                "tactic_res": [
                    "c40_goal : congruent (compose P Q) (compose P (compose (input c1 R) S))",
                    "c41_goal : congruent (compose P (compose (input c1 R) S))\n  (compose (input c1 R) (compose P S))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_r _i c_hole ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_r _i c_hole ) _i ) .",
                "tactic_args": [
                    "c40_goal : congruent (compose P Q) (compose P (compose (input c1 R) S))",
                    "c2_P : process",
                    "c2_Q : process",
                    "c2_P : process",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c42_goal : eq (compose P Q) (fill (c_compose_r P c_hole) Q)",
                    "c43_goal : congruent (compose P Q) (compose P (compose (input c1 R) S))",
                    "c43_H1 : eq (compose P Q) (fill (c_compose_r P c_hole) Q)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c42_goal : eq (compose P Q) (fill (c_compose_r P c_hole) Q)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose _i ( compose ( input _i _i ) _i ) = fill ( c_compose_r _i c_hole ) ( compose ( input _i _i ) _i ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i ( compose ( input _i _i ) _i ) = fill ( c_compose_r _i c_hole ) ( compose ( input _i _i ) _i ) ) .",
                "tactic_args": [
                    "c43_goal : congruent (compose P Q) (compose P (compose (input c1 R) S))",
                    "c2_P : process",
                    "c2_c1 : channel",
                    "c3_R : process",
                    "c3_S : process",
                    "c2_P : process",
                    "c2_c1 : channel",
                    "c3_R : process",
                    "c3_S : process"
                ],
                "tactic_res": [
                    "c44_goal : eq (compose P (compose (input c1 R) S))\n  (fill (c_compose_r P c_hole) (compose (input c1 R) S))",
                    "c45_goal : congruent (compose P Q) (compose P (compose (input c1 R) S))",
                    "c45_H2 : eq (compose P (compose (input c1 R) S))\n  (fill (c_compose_r P c_hole) (compose (input c1 R) S))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c44_goal : eq (compose P (compose (input c1 R) S))\n  (fill (c_compose_r P c_hole) (compose (input c1 R) S))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c45_goal : congruent (compose P Q) (compose P (compose (input c1 R) S))",
                    "c43_H1 : eq (compose P Q) (fill (c_compose_r P c_hole) Q)"
                ],
                "tactic_res": [
                    "c46_goal : congruent (fill (c_compose_r P c_hole) Q)\n  (compose P (compose (input c1 R) S))"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c46_goal : congruent (fill (c_compose_r P c_hole) Q)\n  (compose P (compose (input c1 R) S))",
                    "c45_H2 : eq (compose P (compose (input c1 R) S))\n  (fill (c_compose_r P c_hole) (compose (input c1 R) S))"
                ],
                "tactic_res": [
                    "c47_goal : congruent (fill (c_compose_r P c_hole) Q)\n  (fill (c_compose_r P c_hole) (compose (input c1 R) S))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c47_goal : congruent (fill (c_compose_r P c_hole) Q)\n  (fill (c_compose_r P c_hole) (compose (input c1 R) S))",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c48_goal : congruent Q (compose (input c1 R) S)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c48_goal : congruent Q (compose (input c1 R) S)",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c41_goal : congruent (compose P (compose (input c1 R) S))\n  (compose (input c1 R) (compose P S))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c49_goal : congruent (compose P (compose (input c1 R) S)) ?Q",
                    "c50_goal : congruent ?Q (compose (input c1 R) (compose P S))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c49_goal : congruent (compose P (compose (input c1 R) S)) ?Q",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i with ( _i := ( compose ( compose ( input _i _i ) _i ) _i ) ) .",
                "tactic_sig_no_out_arg": "eapply _i with ( _i := ( compose ( compose ( input _i _i ) _i ) _i ) ) .",
                "tactic_args": [
                    "c50_goal : congruent (compose (compose P (input c1 R)) S)\n  (compose (input c1 R) (compose P S))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R",
                    "c2_Q : process",
                    "c2_c1 : channel",
                    "c3_R : process",
                    "c2_P : process",
                    "c3_S : process"
                ],
                "tactic_res": [
                    "c51_goal : congruent (compose (compose P (input c1 R)) S)\n  (compose (compose (input c1 R) P) S)",
                    "c52_goal : congruent (compose (compose (input c1 R) P) S)\n  (compose (input c1 R) (compose P S))"
                ]
            },
            {
                "tactic_sig": "assert ( compose ( compose _i ( input _i _i ) ) _i = fill ( c_compose_l c_hole _i ) ( compose _i ( input _i _i ) ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose ( compose _i ( input _i _i ) ) _i = fill ( c_compose_l c_hole _i ) ( compose _i ( input _i _i ) ) ) .",
                "tactic_args": [
                    "c51_goal : congruent (compose (compose P (input c1 R)) S)\n  (compose (compose (input c1 R) P) S)",
                    "c2_P : process",
                    "c2_c1 : channel",
                    "c3_R : process",
                    "c3_S : process",
                    "c3_S : process",
                    "c2_P : process",
                    "c2_c1 : channel",
                    "c3_R : process"
                ],
                "tactic_res": [
                    "c53_goal : eq (compose (compose P (input c1 R)) S)\n  (fill (c_compose_l c_hole S) (compose P (input c1 R)))",
                    "c54_goal : congruent (compose (compose P (input c1 R)) S)\n  (compose (compose (input c1 R) P) S)",
                    "c54_H1 : eq (compose (compose P (input c1 R)) S)\n  (fill (c_compose_l c_hole S) (compose P (input c1 R)))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c53_goal : eq (compose (compose P (input c1 R)) S)\n  (fill (c_compose_l c_hole S) (compose P (input c1 R)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose ( compose ( input _i _i ) _i ) _i = fill ( c_compose_l c_hole _i ) ( compose ( input _i _i ) _i ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose ( compose ( input _i _i ) _i ) _i = fill ( c_compose_l c_hole _i ) ( compose ( input _i _i ) _i ) ) .",
                "tactic_args": [
                    "c54_goal : congruent (compose (compose P (input c1 R)) S)\n  (compose (compose (input c1 R) P) S)",
                    "c2_c1 : channel",
                    "c3_R : process",
                    "c2_P : process",
                    "c3_S : process",
                    "c3_S : process",
                    "c2_c1 : channel",
                    "c3_R : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c55_goal : eq (compose (compose (input c1 R) P) S)\n  (fill (c_compose_l c_hole S) (compose (input c1 R) P))",
                    "c56_goal : congruent (compose (compose P (input c1 R)) S)\n  (compose (compose (input c1 R) P) S)",
                    "c56_H2 : eq (compose (compose (input c1 R) P) S)\n  (fill (c_compose_l c_hole S) (compose (input c1 R) P))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c55_goal : eq (compose (compose (input c1 R) P) S)\n  (fill (c_compose_l c_hole S) (compose (input c1 R) P))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c56_goal : congruent (compose (compose P (input c1 R)) S)\n  (compose (compose (input c1 R) P) S)",
                    "c54_H1 : eq (compose (compose P (input c1 R)) S)\n  (fill (c_compose_l c_hole S) (compose P (input c1 R)))"
                ],
                "tactic_res": [
                    "c57_goal : congruent (fill (c_compose_l c_hole S) (compose P (input c1 R)))\n  (compose (compose (input c1 R) P) S)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c57_goal : congruent (fill (c_compose_l c_hole S) (compose P (input c1 R)))\n  (compose (compose (input c1 R) P) S)",
                    "c56_H2 : eq (compose (compose (input c1 R) P) S)\n  (fill (c_compose_l c_hole S) (compose (input c1 R) P))"
                ],
                "tactic_res": [
                    "c58_goal : congruent (fill (c_compose_l c_hole S) (compose P (input c1 R)))\n  (fill (c_compose_l c_hole S) (compose (input c1 R) P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c58_goal : congruent (fill (c_compose_l c_hole S) (compose P (input c1 R)))\n  (fill (c_compose_l c_hole S) (compose (input c1 R) P))",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c59_goal : congruent (compose P (input c1 R)) (compose (input c1 R) P)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c59_goal : congruent (compose P (input c1 R)) (compose (input c1 R) P)",
                    "_global_cong_compose_comm : forall P1 P2 : process, congruent (compose P1 P2) (compose P2 P1)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c52_goal : congruent (compose (compose (input c1 R) P) S)\n  (compose (input c1 R) (compose P S))",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c60_goal : congruent (compose (input c1 R) (compose P S))\n  (compose (compose (input c1 R) P) S)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c60_goal : congruent (compose (input c1 R) (compose P S))\n  (compose (compose (input c1 R) P) S)",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i with ( _i := ( compose _i ( compose ( open _i _i ) _i ) ) ) .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ( compose _i ( compose ( open _i _i ) _i ) ) ) .",
                "tactic_args": [
                    "c39_goal : congruent (compose P Q') (compose (open c2 R) (compose P S))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R",
                    "c2_Q : process",
                    "c2_P : process",
                    "c2_c2 : channel",
                    "c3_R : process",
                    "c3_S : process"
                ],
                "tactic_res": [
                    "c61_goal : congruent (compose P Q') (compose P (compose (open c2 R) S))",
                    "c62_goal : congruent (compose P (compose (open c2 R) S))\n  (compose (open c2 R) (compose P S))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_r _i c_hole ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_r _i c_hole ) _i ) .",
                "tactic_args": [
                    "c61_goal : congruent (compose P Q') (compose P (compose (open c2 R) S))",
                    "c2_P : process",
                    "c4_Q' : process",
                    "c2_P : process",
                    "c4_Q' : process"
                ],
                "tactic_res": [
                    "c63_goal : eq (compose P Q') (fill (c_compose_r P c_hole) Q')",
                    "c64_goal : congruent (compose P Q') (compose P (compose (open c2 R) S))",
                    "c64_H1 : eq (compose P Q') (fill (c_compose_r P c_hole) Q')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c63_goal : eq (compose P Q') (fill (c_compose_r P c_hole) Q')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose _i ( compose ( open _i _i ) _i ) = fill ( c_compose_r _i c_hole ) ( compose ( open _i _i ) _i ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i ( compose ( open _i _i ) _i ) = fill ( c_compose_r _i c_hole ) ( compose ( open _i _i ) _i ) ) .",
                "tactic_args": [
                    "c64_goal : congruent (compose P Q') (compose P (compose (open c2 R) S))",
                    "c2_P : process",
                    "c2_c2 : channel",
                    "c3_R : process",
                    "c3_S : process",
                    "c2_P : process",
                    "c2_c2 : channel",
                    "c3_R : process",
                    "c3_S : process"
                ],
                "tactic_res": [
                    "c65_goal : eq (compose P (compose (open c2 R) S))\n  (fill (c_compose_r P c_hole) (compose (open c2 R) S))",
                    "c66_goal : congruent (compose P Q') (compose P (compose (open c2 R) S))",
                    "c66_H2 : eq (compose P (compose (open c2 R) S))\n  (fill (c_compose_r P c_hole) (compose (open c2 R) S))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c65_goal : eq (compose P (compose (open c2 R) S))\n  (fill (c_compose_r P c_hole) (compose (open c2 R) S))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c66_goal : congruent (compose P Q') (compose P (compose (open c2 R) S))",
                    "c64_H1 : eq (compose P Q') (fill (c_compose_r P c_hole) Q')"
                ],
                "tactic_res": [
                    "c67_goal : congruent (fill (c_compose_r P c_hole) Q')\n  (compose P (compose (open c2 R) S))"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c67_goal : congruent (fill (c_compose_r P c_hole) Q')\n  (compose P (compose (open c2 R) S))",
                    "c66_H2 : eq (compose P (compose (open c2 R) S))\n  (fill (c_compose_r P c_hole) (compose (open c2 R) S))"
                ],
                "tactic_res": [
                    "c68_goal : congruent (fill (c_compose_r P c_hole) Q')\n  (fill (c_compose_r P c_hole) (compose (open c2 R) S))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c68_goal : congruent (fill (c_compose_r P c_hole) Q')\n  (fill (c_compose_r P c_hole) (compose (open c2 R) S))",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c69_goal : congruent Q' (compose (open c2 R) S)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c69_goal : congruent Q' (compose (open c2 R) S)",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c62_goal : congruent (compose P (compose (open c2 R) S))\n  (compose (open c2 R) (compose P S))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c70_goal : congruent (compose P (compose (open c2 R) S)) ?Q",
                    "c71_goal : congruent ?Q (compose (open c2 R) (compose P S))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c70_goal : congruent (compose P (compose (open c2 R) S)) ?Q",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c71_goal : congruent (compose (compose P (open c2 R)) S)\n  (compose (open c2 R) (compose P S))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c72_goal : congruent (compose (compose P (open c2 R)) S) ?Q",
                    "c73_goal : congruent ?Q (compose (open c2 R) (compose P S))"
                ]
            },
            {
                "tactic_sig": "assert ( compose ( compose _i ( open _i _i ) ) _i = fill ( c_compose_l c_hole _i ) ( compose _i ( open _i _i ) ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose ( compose _i ( open _i _i ) ) _i = fill ( c_compose_l c_hole _i ) ( compose _i ( open _i _i ) ) ) .",
                "tactic_args": [
                    "c72_goal : congruent (compose (compose P (open c2 R)) S) ?Q",
                    "c2_P : process",
                    "c2_c2 : channel",
                    "c3_R : process",
                    "c3_S : process",
                    "c3_S : process",
                    "c2_P : process",
                    "c2_c2 : channel",
                    "c3_R : process"
                ],
                "tactic_res": [
                    "c74_goal : eq (compose (compose P (open c2 R)) S)\n  (fill (c_compose_l c_hole S) (compose P (open c2 R)))",
                    "c75_goal : congruent (compose (compose P (open c2 R)) S) ?Q",
                    "c75_H1 : eq (compose (compose P (open c2 R)) S)\n  (fill (c_compose_l c_hole S) (compose P (open c2 R)))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c74_goal : eq (compose (compose P (open c2 R)) S)\n  (fill (c_compose_l c_hole S) (compose P (open c2 R)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c75_goal : congruent (compose (compose P (open c2 R)) S) ?Q",
                    "c75_H1 : eq (compose (compose P (open c2 R)) S)\n  (fill (c_compose_l c_hole S) (compose P (open c2 R)))"
                ],
                "tactic_res": [
                    "c76_goal : congruent (fill (c_compose_l c_hole S) (compose P (open c2 R))) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c76_goal : congruent (fill (c_compose_l c_hole S) (compose P (open c2 R))) ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c77_goal : congruent (compose P (open c2 R)) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c77_goal : congruent (compose P (open c2 R)) ?Q",
                    "_global_cong_compose_comm : forall P1 P2 : process, congruent (compose P1 P2) (compose P2 P1)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c73_goal : congruent (fill (c_compose_l c_hole S) (compose (open c2 R) P))\n  (compose (open c2 R) (compose P S))"
                ],
                "tactic_res": [
                    "c78_goal : congruent (compose (compose (open c2 R) P) S)\n  (compose (open c2 R) (compose P S))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c78_goal : congruent (compose (compose (open c2 R) P) S)\n  (compose (open c2 R) (compose P S))",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c79_goal : congruent (compose (open c2 R) (compose P S))\n  (compose (compose (open c2 R) P) S)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c79_goal : congruent (compose (open c2 R) (compose P S))\n  (compose (compose (open c2 R) P) S)",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c2_Heql : eq l (recv_label c1 c2)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c11_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (input c1 P) (compose (input c1 R) S))\n        (congruent (open c2 P) (compose (open c2 R) S))))",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c80_goal : ex\n  (fun S : process =>\n   and (congruent (input c1 P) (compose (input c1 P) S))\n     (congruent (open c2 P) (compose (open c2 P) S)))"
                ]
            },
            {
                "tactic_sig": "exists stop .",
                "tactic_sig_no_out_arg": "exists stop .",
                "tactic_args": [
                    "c80_goal : ex\n  (fun S : process =>\n   and (congruent (input c1 P) (compose (input c1 P) S))\n     (congruent (open c2 P) (compose (open c2 P) S)))"
                ],
                "tactic_res": [
                    "c81_goal : and (congruent (input c1 P) (compose (input c1 P) stop))\n  (congruent (open c2 P) (compose (open c2 P) stop))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c81_goal : and (congruent (input c1 P) (compose (input c1 P) stop))\n  (congruent (open c2 P) (compose (open c2 P) stop))"
                ],
                "tactic_res": [
                    "c82_goal : congruent (input c1 P) (compose (input c1 P) stop)",
                    "c83_goal : congruent (open c2 P) (compose (open c2 P) stop)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c82_goal : congruent (input c1 P) (compose (input c1 P) stop)",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c84_goal : congruent (compose (input c1 P) stop) (input c1 P)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c84_goal : congruent (compose (input c1 P) stop) (input c1 P)",
                    "_global_cong_zero : forall P : process, congruent (compose P stop) P"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c83_goal : congruent (open c2 P) (compose (open c2 P) stop)",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c85_goal : congruent (compose (open c2 P) stop) (open c2 P)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c85_goal : congruent (compose (open c2 P) stop) (open c2 P)",
                    "_global_cong_zero : forall P : process, congruent (compose P stop) P"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c3_IHlts : forall _ : eq l (recv_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (input c1 R) S))\n        (congruent P' (compose (open c2 R) S))))",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c9_H0 : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (input c1 R) S))\n        (congruent P' (compose (open c2 R) S))))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ R ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ R ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c9_H0 : ex\n  (fun S : process =>\n   and (congruent P (compose (input c1 R) S))\n     (congruent P' (compose (open c2 R) S)))",
                    "c9_R : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ S ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ S ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c9_H0 : and (congruent P (compose (input c1 R) S))\n  (congruent P' (compose (open c2 R) S))",
                    "c9_S : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c9_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (replicate P) (compose (input c1 R) S))\n        (congruent (compose P' (replicate P)) (compose (open c2 R) S))))",
                    "c3_R : process"
                ],
                "tactic_res": [
                    "c86_goal : ex\n  (fun S : process =>\n   and (congruent (replicate P) (compose (input c1 R) S))\n     (congruent (compose P' (replicate P)) (compose (open c2 R) S)))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i ( replicate _i ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i ( replicate _i ) ) .",
                "tactic_args": [
                    "c86_goal : ex\n  (fun S : process =>\n   and (congruent (replicate P) (compose (input c1 R) S))\n     (congruent (compose P' (replicate P)) (compose (open c2 R) S)))",
                    "c3_S : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c87_goal : and\n  (congruent (replicate P)\n     (compose (input c1 R) (compose S (replicate P))))\n  (congruent (compose P' (replicate P))\n     (compose (open c2 R) (compose S (replicate P))))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c87_goal : and\n  (congruent (replicate P)\n     (compose (input c1 R) (compose S (replicate P))))\n  (congruent (compose P' (replicate P))\n     (compose (open c2 R) (compose S (replicate P))))"
                ],
                "tactic_res": [
                    "c88_goal : congruent (replicate P)\n  (compose (input c1 R) (compose S (replicate P)))",
                    "c89_goal : congruent (compose P' (replicate P))\n  (compose (open c2 R) (compose S (replicate P)))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c88_goal : congruent (replicate P)\n  (compose (input c1 R) (compose S (replicate P)))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c90_goal : congruent (replicate P) ?Q",
                    "c91_goal : congruent ?Q (compose (input c1 R) (compose S (replicate P)))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c90_goal : congruent (replicate P) ?Q",
                    "_global_cong_replicate : forall P : process, congruent (replicate P) (compose P (replicate P))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c91_goal : congruent (compose P (replicate P))\n  (compose (input c1 R) (compose S (replicate P)))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c92_goal : congruent (compose P (replicate P)) ?Q",
                    "c93_goal : congruent ?Q (compose (input c1 R) (compose S (replicate P)))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i ( replicate _i ) = fill ( c_compose_l c_hole ( replicate _i ) ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i ( replicate _i ) = fill ( c_compose_l c_hole ( replicate _i ) ) _i ) .",
                "tactic_args": [
                    "c92_goal : congruent (compose P (replicate P)) ?Q",
                    "c2_P : process",
                    "c2_P : process",
                    "c2_P : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c94_goal : eq (compose P (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P)",
                    "c95_goal : congruent (compose P (replicate P)) ?Q",
                    "c95_H1 : eq (compose P (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c94_goal : eq (compose P (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c95_goal : congruent (compose P (replicate P)) ?Q",
                    "c95_H1 : eq (compose P (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P)"
                ],
                "tactic_res": [
                    "c96_goal : congruent (fill (c_compose_l c_hole (replicate P)) P) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c96_goal : congruent (fill (c_compose_l c_hole (replicate P)) P) ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c97_goal : congruent P ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c97_goal : congruent P ?Q",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c93_goal : congruent\n  (fill (c_compose_l c_hole (replicate P)) (compose (input c1 R) S))\n  (compose (input c1 R) (compose S (replicate P)))"
                ],
                "tactic_res": [
                    "c98_goal : congruent (compose (compose (input c1 R) S) (replicate P))\n  (compose (input c1 R) (compose S (replicate P)))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c98_goal : congruent (compose (compose (input c1 R) S) (replicate P))\n  (compose (input c1 R) (compose S (replicate P)))",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c99_goal : congruent (compose (input c1 R) (compose S (replicate P)))\n  (compose (compose (input c1 R) S) (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c99_goal : congruent (compose (input c1 R) (compose S (replicate P)))\n  (compose (compose (input c1 R) S) (replicate P))",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c89_goal : congruent (compose P' (replicate P))\n  (compose (open c2 R) (compose S (replicate P)))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c100_goal : congruent (compose P' (replicate P)) ?Q",
                    "c101_goal : congruent ?Q (compose (open c2 R) (compose S (replicate P)))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i ( replicate _i ) = fill ( c_compose_l c_hole ( replicate _i ) ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i ( replicate _i ) = fill ( c_compose_l c_hole ( replicate _i ) ) _i ) .",
                "tactic_args": [
                    "c100_goal : congruent (compose P' (replicate P)) ?Q",
                    "c3_P' : process",
                    "c2_P : process",
                    "c2_P : process",
                    "c3_P' : process"
                ],
                "tactic_res": [
                    "c102_goal : eq (compose P' (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P')",
                    "c103_goal : congruent (compose P' (replicate P)) ?Q",
                    "c103_H1 : eq (compose P' (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c102_goal : eq (compose P' (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c103_goal : congruent (compose P' (replicate P)) ?Q",
                    "c103_H1 : eq (compose P' (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P')"
                ],
                "tactic_res": [
                    "c104_goal : congruent (fill (c_compose_l c_hole (replicate P)) P') ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c104_goal : congruent (fill (c_compose_l c_hole (replicate P)) P') ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c105_goal : congruent P' ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c105_goal : congruent P' ?Q",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c101_goal : congruent\n  (fill (c_compose_l c_hole (replicate P)) (compose (open c2 R) S))\n  (compose (open c2 R) (compose S (replicate P)))"
                ],
                "tactic_res": [
                    "c106_goal : congruent (compose (compose (open c2 R) S) (replicate P))\n  (compose (open c2 R) (compose S (replicate P)))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c106_goal : congruent (compose (compose (open c2 R) S) (replicate P))\n  (compose (open c2 R) (compose S (replicate P)))",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c107_goal : congruent (compose (open c2 R) (compose S (replicate P)))\n  (compose (compose (open c2 R) S) (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c107_goal : congruent (compose (open c2 R) (compose S (replicate P)))\n  (compose (compose (open c2 R) S) (replicate P))",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "lts_output_helper",
        "proof": [
            {
                "tactic_sig": "Lemma lts_output_helper : forall P Q c1 c2 , lts P ( send_label c1 c2 ) Q -> exists R S , congruent P ( compose ( output c1 c2 R ) S ) /\\ congruent Q ( compose R S ) .",
                "tactic_sig_no_out_arg": "Lemma lts_output_helper : forall P Q c1 c2 , lts P ( send_label c1 c2 ) Q -> exists R S , congruent P ( compose ( output c1 c2 R ) S ) /\\ congruent Q ( compose R S ) .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (P Q : process) (c1 c2 : channel)\n  (_ : lts P (send_label c1 c2) Q),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c1 c2 R) S))\n        (congruent Q (compose R S))))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (P Q : process) (c1 c2 : channel)\n  (_ : lts P (send_label c1 c2) Q),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c1 c2 R) S))\n        (congruent Q (compose R S))))"
                ],
                "tactic_res": [
                    "c2_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c1 c2 R) S))\n        (congruent Q (compose R S))))",
                    "c2_P : process",
                    "c2_Q : process",
                    "c2_c1 : channel",
                    "c2_c2 : channel",
                    "c2_H : lts P (send_label c1 c2) Q"
                ]
            },
            {
                "tactic_sig": "remember ( send_label _i _i ) .",
                "tactic_sig_no_out_arg": "remember ( send_label _i _i ) .",
                "tactic_args": [
                    "c2_c1 : channel",
                    "c2_c2 : channel"
                ],
                "tactic_res": [
                    "c2_H : lts P l Q",
                    "c2_Heql : eq l (send_label c1 c2)",
                    "c2_l : label"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c2_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c1 c2 R) S))\n        (congruent Q (compose R S))))",
                    "c2_H : lts P (send_label c1 c2) Q"
                ],
                "tactic_res": [
                    "c3_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (compose P Q) (compose (output c1 c2 R) S))\n        (congruent (compose P' Q) (compose R S))))",
                    "c3_IHlts : forall _ : eq l (send_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c1 c2 R) S))\n        (congruent P' (compose R S))))",
                    "c3_H : lts P l P'",
                    "c3_P' : process",
                    "c4_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (compose P Q) (compose (output c1 c2 R) S))\n        (congruent (compose P Q') (compose R S))))",
                    "c4_IHlts : forall _ : eq l (send_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent Q (compose (output c1 c2 R) S))\n        (congruent Q' (compose R S))))",
                    "c4_H : lts Q l Q'",
                    "c4_Q' : process",
                    "c5_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (input c P) (compose (output c1 c2 R) S))\n        (congruent (open n P) (compose R S))))",
                    "c5_Heql : eq (recv_label c n) (send_label c1 c2)",
                    "c5_n : channel",
                    "c5_c : channel",
                    "c6_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (output c c' P) (compose (output c1 c2 R) S))\n        (congruent P (compose R S))))",
                    "c6_Heql : eq (send_label c c') (send_label c1 c2)",
                    "c6_c' : channel",
                    "c6_c : channel",
                    "c7_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (compose P Q) (compose (output c1 c2 R) S))\n        (congruent (compose P' Q') (compose R S))))",
                    "c7_IHlts2 : forall _ : eq (recv_label c n) (send_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent Q (compose (output c1 c2 R) S))\n        (congruent Q' (compose R S))))",
                    "c7_IHlts1 : forall _ : eq (send_label c n) (send_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c1 c2 R) S))\n        (congruent P' (compose R S))))",
                    "c7_H0 : lts Q (recv_label c n) Q'",
                    "c7_H : lts P (send_label c n) P'",
                    "c7_n : channel",
                    "c7_c : channel",
                    "c7_Q' : process",
                    "c7_P' : process",
                    "c7_Heql : eq tau_label (send_label c1 c2)",
                    "c8_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (compose P Q) (compose (output c1 c2 R) S))\n        (congruent (compose P' Q') (compose R S))))",
                    "c8_IHlts2 : forall _ : eq (send_label c n) (send_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent Q (compose (output c1 c2 R) S))\n        (congruent Q' (compose R S))))",
                    "c8_IHlts1 : forall _ : eq (recv_label c n) (send_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c1 c2 R) S))\n        (congruent P' (compose R S))))",
                    "c8_H0 : lts Q (send_label c n) Q'",
                    "c8_H : lts P (recv_label c n) P'",
                    "c8_n : channel",
                    "c8_c : channel",
                    "c8_Q' : process",
                    "c8_P' : process",
                    "c8_Heql : eq tau_label (send_label c1 c2)",
                    "c9_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (replicate P) (compose (output c1 c2 R) S))\n        (congruent (compose P' (replicate P)) (compose R S))))",
                    "c9_IHlts : forall _ : eq a (send_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c1 c2 R) S))\n        (congruent P' (compose R S))))",
                    "c9_H : lts P a P'",
                    "c9_P' : process",
                    "c9_Heql : eq a (send_label c1 c2)",
                    "c9_a : label",
                    "c10_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (replicate P) (compose (output c1 c2 R) S))\n        (congruent (compose (compose P' P'') (replicate P))\n           (compose R S))))",
                    "c10_IHlts2 : forall _ : eq (recv_label c n) (send_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c1 c2 R) S))\n        (congruent P'' (compose R S))))",
                    "c10_IHlts1 : forall _ : eq (send_label c n) (send_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c1 c2 R) S))\n        (congruent P' (compose R S))))",
                    "c10_H0 : lts P (recv_label c n) P''",
                    "c10_H : lts P (send_label c n) P'",
                    "c10_P'' : process",
                    "c10_P' : process",
                    "c10_n : channel",
                    "c10_c : channel",
                    "c10_Heql : eq tau_label (send_label c1 c2)"
                ]
            },
            {
                "tactic_sig": "try ( inversion _i ; subst ) .",
                "tactic_sig_no_out_arg": "try ( inversion _i ; subst ) .",
                "tactic_args": [
                    "c2_Heql : eq l (send_label c1 c2)"
                ],
                "tactic_res": [
                    "c3_H : lts P (send_label c1 c2) P'",
                    "c3_IHlts : forall _ : eq (send_label c1 c2) (send_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c1 c2 R) S))\n        (congruent P' (compose R S))))",
                    "c3_H0 : eq (send_label c1 c2) (send_label c1 c2)"
                ]
            },
            {
                "tactic_sig": "try ( inversion _i ; subst ) .",
                "tactic_sig_no_out_arg": "try ( inversion _i ; subst ) .",
                "tactic_args": [
                    "c2_Heql : eq l (send_label c1 c2)"
                ],
                "tactic_res": [
                    "c4_H : lts Q (send_label c1 c2) Q'",
                    "c4_IHlts : forall _ : eq (send_label c1 c2) (send_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent Q (compose (output c1 c2 R) S))\n        (congruent Q' (compose R S))))",
                    "c4_H0 : eq (send_label c1 c2) (send_label c1 c2)"
                ]
            },
            {
                "tactic_sig": "try ( inversion _i ; subst ) .",
                "tactic_sig_no_out_arg": "try ( inversion _i ; subst ) .",
                "tactic_args": [
                    "c5_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (input c P) (compose (output c1 c2 R) S))\n        (congruent (open n P) (compose R S))))",
                    "c2_Heql : eq l (send_label c1 c2)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try ( inversion _i ; subst ) .",
                "tactic_sig_no_out_arg": "try ( inversion _i ; subst ) .",
                "tactic_args": [
                    "c6_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (output c c' P) (compose (output c1 c2 R) S))\n        (congruent P (compose R S))))",
                    "c2_Heql : eq l (send_label c1 c2)"
                ],
                "tactic_res": [
                    "c11_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (output c1 c2 P) (compose (output c1 c2 R) S))\n        (congruent P (compose R S))))",
                    "c11_Heql : eq (send_label c1 c2) (send_label c1 c2)"
                ]
            },
            {
                "tactic_sig": "try ( inversion _i ; subst ) .",
                "tactic_sig_no_out_arg": "try ( inversion _i ; subst ) .",
                "tactic_args": [
                    "c7_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (compose P Q) (compose (output c1 c2 R) S))\n        (congruent (compose P' Q') (compose R S))))",
                    "c2_Heql : eq l (send_label c1 c2)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try ( inversion _i ; subst ) .",
                "tactic_sig_no_out_arg": "try ( inversion _i ; subst ) .",
                "tactic_args": [
                    "c8_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (compose P Q) (compose (output c1 c2 R) S))\n        (congruent (compose P' Q') (compose R S))))",
                    "c2_Heql : eq l (send_label c1 c2)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try ( inversion _i ; subst ) .",
                "tactic_sig_no_out_arg": "try ( inversion _i ; subst ) .",
                "tactic_args": [
                    "c2_Heql : eq l (send_label c1 c2)"
                ],
                "tactic_res": [
                    "c9_H : lts P (send_label c1 c2) P'",
                    "c9_IHlts : forall _ : eq (send_label c1 c2) (send_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c1 c2 R) S))\n        (congruent P' (compose R S))))",
                    "c9_H0 : eq (send_label c1 c2) (send_label c1 c2)"
                ]
            },
            {
                "tactic_sig": "try ( inversion _i ; subst ) .",
                "tactic_sig_no_out_arg": "try ( inversion _i ; subst ) .",
                "tactic_args": [
                    "c10_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (replicate P) (compose (output c1 c2 R) S))\n        (congruent (compose (compose P' P'') (replicate P))\n           (compose R S))))",
                    "c2_Heql : eq l (send_label c1 c2)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i in _i .",
                "tactic_sig_no_out_arg": "apply _i in _i .",
                "tactic_args": [
                    "c3_IHlts : forall _ : eq l (send_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c1 c2 R) S))\n        (congruent P' (compose R S))))",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c3_H0 : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c1 c2 R) S))\n        (congruent P' (compose R S))))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ R ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ R ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c3_H0 : ex\n  (fun S : process =>\n   and (congruent P (compose (output c1 c2 R) S))\n     (congruent P' (compose R S)))",
                    "c3_R : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ S ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ S ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c3_H0 : and (congruent P (compose (output c1 c2 R) S))\n  (congruent P' (compose R S))",
                    "c3_S : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c3_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (compose P Q) (compose (output c1 c2 R) S))\n        (congruent (compose P' Q) (compose R S))))",
                    "c3_R : process"
                ],
                "tactic_res": [
                    "c12_goal : ex\n  (fun S : process =>\n   and (congruent (compose P Q) (compose (output c1 c2 R) S))\n     (congruent (compose P' Q) (compose R S)))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c12_goal : ex\n  (fun S : process =>\n   and (congruent (compose P Q) (compose (output c1 c2 R) S))\n     (congruent (compose P' Q) (compose R S)))",
                    "c3_S : process",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c13_goal : and (congruent (compose P Q) (compose (output c1 c2 R) (compose S Q)))\n  (congruent (compose P' Q) (compose R (compose S Q)))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c13_goal : and (congruent (compose P Q) (compose (output c1 c2 R) (compose S Q)))\n  (congruent (compose P' Q) (compose R (compose S Q)))"
                ],
                "tactic_res": [
                    "c14_goal : congruent (compose P Q) (compose (output c1 c2 R) (compose S Q))",
                    "c15_goal : congruent (compose P' Q) (compose R (compose S Q))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c14_goal : congruent (compose P Q) (compose (output c1 c2 R) (compose S Q))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c16_goal : congruent (compose P Q) ?Q",
                    "c17_goal : congruent ?Q (compose (output c1 c2 R) (compose S Q))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c16_goal : congruent (compose P Q) ?Q",
                    "c2_P : process",
                    "c2_Q : process",
                    "c2_Q : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c18_goal : eq (compose P Q) (fill (c_compose_l c_hole Q) P)",
                    "c19_goal : congruent (compose P Q) ?Q",
                    "c19_H1 : eq (compose P Q) (fill (c_compose_l c_hole Q) P)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c18_goal : eq (compose P Q) (fill (c_compose_l c_hole Q) P)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c19_goal : congruent (compose P Q) ?Q",
                    "c19_H1 : eq (compose P Q) (fill (c_compose_l c_hole Q) P)"
                ],
                "tactic_res": [
                    "c20_goal : congruent (fill (c_compose_l c_hole Q) P) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c20_goal : congruent (fill (c_compose_l c_hole Q) P) ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c21_goal : congruent P ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c21_goal : congruent P ?Q",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c17_goal : congruent (fill (c_compose_l c_hole Q) (compose (output c1 c2 R) S))\n  (compose (output c1 c2 R) (compose S Q))"
                ],
                "tactic_res": [
                    "c22_goal : congruent (compose (compose (output c1 c2 R) S) Q)\n  (compose (output c1 c2 R) (compose S Q))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c22_goal : congruent (compose (compose (output c1 c2 R) S) Q)\n  (compose (output c1 c2 R) (compose S Q))",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c23_goal : congruent (compose (output c1 c2 R) (compose S Q))\n  (compose (compose (output c1 c2 R) S) Q)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c23_goal : congruent (compose (output c1 c2 R) (compose S Q))\n  (compose (compose (output c1 c2 R) S) Q)",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c15_goal : congruent (compose P' Q) (compose R (compose S Q))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c24_goal : congruent (compose P' Q) ?Q",
                    "c25_goal : congruent ?Q (compose R (compose S Q))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c24_goal : congruent (compose P' Q) ?Q",
                    "c3_P' : process",
                    "c2_Q : process",
                    "c2_Q : process",
                    "c3_P' : process"
                ],
                "tactic_res": [
                    "c26_goal : eq (compose P' Q) (fill (c_compose_l c_hole Q) P')",
                    "c27_goal : congruent (compose P' Q) ?Q",
                    "c27_H1 : eq (compose P' Q) (fill (c_compose_l c_hole Q) P')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c26_goal : eq (compose P' Q) (fill (c_compose_l c_hole Q) P')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c27_goal : congruent (compose P' Q) ?Q",
                    "c27_H1 : eq (compose P' Q) (fill (c_compose_l c_hole Q) P')"
                ],
                "tactic_res": [
                    "c28_goal : congruent (fill (c_compose_l c_hole Q) P') ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c28_goal : congruent (fill (c_compose_l c_hole Q) P') ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c29_goal : congruent P' ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c29_goal : congruent P' ?Q",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c25_goal : congruent (fill (c_compose_l c_hole Q) (compose R S))\n  (compose R (compose S Q))"
                ],
                "tactic_res": [
                    "c30_goal : congruent (compose (compose R S) Q) (compose R (compose S Q))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c30_goal : congruent (compose (compose R S) Q) (compose R (compose S Q))",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c31_goal : congruent (compose R (compose S Q)) (compose (compose R S) Q)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c31_goal : congruent (compose R (compose S Q)) (compose (compose R S) Q)",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i in _i .",
                "tactic_sig_no_out_arg": "apply _i in _i .",
                "tactic_args": [
                    "c3_IHlts : forall _ : eq l (send_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c1 c2 R) S))\n        (congruent P' (compose R S))))",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c4_H0 : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent Q (compose (output c1 c2 R) S))\n        (congruent Q' (compose R S))))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ R ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ R ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c4_H0 : ex\n  (fun S : process =>\n   and (congruent Q (compose (output c1 c2 R) S))\n     (congruent Q' (compose R S)))",
                    "c4_R : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ S ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ S ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c4_H0 : and (congruent Q (compose (output c1 c2 R) S))\n  (congruent Q' (compose R S))",
                    "c4_S : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c4_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (compose P Q) (compose (output c1 c2 R) S))\n        (congruent (compose P Q') (compose R S))))",
                    "c3_R : process"
                ],
                "tactic_res": [
                    "c32_goal : ex\n  (fun S : process =>\n   and (congruent (compose P Q) (compose (output c1 c2 R) S))\n     (congruent (compose P Q') (compose R S)))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c32_goal : ex\n  (fun S : process =>\n   and (congruent (compose P Q) (compose (output c1 c2 R) S))\n     (congruent (compose P Q') (compose R S)))",
                    "c2_P : process",
                    "c3_S : process"
                ],
                "tactic_res": [
                    "c33_goal : and (congruent (compose P Q) (compose (output c1 c2 R) (compose P S)))\n  (congruent (compose P Q') (compose R (compose P S)))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c33_goal : and (congruent (compose P Q) (compose (output c1 c2 R) (compose P S)))\n  (congruent (compose P Q') (compose R (compose P S)))"
                ],
                "tactic_res": [
                    "c34_goal : congruent (compose P Q) (compose (output c1 c2 R) (compose P S))",
                    "c35_goal : congruent (compose P Q') (compose R (compose P S))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c34_goal : congruent (compose P Q) (compose (output c1 c2 R) (compose P S))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c36_goal : congruent (compose P Q) ?Q",
                    "c37_goal : congruent ?Q (compose (output c1 c2 R) (compose P S))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_r _i c_hole ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_r _i c_hole ) _i ) .",
                "tactic_args": [
                    "c36_goal : congruent (compose P Q) ?Q",
                    "c2_P : process",
                    "c2_Q : process",
                    "c2_P : process",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c38_goal : eq (compose P Q) (fill (c_compose_r P c_hole) Q)",
                    "c39_goal : congruent (compose P Q) ?Q",
                    "c39_H1 : eq (compose P Q) (fill (c_compose_r P c_hole) Q)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c38_goal : eq (compose P Q) (fill (c_compose_r P c_hole) Q)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c39_goal : congruent (compose P Q) ?Q",
                    "c39_H1 : eq (compose P Q) (fill (c_compose_r P c_hole) Q)"
                ],
                "tactic_res": [
                    "c40_goal : congruent (fill (c_compose_r P c_hole) Q) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c40_goal : congruent (fill (c_compose_r P c_hole) Q) ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c41_goal : congruent Q ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c41_goal : congruent Q ?Q",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c37_goal : congruent (fill (c_compose_r P c_hole) (compose (output c1 c2 R) S))\n  (compose (output c1 c2 R) (compose P S))"
                ],
                "tactic_res": [
                    "c42_goal : congruent (compose P (compose (output c1 c2 R) S))\n  (compose (output c1 c2 R) (compose P S))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c42_goal : congruent (compose P (compose (output c1 c2 R) S))\n  (compose (output c1 c2 R) (compose P S))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c43_goal : congruent (compose P (compose (output c1 c2 R) S)) ?Q",
                    "c44_goal : congruent ?Q (compose (output c1 c2 R) (compose P S))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c43_goal : congruent (compose P (compose (output c1 c2 R) S)) ?Q",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c44_goal : congruent (compose (compose P (output c1 c2 R)) S)\n  (compose (output c1 c2 R) (compose P S))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c45_goal : congruent (compose (compose P (output c1 c2 R)) S) ?Q",
                    "c46_goal : congruent ?Q (compose (output c1 c2 R) (compose P S))"
                ]
            },
            {
                "tactic_sig": "assert ( compose ( compose _i ( output _i _i _i ) ) _i = fill ( c_compose_l c_hole _i ) ( compose _i ( output _i _i _i ) ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose ( compose _i ( output _i _i _i ) ) _i = fill ( c_compose_l c_hole _i ) ( compose _i ( output _i _i _i ) ) ) .",
                "tactic_args": [
                    "c45_goal : congruent (compose (compose P (output c1 c2 R)) S) ?Q",
                    "c2_P : process",
                    "c2_c1 : channel",
                    "c2_c2 : channel",
                    "c3_R : process",
                    "c3_S : process",
                    "c3_S : process",
                    "c2_P : process",
                    "c2_c1 : channel",
                    "c2_c2 : channel",
                    "c3_R : process"
                ],
                "tactic_res": [
                    "c47_goal : eq (compose (compose P (output c1 c2 R)) S)\n  (fill (c_compose_l c_hole S) (compose P (output c1 c2 R)))",
                    "c48_goal : congruent (compose (compose P (output c1 c2 R)) S) ?Q",
                    "c48_H1 : eq (compose (compose P (output c1 c2 R)) S)\n  (fill (c_compose_l c_hole S) (compose P (output c1 c2 R)))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c47_goal : eq (compose (compose P (output c1 c2 R)) S)\n  (fill (c_compose_l c_hole S) (compose P (output c1 c2 R)))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c48_goal : congruent (compose (compose P (output c1 c2 R)) S) ?Q",
                    "c48_H1 : eq (compose (compose P (output c1 c2 R)) S)\n  (fill (c_compose_l c_hole S) (compose P (output c1 c2 R)))"
                ],
                "tactic_res": [
                    "c49_goal : congruent (fill (c_compose_l c_hole S) (compose P (output c1 c2 R))) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c49_goal : congruent (fill (c_compose_l c_hole S) (compose P (output c1 c2 R))) ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c50_goal : congruent (compose P (output c1 c2 R)) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c50_goal : congruent (compose P (output c1 c2 R)) ?Q",
                    "_global_cong_compose_comm : forall P1 P2 : process, congruent (compose P1 P2) (compose P2 P1)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c46_goal : congruent (fill (c_compose_l c_hole S) (compose (output c1 c2 R) P))\n  (compose (output c1 c2 R) (compose P S))"
                ],
                "tactic_res": [
                    "c51_goal : congruent (compose (compose (output c1 c2 R) P) S)\n  (compose (output c1 c2 R) (compose P S))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c51_goal : congruent (compose (compose (output c1 c2 R) P) S)\n  (compose (output c1 c2 R) (compose P S))",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c52_goal : congruent (compose (output c1 c2 R) (compose P S))\n  (compose (compose (output c1 c2 R) P) S)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c52_goal : congruent (compose (output c1 c2 R) (compose P S))\n  (compose (compose (output c1 c2 R) P) S)",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c35_goal : congruent (compose P Q') (compose R (compose P S))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c53_goal : congruent (compose P Q') ?Q",
                    "c54_goal : congruent ?Q (compose R (compose P S))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_r _i c_hole ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_r _i c_hole ) _i ) .",
                "tactic_args": [
                    "c53_goal : congruent (compose P Q') ?Q",
                    "c2_P : process",
                    "c4_Q' : process",
                    "c2_P : process",
                    "c4_Q' : process"
                ],
                "tactic_res": [
                    "c55_goal : eq (compose P Q') (fill (c_compose_r P c_hole) Q')",
                    "c56_goal : congruent (compose P Q') ?Q",
                    "c56_H1 : eq (compose P Q') (fill (c_compose_r P c_hole) Q')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c55_goal : eq (compose P Q') (fill (c_compose_r P c_hole) Q')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c56_goal : congruent (compose P Q') ?Q",
                    "c56_H1 : eq (compose P Q') (fill (c_compose_r P c_hole) Q')"
                ],
                "tactic_res": [
                    "c57_goal : congruent (fill (c_compose_r P c_hole) Q') ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c57_goal : congruent (fill (c_compose_r P c_hole) Q') ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c58_goal : congruent Q' ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c58_goal : congruent Q' ?Q",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c54_goal : congruent (fill (c_compose_r P c_hole) (compose R S))\n  (compose R (compose P S))"
                ],
                "tactic_res": [
                    "c59_goal : congruent (compose P (compose R S)) (compose R (compose P S))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c59_goal : congruent (compose P (compose R S)) (compose R (compose P S))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c60_goal : congruent (compose P (compose R S)) ?Q",
                    "c61_goal : congruent ?Q (compose R (compose P S))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c60_goal : congruent (compose P (compose R S)) ?Q",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c61_goal : congruent (compose (compose P R) S) (compose R (compose P S))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c62_goal : congruent (compose (compose P R) S) ?Q",
                    "c63_goal : congruent ?Q (compose R (compose P S))"
                ]
            },
            {
                "tactic_sig": "assert ( compose ( compose _i _i ) _i = fill ( c_compose_l c_hole _i ) ( compose _i _i ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose ( compose _i _i ) _i = fill ( c_compose_l c_hole _i ) ( compose _i _i ) ) .",
                "tactic_args": [
                    "c62_goal : congruent (compose (compose P R) S) ?Q",
                    "c2_P : process",
                    "c3_R : process",
                    "c3_S : process",
                    "c3_S : process",
                    "c2_P : process",
                    "c3_R : process"
                ],
                "tactic_res": [
                    "c64_goal : eq (compose (compose P R) S)\n  (fill (c_compose_l c_hole S) (compose P R))",
                    "c65_goal : congruent (compose (compose P R) S) ?Q",
                    "c65_H1 : eq (compose (compose P R) S)\n  (fill (c_compose_l c_hole S) (compose P R))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c64_goal : eq (compose (compose P R) S)\n  (fill (c_compose_l c_hole S) (compose P R))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c65_goal : congruent (compose (compose P R) S) ?Q",
                    "c65_H1 : eq (compose (compose P R) S)\n  (fill (c_compose_l c_hole S) (compose P R))"
                ],
                "tactic_res": [
                    "c66_goal : congruent (fill (c_compose_l c_hole S) (compose P R)) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c66_goal : congruent (fill (c_compose_l c_hole S) (compose P R)) ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c67_goal : congruent (compose P R) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c67_goal : congruent (compose P R) ?Q",
                    "_global_cong_compose_comm : forall P1 P2 : process, congruent (compose P1 P2) (compose P2 P1)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c63_goal : congruent (fill (c_compose_l c_hole S) (compose R P))\n  (compose R (compose P S))"
                ],
                "tactic_res": [
                    "c68_goal : congruent (compose (compose R P) S) (compose R (compose P S))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c68_goal : congruent (compose (compose R P) S) (compose R (compose P S))",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c69_goal : congruent (compose R (compose P S)) (compose (compose R P) S)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c69_goal : congruent (compose R (compose P S)) (compose (compose R P) S)",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c11_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (output c1 c2 P) (compose (output c1 c2 R) S))\n        (congruent P (compose R S))))",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c70_goal : ex\n  (fun S : process =>\n   and (congruent (output c1 c2 P) (compose (output c1 c2 P) S))\n     (congruent P (compose P S)))"
                ]
            },
            {
                "tactic_sig": "exists stop .",
                "tactic_sig_no_out_arg": "exists stop .",
                "tactic_args": [
                    "c70_goal : ex\n  (fun S : process =>\n   and (congruent (output c1 c2 P) (compose (output c1 c2 P) S))\n     (congruent P (compose P S)))"
                ],
                "tactic_res": [
                    "c71_goal : and (congruent (output c1 c2 P) (compose (output c1 c2 P) stop))\n  (congruent P (compose P stop))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c71_goal : and (congruent (output c1 c2 P) (compose (output c1 c2 P) stop))\n  (congruent P (compose P stop))"
                ],
                "tactic_res": [
                    "c72_goal : congruent (output c1 c2 P) (compose (output c1 c2 P) stop)",
                    "c73_goal : congruent P (compose P stop)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c72_goal : congruent (output c1 c2 P) (compose (output c1 c2 P) stop)",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c74_goal : congruent (compose (output c1 c2 P) stop) (output c1 c2 P)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c74_goal : congruent (compose (output c1 c2 P) stop) (output c1 c2 P)",
                    "_global_cong_zero : forall P : process, congruent (compose P stop) P"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c73_goal : congruent P (compose P stop)",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c75_goal : congruent (compose P stop) P"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c75_goal : congruent (compose P stop) P",
                    "_global_cong_zero : forall P : process, congruent (compose P stop) P"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c3_IHlts : forall _ : eq l (send_label c1 c2),\nex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c1 c2 R) S))\n        (congruent P' (compose R S))))",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c9_H0 : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c1 c2 R) S))\n        (congruent P' (compose R S))))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ R ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ R ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c9_H0 : ex\n  (fun S : process =>\n   and (congruent P (compose (output c1 c2 R) S))\n     (congruent P' (compose R S)))",
                    "c9_R : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ S ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ S ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c9_H0 : and (congruent P (compose (output c1 c2 R) S))\n  (congruent P' (compose R S))",
                    "c9_S : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c9_goal : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent (replicate P) (compose (output c1 c2 R) S))\n        (congruent (compose P' (replicate P)) (compose R S))))",
                    "c3_R : process"
                ],
                "tactic_res": [
                    "c76_goal : ex\n  (fun S : process =>\n   and (congruent (replicate P) (compose (output c1 c2 R) S))\n     (congruent (compose P' (replicate P)) (compose R S)))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i ( replicate _i ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i ( replicate _i ) ) .",
                "tactic_args": [
                    "c76_goal : ex\n  (fun S : process =>\n   and (congruent (replicate P) (compose (output c1 c2 R) S))\n     (congruent (compose P' (replicate P)) (compose R S)))",
                    "c3_S : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c77_goal : and\n  (congruent (replicate P)\n     (compose (output c1 c2 R) (compose S (replicate P))))\n  (congruent (compose P' (replicate P))\n     (compose R (compose S (replicate P))))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c77_goal : and\n  (congruent (replicate P)\n     (compose (output c1 c2 R) (compose S (replicate P))))\n  (congruent (compose P' (replicate P))\n     (compose R (compose S (replicate P))))"
                ],
                "tactic_res": [
                    "c78_goal : congruent (replicate P)\n  (compose (output c1 c2 R) (compose S (replicate P)))",
                    "c79_goal : congruent (compose P' (replicate P))\n  (compose R (compose S (replicate P)))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c78_goal : congruent (replicate P)\n  (compose (output c1 c2 R) (compose S (replicate P)))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c80_goal : congruent (replicate P) ?Q",
                    "c81_goal : congruent ?Q (compose (output c1 c2 R) (compose S (replicate P)))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c80_goal : congruent (replicate P) ?Q",
                    "_global_cong_replicate : forall P : process, congruent (replicate P) (compose P (replicate P))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c81_goal : congruent (compose P (replicate P))\n  (compose (output c1 c2 R) (compose S (replicate P)))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c82_goal : congruent (compose P (replicate P)) ?Q",
                    "c83_goal : congruent ?Q (compose (output c1 c2 R) (compose S (replicate P)))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i ( replicate _i ) = fill ( c_compose_l c_hole ( replicate _i ) ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i ( replicate _i ) = fill ( c_compose_l c_hole ( replicate _i ) ) _i ) .",
                "tactic_args": [
                    "c82_goal : congruent (compose P (replicate P)) ?Q",
                    "c2_P : process",
                    "c2_P : process",
                    "c2_P : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c84_goal : eq (compose P (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P)",
                    "c85_goal : congruent (compose P (replicate P)) ?Q",
                    "c85_H1 : eq (compose P (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c84_goal : eq (compose P (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c85_goal : congruent (compose P (replicate P)) ?Q",
                    "c85_H1 : eq (compose P (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P)"
                ],
                "tactic_res": [
                    "c86_goal : congruent (fill (c_compose_l c_hole (replicate P)) P) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c86_goal : congruent (fill (c_compose_l c_hole (replicate P)) P) ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c87_goal : congruent P ?Q"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c87_goal : congruent P ?Q",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c83_goal : congruent\n  (fill (c_compose_l c_hole (replicate P)) (compose (output c1 c2 R) S))\n  (compose (output c1 c2 R) (compose S (replicate P)))"
                ],
                "tactic_res": [
                    "c88_goal : congruent (compose (compose (output c1 c2 R) S) (replicate P))\n  (compose (output c1 c2 R) (compose S (replicate P)))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c88_goal : congruent (compose (compose (output c1 c2 R) S) (replicate P))\n  (compose (output c1 c2 R) (compose S (replicate P)))",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c89_goal : congruent (compose (output c1 c2 R) (compose S (replicate P)))\n  (compose (compose (output c1 c2 R) S) (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c89_goal : congruent (compose (output c1 c2 R) (compose S (replicate P)))\n  (compose (compose (output c1 c2 R) S) (replicate P))",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c79_goal : congruent (compose P' (replicate P))\n  (compose R (compose S (replicate P)))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c90_goal : congruent (compose P' (replicate P)) ?Q",
                    "c91_goal : congruent ?Q (compose R (compose S (replicate P)))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i ( replicate _i ) = fill ( c_compose_l c_hole ( replicate _i ) ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i ( replicate _i ) = fill ( c_compose_l c_hole ( replicate _i ) ) _i ) .",
                "tactic_args": [
                    "c90_goal : congruent (compose P' (replicate P)) ?Q",
                    "c3_P' : process",
                    "c2_P : process",
                    "c2_P : process",
                    "c3_P' : process"
                ],
                "tactic_res": [
                    "c92_goal : eq (compose P' (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P')",
                    "c93_goal : congruent (compose P' (replicate P)) ?Q",
                    "c93_H1 : eq (compose P' (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c92_goal : eq (compose P' (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c93_goal : congruent (compose P' (replicate P)) ?Q",
                    "c93_H1 : eq (compose P' (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P')"
                ],
                "tactic_res": [
                    "c94_goal : congruent (fill (c_compose_l c_hole (replicate P)) P') ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c94_goal : congruent (fill (c_compose_l c_hole (replicate P)) P') ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c95_goal : congruent P' ?Q"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c95_goal : congruent P' ?Q",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c91_goal : congruent (fill (c_compose_l c_hole (replicate P)) (compose R S))\n  (compose R (compose S (replicate P)))"
                ],
                "tactic_res": [
                    "c96_goal : congruent (compose (compose R S) (replicate P))\n  (compose R (compose S (replicate P)))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c96_goal : congruent (compose (compose R S) (replicate P))\n  (compose R (compose S (replicate P)))",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c97_goal : congruent (compose R (compose S (replicate P)))\n  (compose (compose R S) (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c97_goal : congruent (compose R (compose S (replicate P)))\n  (compose (compose R S) (replicate P))",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "lts_tau_step",
        "proof": [
            {
                "tactic_sig": "Theorem lts_tau_step : forall P Q , step_process P Q -> lts_cong P tau_label Q .",
                "tactic_sig_no_out_arg": "Theorem lts_tau_step : forall P Q , step_process P Q -> lts_cong P tau_label Q .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (P Q : process) (_ : step_process P Q), lts_cong P tau_label Q"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (P Q : process) (_ : step_process P Q), lts_cong P tau_label Q"
                ],
                "tactic_res": [
                    "c2_goal : lts_cong P tau_label Q",
                    "c2_P : process",
                    "c2_Q : process",
                    "c2_H : step_process P Q"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ P' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P' ] .",
                "tactic_args": [
                    "c2_H : step_process P Q"
                ],
                "tactic_res": [
                    "c2_H : ex\n  (fun Q' : process =>\n   and (congruent P P')\n     (and (congruent Q Q') (step_process_base P' Q')))",
                    "c2_P' : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q' ] .",
                "tactic_args": [
                    "c2_H : step_process P Q"
                ],
                "tactic_res": [
                    "c2_H : and (congruent P P') (and (congruent Q Q') (step_process_base P' Q'))",
                    "c2_Q' : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ CPP' _i ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ CPP' _i ] .",
                "tactic_args": [
                    "c2_H : step_process P Q",
                    "c2_H : step_process P Q"
                ],
                "tactic_res": [
                    "c2_H : and (congruent Q Q') (step_process_base P' Q')",
                    "c2_CPP' : congruent P P'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ CQQ' S ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ CQQ' S ] .",
                "tactic_args": [
                    "c2_H : step_process P Q"
                ],
                "tactic_res": [
                    "c2_S : step_process_base P' Q'",
                    "c2_CQQ' : congruent Q Q'"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c2_goal : lts_cong P tau_label Q",
                    "_global_lts_cong : forall (_ : process) (_ : label) (_ : process), Prop"
                ],
                "tactic_res": [
                    "c3_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (congruent P P') (and (congruent Q Q') (lts P' tau_label Q'))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c3_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (congruent P P') (and (congruent Q Q') (lts P' tau_label Q'))))",
                    "c2_P' : process"
                ],
                "tactic_res": [
                    "c4_goal : ex\n  (fun Q' : process =>\n   and (congruent P P') (and (congruent Q Q') (lts P' tau_label Q')))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c4_goal : ex\n  (fun Q' : process =>\n   and (congruent P P') (and (congruent Q Q') (lts P' tau_label Q')))",
                    "c2_Q' : process"
                ],
                "tactic_res": [
                    "c5_goal : and (congruent P P') (and (congruent Q Q') (lts P' tau_label Q'))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c5_goal : and (congruent P P') (and (congruent Q Q') (lts P' tau_label Q'))"
                ],
                "tactic_res": [
                    "c6_goal : congruent P P'",
                    "c7_goal : congruent Q Q'",
                    "c8_goal : lts P' tau_label Q'"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c6_goal : congruent P P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c7_goal : congruent Q Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "clear _i .",
                "tactic_sig_no_out_arg": "clear _i .",
                "tactic_args": [
                    "c2_CPP' : congruent P P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "clear _i .",
                "tactic_sig_no_out_arg": "clear _i .",
                "tactic_args": [
                    "c2_CQQ' : congruent Q Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c8_goal : lts P' tau_label Q'",
                    "c2_S : step_process_base P' Q'"
                ],
                "tactic_res": [
                    "c9_goal : lts (compose P1 P3) tau_label (compose P2 P3)",
                    "c9_IHS : lts P1 tau_label P2",
                    "c9_S : step_process_base P1 P2",
                    "c9_P3 : process",
                    "c9_P2 : process",
                    "c9_P1 : process",
                    "c10_goal : lts (compose (output c z Q0) (input c P0)) tau_label\n  (compose Q0 (open z P0))",
                    "c10_Q0 : process",
                    "c10_P0 : process",
                    "c10_z : channel",
                    "c10_c : channel"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c9_goal : lts (compose P1 P3) tau_label (compose P2 P3)",
                    "_global_lts_comp_left : forall (P P' Q : process) (l : label) (_ : lts P l P'),\n       lts (compose P Q) l (compose P' Q)"
                ],
                "tactic_res": [
                    "c11_goal : lts P1 tau_label P2"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c11_goal : lts P1 tau_label P2",
                    "c9_IHS : lts P1 tau_label P2"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c10_goal : lts (compose (output c z Q0) (input c P0)) tau_label\n  (compose Q0 (open z P0))",
                    "_global_lts_comm_left : forall (P P' Q Q' : process) (c n : channel)\n         (_ : lts P (send_label c n) P') (_ : lts Q (recv_label c n) Q'),\n       lts (compose P Q) tau_label (compose P' Q')"
                ],
                "tactic_res": [
                    "c12_goal : lts (output c z Q0) (send_label ?c ?n) Q0",
                    "c13_goal : lts (input c P0) (recv_label ?c ?n) (open z P0)"
                ]
            },
            {
                "tactic_sig": "constructor .",
                "tactic_sig_no_out_arg": "constructor .",
                "tactic_args": [
                    "c12_goal : lts (output c z Q0) (send_label ?c ?n) Q0"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "constructor .",
                "tactic_sig_no_out_arg": "constructor .",
                "tactic_args": [
                    "c13_goal : lts (input c P0) (recv_label c z) (open z P0)"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "tau_lts_comm_step",
        "proof": [
            {
                "tactic_sig": "Theorem tau_lts_comm_step : forall P Q P' Q' c n , lts P ( send_label c n ) P' -> lts Q ( recv_label c n ) Q' -> step_process ( compose P Q ) ( compose P' Q' ) .",
                "tactic_sig_no_out_arg": "Theorem tau_lts_comm_step : forall P Q P' Q' c n , lts P ( send_label c n ) P' -> lts Q ( recv_label c n ) Q' -> step_process ( compose P Q ) ( compose P' Q' ) .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (P Q P' Q' : process) (c n : channel)\n  (_ : lts P (send_label c n) P') (_ : lts Q (recv_label c n) Q'),\nstep_process (compose P Q) (compose P' Q')"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (P Q P' Q' : process) (c n : channel)\n  (_ : lts P (send_label c n) P') (_ : lts Q (recv_label c n) Q'),\nstep_process (compose P Q) (compose P' Q')"
                ],
                "tactic_res": [
                    "c2_goal : step_process (compose P Q) (compose P' Q')",
                    "c2_P : process",
                    "c2_Q : process",
                    "c2_P' : process",
                    "c2_Q' : process",
                    "c2_c : channel",
                    "c2_n : channel",
                    "c2_H : lts P (send_label c n) P'",
                    "c2_H0 : lts Q (recv_label c n) Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "_global_lts_input_helper : forall (P Q : process) (c1 c2 : channel)\n         (_ : lts P (recv_label c1 c2) Q),\n       ex\n         (fun R : process =>\n          ex\n            (fun S : process =>\n             and (congruent P (compose (input c1 R) S))\n               (congruent Q (compose (open c2 R) S))))",
                    "c2_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c2_H0 : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent Q (compose (input c R) S))\n        (congruent Q' (compose (open n R) S))))"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "_global_lts_output_helper : forall (P Q : process) (c1 c2 : channel)\n         (_ : lts P (send_label c1 c2) Q),\n       ex\n         (fun R : process =>\n          ex\n            (fun S : process =>\n             and (congruent P (compose (output c1 c2 R) S))\n               (congruent Q (compose R S))))",
                    "c2_H : lts P (send_label c n) P'"
                ],
                "tactic_res": [
                    "c2_H : ex\n  (fun R : process =>\n   ex\n     (fun S : process =>\n      and (congruent P (compose (output c n R) S))\n        (congruent P' (compose R S))))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ R ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ R ] .",
                "tactic_args": [
                    "c2_H : lts P (send_label c n) P'"
                ],
                "tactic_res": [
                    "c2_H : ex\n  (fun S : process =>\n   and (congruent P (compose (output c n R) S))\n     (congruent P' (compose R S)))",
                    "c2_R : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ S ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ S ] .",
                "tactic_args": [
                    "c2_H : lts P (send_label c n) P'"
                ],
                "tactic_res": [
                    "c2_H : and (congruent P (compose (output c n R) S))\n  (congruent P' (compose R S))",
                    "c2_S : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H : lts P (send_label c n) P'"
                ],
                "tactic_res": [
                    "c2_H1 : congruent P' (compose R S)",
                    "c2_H : congruent P (compose (output c n R) S)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ R' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ R' ] .",
                "tactic_args": [
                    "c2_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c2_H0 : ex\n  (fun S : process =>\n   and (congruent Q (compose (input c R') S))\n     (congruent Q' (compose (open n R') S)))",
                    "c2_R' : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ S' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ S' ] .",
                "tactic_args": [
                    "c2_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c2_H0 : and (congruent Q (compose (input c R') S'))\n  (congruent Q' (compose (open n R') S'))",
                    "c2_S' : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c2_H2 : congruent Q' (compose (open n R') S')",
                    "c2_H0 : congruent Q (compose (input c R') S')"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c2_goal : step_process (compose P Q) (compose P' Q')",
                    "_global_step_process : forall (_ : process) (_ : process), Prop"
                ],
                "tactic_res": [
                    "c3_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q'0 : process =>\n      and (congruent (compose P Q) P'0)\n        (and (congruent (compose P' Q') Q'0)\n           (step_process_base P'0 Q'0))))"
                ]
            },
            {
                "tactic_sig": "exists ( compose ( compose ( output _i _i _i ) ( input _i _i ) ) ( compose _i _i ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose ( compose ( output _i _i _i ) ( input _i _i ) ) ( compose _i _i ) ) .",
                "tactic_args": [
                    "c3_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q'0 : process =>\n      and (congruent (compose P Q) P'0)\n        (and (congruent (compose P' Q') Q'0)\n           (step_process_base P'0 Q'0))))",
                    "c2_c : channel",
                    "c2_n : channel",
                    "c2_R : process",
                    "c2_c : channel",
                    "c2_R' : process",
                    "c2_S : process",
                    "c2_S' : process"
                ],
                "tactic_res": [
                    "c4_goal : ex\n  (fun Q'0 : process =>\n   and\n     (congruent (compose P Q)\n        (compose (compose (output c n R) (input c R')) (compose S S')))\n     (and (congruent (compose P' Q') Q'0)\n        (step_process_base\n           (compose (compose (output c n R) (input c R'))\n              (compose S S')) Q'0)))"
                ]
            },
            {
                "tactic_sig": "exists ( compose ( compose _i ( open _i _i ) ) ( compose _i _i ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose ( compose _i ( open _i _i ) ) ( compose _i _i ) ) .",
                "tactic_args": [
                    "c4_goal : ex\n  (fun Q'0 : process =>\n   and\n     (congruent (compose P Q)\n        (compose (compose (output c n R) (input c R')) (compose S S')))\n     (and (congruent (compose P' Q') Q'0)\n        (step_process_base\n           (compose (compose (output c n R) (input c R'))\n              (compose S S')) Q'0)))",
                    "c2_R : process",
                    "c2_n : channel",
                    "c2_R' : process",
                    "c2_S : process",
                    "c2_S' : process"
                ],
                "tactic_res": [
                    "c5_goal : and\n  (congruent (compose P Q)\n     (compose (compose (output c n R) (input c R')) (compose S S')))\n  (and\n     (congruent (compose P' Q')\n        (compose (compose R (open n R')) (compose S S')))\n     (step_process_base\n        (compose (compose (output c n R) (input c R')) (compose S S'))\n        (compose (compose R (open n R')) (compose S S'))))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c5_goal : and\n  (congruent (compose P Q)\n     (compose (compose (output c n R) (input c R')) (compose S S')))\n  (and\n     (congruent (compose P' Q')\n        (compose (compose R (open n R')) (compose S S')))\n     (step_process_base\n        (compose (compose (output c n R) (input c R')) (compose S S'))\n        (compose (compose R (open n R')) (compose S S'))))"
                ],
                "tactic_res": [
                    "c6_goal : congruent (compose P Q)\n  (compose (compose (output c n R) (input c R')) (compose S S'))",
                    "c7_goal : congruent (compose P' Q')\n  (compose (compose R (open n R')) (compose S S'))",
                    "c8_goal : step_process_base\n  (compose (compose (output c n R) (input c R')) (compose S S'))\n  (compose (compose R (open n R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c6_goal : congruent (compose P Q)\n  (compose (compose (output c n R) (input c R')) (compose S S'))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c9_goal : congruent (compose P Q) ?Q",
                    "c10_goal : congruent ?Q\n  (compose (compose (output c n R) (input c R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c9_goal : congruent (compose P Q) ?Q",
                    "c2_P : process",
                    "c2_Q : process",
                    "c2_Q : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c11_goal : eq (compose P Q) (fill (c_compose_l c_hole Q) P)",
                    "c12_goal : congruent (compose P Q) ?Q",
                    "c12_H3 : eq (compose P Q) (fill (c_compose_l c_hole Q) P)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c11_goal : eq (compose P Q) (fill (c_compose_l c_hole Q) P)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c12_goal : congruent (compose P Q) ?Q",
                    "c12_H3 : eq (compose P Q) (fill (c_compose_l c_hole Q) P)"
                ],
                "tactic_res": [
                    "c13_goal : congruent (fill (c_compose_l c_hole Q) P) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c13_goal : congruent (fill (c_compose_l c_hole Q) P) ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c14_goal : congruent P ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c14_goal : congruent P ?Q",
                    "c2_H : lts P (send_label c n) P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c10_goal : congruent (fill (c_compose_l c_hole Q) (compose (output c n R) S))\n  (compose (compose (output c n R) (input c R')) (compose S S'))"
                ],
                "tactic_res": [
                    "c15_goal : congruent (compose (compose (output c n R) S) Q)\n  (compose (compose (output c n R) (input c R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c15_goal : congruent (compose (compose (output c n R) S) Q)\n  (compose (compose (output c n R) (input c R')) (compose S S'))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c16_goal : congruent (compose (compose (output c n R) S) Q) ?Q",
                    "c17_goal : congruent ?Q\n  (compose (compose (output c n R) (input c R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "assert ( compose ( compose ( output _i _i _i ) _i ) _i = fill ( c_compose_r ( compose ( output _i _i _i ) _i ) c_hole ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose ( compose ( output _i _i _i ) _i ) _i = fill ( c_compose_r ( compose ( output _i _i _i ) _i ) c_hole ) _i ) .",
                "tactic_args": [
                    "c16_goal : congruent (compose (compose (output c n R) S) Q) ?Q",
                    "c2_c : channel",
                    "c2_n : channel",
                    "c2_R : process",
                    "c2_S : process",
                    "c2_Q : process",
                    "c2_c : channel",
                    "c2_n : channel",
                    "c2_R : process",
                    "c2_S : process",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c18_goal : eq (compose (compose (output c n R) S) Q)\n  (fill (c_compose_r (compose (output c n R) S) c_hole) Q)",
                    "c19_goal : congruent (compose (compose (output c n R) S) Q) ?Q",
                    "c19_H3 : eq (compose (compose (output c n R) S) Q)\n  (fill (c_compose_r (compose (output c n R) S) c_hole) Q)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c18_goal : eq (compose (compose (output c n R) S) Q)\n  (fill (c_compose_r (compose (output c n R) S) c_hole) Q)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c19_goal : congruent (compose (compose (output c n R) S) Q) ?Q",
                    "c19_H3 : eq (compose (compose (output c n R) S) Q)\n  (fill (c_compose_r (compose (output c n R) S) c_hole) Q)"
                ],
                "tactic_res": [
                    "c20_goal : congruent (fill (c_compose_r (compose (output c n R) S) c_hole) Q) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c20_goal : congruent (fill (c_compose_r (compose (output c n R) S) c_hole) Q) ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c21_goal : congruent Q ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c21_goal : congruent Q ?Q",
                    "c2_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c17_goal : congruent\n  (fill (c_compose_r (compose (output c n R) S) c_hole)\n     (compose (input c R') S'))\n  (compose (compose (output c n R) (input c R')) (compose S S'))"
                ],
                "tactic_res": [
                    "c22_goal : congruent\n  (compose (compose (output c n R) S) (compose (input c R') S'))\n  (compose (compose (output c n R) (input c R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c22_goal : congruent\n  (compose (compose (output c n R) S) (compose (input c R') S'))\n  (compose (compose (output c n R) (input c R')) (compose S S'))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c23_goal : congruent\n  (compose (compose (output c n R) S) (compose (input c R') S')) \n  ?Q",
                    "c24_goal : congruent ?Q\n  (compose (compose (output c n R) (input c R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c23_goal : congruent\n  (compose (compose (output c n R) S) (compose (input c R') S')) \n  ?Q",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c25_goal : congruent ?Q\n  (compose (compose (output c n R) S) (compose (input c R') S'))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c25_goal : congruent ?Q\n  (compose (compose (output c n R) S) (compose (input c R') S'))",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c24_goal : congruent\n  (compose (output c n R) (compose S (compose (input c R') S')))\n  (compose (compose (output c n R) (input c R')) (compose S S'))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c26_goal : congruent\n  (compose (output c n R) (compose S (compose (input c R') S'))) \n  ?Q",
                    "c27_goal : congruent ?Q\n  (compose (compose (output c n R) (input c R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "assert ( compose ( output _i _i _i ) ( compose _i ( compose ( input _i _i ) _i ) ) = fill ( c_compose_r ( output _i _i _i ) c_hole ) ( compose _i ( compose ( input _i _i ) _i ) ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose ( output _i _i _i ) ( compose _i ( compose ( input _i _i ) _i ) ) = fill ( c_compose_r ( output _i _i _i ) c_hole ) ( compose _i ( compose ( input _i _i ) _i ) ) ) .",
                "tactic_args": [
                    "c26_goal : congruent\n  (compose (output c n R) (compose S (compose (input c R') S'))) \n  ?Q",
                    "c2_c : channel",
                    "c2_n : channel",
                    "c2_R : process",
                    "c2_S : process",
                    "c2_c : channel",
                    "c2_R' : process",
                    "c2_S' : process",
                    "c2_c : channel",
                    "c2_n : channel",
                    "c2_R : process",
                    "c2_S : process",
                    "c2_c : channel",
                    "c2_R' : process",
                    "c2_S' : process"
                ],
                "tactic_res": [
                    "c28_goal : eq (compose (output c n R) (compose S (compose (input c R') S')))\n  (fill (c_compose_r (output c n R) c_hole)\n     (compose S (compose (input c R') S')))",
                    "c29_goal : congruent\n  (compose (output c n R) (compose S (compose (input c R') S'))) \n  ?Q",
                    "c29_H3 : eq (compose (output c n R) (compose S (compose (input c R') S')))\n  (fill (c_compose_r (output c n R) c_hole)\n     (compose S (compose (input c R') S')))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c28_goal : eq (compose (output c n R) (compose S (compose (input c R') S')))\n  (fill (c_compose_r (output c n R) c_hole)\n     (compose S (compose (input c R') S')))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c29_goal : congruent\n  (compose (output c n R) (compose S (compose (input c R') S'))) \n  ?Q",
                    "c29_H3 : eq (compose (output c n R) (compose S (compose (input c R') S')))\n  (fill (c_compose_r (output c n R) c_hole)\n     (compose S (compose (input c R') S')))"
                ],
                "tactic_res": [
                    "c30_goal : congruent\n  (fill (c_compose_r (output c n R) c_hole)\n     (compose S (compose (input c R') S'))) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c30_goal : congruent\n  (fill (c_compose_r (output c n R) c_hole)\n     (compose S (compose (input c R') S'))) ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c31_goal : congruent (compose S (compose (input c R') S')) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c31_goal : congruent (compose S (compose (input c R') S')) ?Q",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c27_goal : congruent\n  (fill (c_compose_r (output c n R) c_hole)\n     (compose (compose S (input c R')) S'))\n  (compose (compose (output c n R) (input c R')) (compose S S'))"
                ],
                "tactic_res": [
                    "c32_goal : congruent\n  (compose (output c n R) (compose (compose S (input c R')) S'))\n  (compose (compose (output c n R) (input c R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c32_goal : congruent\n  (compose (output c n R) (compose (compose S (input c R')) S'))\n  (compose (compose (output c n R) (input c R')) (compose S S'))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c33_goal : congruent\n  (compose (output c n R) (compose (compose S (input c R')) S')) \n  ?Q",
                    "c34_goal : congruent ?Q\n  (compose (compose (output c n R) (input c R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "assert ( compose ( output _i _i _i ) ( compose ( compose _i ( input _i _i ) ) _i ) = fill ( c_compose_r ( output _i _i _i ) ( c_compose_l c_hole _i ) ) ( compose _i ( input _i _i ) ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose ( output _i _i _i ) ( compose ( compose _i ( input _i _i ) ) _i ) = fill ( c_compose_r ( output _i _i _i ) ( c_compose_l c_hole _i ) ) ( compose _i ( input _i _i ) ) ) .",
                "tactic_args": [
                    "c33_goal : congruent\n  (compose (output c n R) (compose (compose S (input c R')) S')) \n  ?Q",
                    "c2_c : channel",
                    "c2_n : channel",
                    "c2_R : process",
                    "c2_S : process",
                    "c2_c : channel",
                    "c2_R' : process",
                    "c2_S' : process",
                    "c2_c : channel",
                    "c2_n : channel",
                    "c2_R : process",
                    "c2_S' : process",
                    "c2_S : process",
                    "c2_c : channel",
                    "c2_R' : process"
                ],
                "tactic_res": [
                    "c35_goal : eq (compose (output c n R) (compose (compose S (input c R')) S'))\n  (fill (c_compose_r (output c n R) (c_compose_l c_hole S'))\n     (compose S (input c R')))",
                    "c36_goal : congruent\n  (compose (output c n R) (compose (compose S (input c R')) S')) \n  ?Q",
                    "c36_H3 : eq (compose (output c n R) (compose (compose S (input c R')) S'))\n  (fill (c_compose_r (output c n R) (c_compose_l c_hole S'))\n     (compose S (input c R')))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c35_goal : eq (compose (output c n R) (compose (compose S (input c R')) S'))\n  (fill (c_compose_r (output c n R) (c_compose_l c_hole S'))\n     (compose S (input c R')))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c36_goal : congruent\n  (compose (output c n R) (compose (compose S (input c R')) S')) \n  ?Q",
                    "c36_H3 : eq (compose (output c n R) (compose (compose S (input c R')) S'))\n  (fill (c_compose_r (output c n R) (c_compose_l c_hole S'))\n     (compose S (input c R')))"
                ],
                "tactic_res": [
                    "c37_goal : congruent\n  (fill (c_compose_r (output c n R) (c_compose_l c_hole S'))\n     (compose S (input c R'))) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c37_goal : congruent\n  (fill (c_compose_r (output c n R) (c_compose_l c_hole S'))\n     (compose S (input c R'))) ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c38_goal : congruent (compose S (input c R')) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c38_goal : congruent (compose S (input c R')) ?Q",
                    "_global_cong_compose_comm : forall P1 P2 : process, congruent (compose P1 P2) (compose P2 P1)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c34_goal : congruent\n  (fill (c_compose_r (output c n R) (c_compose_l c_hole S'))\n     (compose (input c R') S))\n  (compose (compose (output c n R) (input c R')) (compose S S'))"
                ],
                "tactic_res": [
                    "c39_goal : congruent\n  (compose (output c n R) (compose (compose (input c R') S) S'))\n  (compose (compose (output c n R) (input c R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c39_goal : congruent\n  (compose (output c n R) (compose (compose (input c R') S) S'))\n  (compose (compose (output c n R) (input c R')) (compose S S'))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c40_goal : congruent\n  (compose (output c n R) (compose (compose (input c R') S) S')) \n  ?Q",
                    "c41_goal : congruent ?Q\n  (compose (compose (output c n R) (input c R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "assert ( compose ( output _i _i _i ) ( compose ( compose ( input _i _i ) _i ) _i ) = fill ( c_compose_r ( output _i _i _i ) c_hole ) ( compose ( compose ( input _i _i ) _i ) _i ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose ( output _i _i _i ) ( compose ( compose ( input _i _i ) _i ) _i ) = fill ( c_compose_r ( output _i _i _i ) c_hole ) ( compose ( compose ( input _i _i ) _i ) _i ) ) .",
                "tactic_args": [
                    "c40_goal : congruent\n  (compose (output c n R) (compose (compose (input c R') S) S')) \n  ?Q",
                    "c2_c : channel",
                    "c2_n : channel",
                    "c2_R : process",
                    "c2_c : channel",
                    "c2_R' : process",
                    "c2_S : process",
                    "c2_S' : process",
                    "c2_c : channel",
                    "c2_n : channel",
                    "c2_R : process",
                    "c2_c : channel",
                    "c2_R' : process",
                    "c2_S : process",
                    "c2_S' : process"
                ],
                "tactic_res": [
                    "c42_goal : eq (compose (output c n R) (compose (compose (input c R') S) S'))\n  (fill (c_compose_r (output c n R) c_hole)\n     (compose (compose (input c R') S) S'))",
                    "c43_goal : congruent\n  (compose (output c n R) (compose (compose (input c R') S) S')) \n  ?Q",
                    "c43_H3 : eq (compose (output c n R) (compose (compose (input c R') S) S'))\n  (fill (c_compose_r (output c n R) c_hole)\n     (compose (compose (input c R') S) S'))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c42_goal : eq (compose (output c n R) (compose (compose (input c R') S) S'))\n  (fill (c_compose_r (output c n R) c_hole)\n     (compose (compose (input c R') S) S'))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c43_goal : congruent\n  (compose (output c n R) (compose (compose (input c R') S) S')) \n  ?Q",
                    "c43_H3 : eq (compose (output c n R) (compose (compose (input c R') S) S'))\n  (fill (c_compose_r (output c n R) c_hole)\n     (compose (compose (input c R') S) S'))"
                ],
                "tactic_res": [
                    "c44_goal : congruent\n  (fill (c_compose_r (output c n R) c_hole)\n     (compose (compose (input c R') S) S')) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c44_goal : congruent\n  (fill (c_compose_r (output c n R) c_hole)\n     (compose (compose (input c R') S) S')) ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c45_goal : congruent (compose (compose (input c R') S) S') ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c45_goal : congruent (compose (compose (input c R') S) S') ?Q",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c46_goal : congruent ?Q (compose (compose (input c R') S) S')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c46_goal : congruent ?Q (compose (compose (input c R') S) S')",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c41_goal : congruent\n  (fill (c_compose_r (output c n R) c_hole)\n     (compose (input c R') (compose S S')))\n  (compose (compose (output c n R) (input c R')) (compose S S'))"
                ],
                "tactic_res": [
                    "c47_goal : congruent\n  (compose (output c n R) (compose (input c R') (compose S S')))\n  (compose (compose (output c n R) (input c R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c47_goal : congruent\n  (compose (output c n R) (compose (input c R') (compose S S')))\n  (compose (compose (output c n R) (input c R')) (compose S S'))",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c7_goal : congruent (compose P' Q')\n  (compose (compose R (open n R')) (compose S S'))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c48_goal : congruent (compose P' Q') ?Q",
                    "c49_goal : congruent ?Q (compose (compose R (open n R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c48_goal : congruent (compose P' Q') ?Q",
                    "c2_P' : process",
                    "c2_Q' : process",
                    "c2_Q' : process",
                    "c2_P' : process"
                ],
                "tactic_res": [
                    "c50_goal : eq (compose P' Q') (fill (c_compose_l c_hole Q') P')",
                    "c51_goal : congruent (compose P' Q') ?Q",
                    "c51_H3 : eq (compose P' Q') (fill (c_compose_l c_hole Q') P')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c50_goal : eq (compose P' Q') (fill (c_compose_l c_hole Q') P')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c51_goal : congruent (compose P' Q') ?Q",
                    "c51_H3 : eq (compose P' Q') (fill (c_compose_l c_hole Q') P')"
                ],
                "tactic_res": [
                    "c52_goal : congruent (fill (c_compose_l c_hole Q') P') ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c52_goal : congruent (fill (c_compose_l c_hole Q') P') ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c53_goal : congruent P' ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c53_goal : congruent P' ?Q",
                    "c2_H1 : congruent P' (compose R S)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c49_goal : congruent (fill (c_compose_l c_hole Q') (compose R S))\n  (compose (compose R (open n R')) (compose S S'))"
                ],
                "tactic_res": [
                    "c54_goal : congruent (compose (compose R S) Q')\n  (compose (compose R (open n R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c54_goal : congruent (compose (compose R S) Q')\n  (compose (compose R (open n R')) (compose S S'))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c55_goal : congruent (compose (compose R S) Q') ?Q",
                    "c56_goal : congruent ?Q (compose (compose R (open n R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "assert ( compose ( compose _i _i ) _i = fill ( c_compose_r ( compose _i _i ) c_hole ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose ( compose _i _i ) _i = fill ( c_compose_r ( compose _i _i ) c_hole ) _i ) .",
                "tactic_args": [
                    "c55_goal : congruent (compose (compose R S) Q') ?Q",
                    "c2_R : process",
                    "c2_S : process",
                    "c2_Q' : process",
                    "c2_R : process",
                    "c2_S : process",
                    "c2_Q' : process"
                ],
                "tactic_res": [
                    "c57_goal : eq (compose (compose R S) Q')\n  (fill (c_compose_r (compose R S) c_hole) Q')",
                    "c58_goal : congruent (compose (compose R S) Q') ?Q",
                    "c58_H3 : eq (compose (compose R S) Q')\n  (fill (c_compose_r (compose R S) c_hole) Q')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c57_goal : eq (compose (compose R S) Q')\n  (fill (c_compose_r (compose R S) c_hole) Q')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c58_goal : congruent (compose (compose R S) Q') ?Q",
                    "c58_H3 : eq (compose (compose R S) Q')\n  (fill (c_compose_r (compose R S) c_hole) Q')"
                ],
                "tactic_res": [
                    "c59_goal : congruent (fill (c_compose_r (compose R S) c_hole) Q') ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c59_goal : congruent (fill (c_compose_r (compose R S) c_hole) Q') ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c60_goal : congruent Q' ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c60_goal : congruent Q' ?Q",
                    "c2_H2 : congruent Q' (compose (open n R') S')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c56_goal : congruent\n  (fill (c_compose_r (compose R S) c_hole) (compose (open n R') S'))\n  (compose (compose R (open n R')) (compose S S'))"
                ],
                "tactic_res": [
                    "c61_goal : congruent (compose (compose R S) (compose (open n R') S'))\n  (compose (compose R (open n R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c61_goal : congruent (compose (compose R S) (compose (open n R') S'))\n  (compose (compose R (open n R')) (compose S S'))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c62_goal : congruent (compose (compose R S) (compose (open n R') S')) ?Q",
                    "c63_goal : congruent ?Q (compose (compose R (open n R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c62_goal : congruent (compose (compose R S) (compose (open n R') S')) ?Q",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c64_goal : congruent ?Q (compose (compose R S) (compose (open n R') S'))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c64_goal : congruent ?Q (compose (compose R S) (compose (open n R') S'))",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c63_goal : congruent (compose R (compose S (compose (open n R') S')))\n  (compose (compose R (open n R')) (compose S S'))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c65_goal : congruent (compose R (compose S (compose (open n R') S'))) ?Q",
                    "c66_goal : congruent ?Q (compose (compose R (open n R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i ( compose _i ( compose ( open _i _i ) _i ) ) = fill ( c_compose_r _i c_hole ) ( compose _i ( compose ( open _i _i ) _i ) ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i ( compose _i ( compose ( open _i _i ) _i ) ) = fill ( c_compose_r _i c_hole ) ( compose _i ( compose ( open _i _i ) _i ) ) ) .",
                "tactic_args": [
                    "c65_goal : congruent (compose R (compose S (compose (open n R') S'))) ?Q",
                    "c2_R : process",
                    "c2_S : process",
                    "c2_n : channel",
                    "c2_R' : process",
                    "c2_S' : process",
                    "c2_R : process",
                    "c2_S : process",
                    "c2_n : channel",
                    "c2_R' : process",
                    "c2_S' : process"
                ],
                "tactic_res": [
                    "c67_goal : eq (compose R (compose S (compose (open n R') S')))\n  (fill (c_compose_r R c_hole) (compose S (compose (open n R') S')))",
                    "c68_goal : congruent (compose R (compose S (compose (open n R') S'))) ?Q",
                    "c68_H3 : eq (compose R (compose S (compose (open n R') S')))\n  (fill (c_compose_r R c_hole) (compose S (compose (open n R') S')))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c67_goal : eq (compose R (compose S (compose (open n R') S')))\n  (fill (c_compose_r R c_hole) (compose S (compose (open n R') S')))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c68_goal : congruent (compose R (compose S (compose (open n R') S'))) ?Q",
                    "c68_H3 : eq (compose R (compose S (compose (open n R') S')))\n  (fill (c_compose_r R c_hole) (compose S (compose (open n R') S')))"
                ],
                "tactic_res": [
                    "c69_goal : congruent\n  (fill (c_compose_r R c_hole) (compose S (compose (open n R') S'))) \n  ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c69_goal : congruent\n  (fill (c_compose_r R c_hole) (compose S (compose (open n R') S'))) \n  ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c70_goal : congruent (compose S (compose (open n R') S')) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c70_goal : congruent (compose S (compose (open n R') S')) ?Q",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c66_goal : congruent\n  (fill (c_compose_r R c_hole) (compose (compose S (open n R')) S'))\n  (compose (compose R (open n R')) (compose S S'))"
                ],
                "tactic_res": [
                    "c71_goal : congruent (compose R (compose (compose S (open n R')) S'))\n  (compose (compose R (open n R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c71_goal : congruent (compose R (compose (compose S (open n R')) S'))\n  (compose (compose R (open n R')) (compose S S'))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c72_goal : congruent (compose R (compose (compose S (open n R')) S')) ?Q",
                    "c73_goal : congruent ?Q (compose (compose R (open n R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i ( compose ( compose _i ( open _i _i ) ) _i ) = fill ( c_compose_r _i ( c_compose_l c_hole _i ) ) ( compose _i ( open _i _i ) ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i ( compose ( compose _i ( open _i _i ) ) _i ) = fill ( c_compose_r _i ( c_compose_l c_hole _i ) ) ( compose _i ( open _i _i ) ) ) .",
                "tactic_args": [
                    "c72_goal : congruent (compose R (compose (compose S (open n R')) S')) ?Q",
                    "c2_R : process",
                    "c2_S : process",
                    "c2_n : channel",
                    "c2_R' : process",
                    "c2_S' : process",
                    "c2_R : process",
                    "c2_S' : process",
                    "c2_S : process",
                    "c2_n : channel",
                    "c2_R' : process"
                ],
                "tactic_res": [
                    "c74_goal : eq (compose R (compose (compose S (open n R')) S'))\n  (fill (c_compose_r R (c_compose_l c_hole S')) (compose S (open n R')))",
                    "c75_goal : congruent (compose R (compose (compose S (open n R')) S')) ?Q",
                    "c75_H3 : eq (compose R (compose (compose S (open n R')) S'))\n  (fill (c_compose_r R (c_compose_l c_hole S')) (compose S (open n R')))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c74_goal : eq (compose R (compose (compose S (open n R')) S'))\n  (fill (c_compose_r R (c_compose_l c_hole S')) (compose S (open n R')))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c75_goal : congruent (compose R (compose (compose S (open n R')) S')) ?Q",
                    "c75_H3 : eq (compose R (compose (compose S (open n R')) S'))\n  (fill (c_compose_r R (c_compose_l c_hole S')) (compose S (open n R')))"
                ],
                "tactic_res": [
                    "c76_goal : congruent\n  (fill (c_compose_r R (c_compose_l c_hole S')) (compose S (open n R')))\n  ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c76_goal : congruent\n  (fill (c_compose_r R (c_compose_l c_hole S')) (compose S (open n R')))\n  ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c77_goal : congruent (compose S (open n R')) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c77_goal : congruent (compose S (open n R')) ?Q",
                    "_global_cong_compose_comm : forall P1 P2 : process, congruent (compose P1 P2) (compose P2 P1)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c73_goal : congruent\n  (fill (c_compose_r R (c_compose_l c_hole S')) (compose (open n R') S))\n  (compose (compose R (open n R')) (compose S S'))"
                ],
                "tactic_res": [
                    "c78_goal : congruent (compose R (compose (compose (open n R') S) S'))\n  (compose (compose R (open n R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c78_goal : congruent (compose R (compose (compose (open n R') S) S'))\n  (compose (compose R (open n R')) (compose S S'))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c79_goal : congruent (compose R (compose (compose (open n R') S) S')) ?Q",
                    "c80_goal : congruent ?Q (compose (compose R (open n R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i ( compose ( compose ( open _i _i ) _i ) _i ) = fill ( c_compose_r _i c_hole ) ( compose ( compose ( open _i _i ) _i ) _i ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i ( compose ( compose ( open _i _i ) _i ) _i ) = fill ( c_compose_r _i c_hole ) ( compose ( compose ( open _i _i ) _i ) _i ) ) .",
                "tactic_args": [
                    "c79_goal : congruent (compose R (compose (compose (open n R') S) S')) ?Q",
                    "c2_R : process",
                    "c2_n : channel",
                    "c2_R' : process",
                    "c2_S : process",
                    "c2_S' : process",
                    "c2_R : process",
                    "c2_n : channel",
                    "c2_R' : process",
                    "c2_S : process",
                    "c2_S' : process"
                ],
                "tactic_res": [
                    "c81_goal : eq (compose R (compose (compose (open n R') S) S'))\n  (fill (c_compose_r R c_hole) (compose (compose (open n R') S) S'))",
                    "c82_goal : congruent (compose R (compose (compose (open n R') S) S')) ?Q",
                    "c82_H3 : eq (compose R (compose (compose (open n R') S) S'))\n  (fill (c_compose_r R c_hole) (compose (compose (open n R') S) S'))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c81_goal : eq (compose R (compose (compose (open n R') S) S'))\n  (fill (c_compose_r R c_hole) (compose (compose (open n R') S) S'))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c82_goal : congruent (compose R (compose (compose (open n R') S) S')) ?Q",
                    "c82_H3 : eq (compose R (compose (compose (open n R') S) S'))\n  (fill (c_compose_r R c_hole) (compose (compose (open n R') S) S'))"
                ],
                "tactic_res": [
                    "c83_goal : congruent\n  (fill (c_compose_r R c_hole) (compose (compose (open n R') S) S')) \n  ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c83_goal : congruent\n  (fill (c_compose_r R c_hole) (compose (compose (open n R') S) S')) \n  ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c84_goal : congruent (compose (compose (open n R') S) S') ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c84_goal : congruent (compose (compose (open n R') S) S') ?Q",
                    "_global_cong_symm : forall (P Q : process) (_ : congruent P Q), congruent Q P"
                ],
                "tactic_res": [
                    "c85_goal : congruent ?Q (compose (compose (open n R') S) S')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c85_goal : congruent ?Q (compose (compose (open n R') S) S')",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c80_goal : congruent\n  (fill (c_compose_r R c_hole) (compose (open n R') (compose S S')))\n  (compose (compose R (open n R')) (compose S S'))"
                ],
                "tactic_res": [
                    "c86_goal : congruent (compose R (compose (open n R') (compose S S')))\n  (compose (compose R (open n R')) (compose S S'))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c86_goal : congruent (compose R (compose (open n R') (compose S S')))\n  (compose (compose R (open n R')) (compose S S'))",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "constructor .",
                "tactic_sig_no_out_arg": "constructor .",
                "tactic_args": [
                    "c8_goal : step_process_base\n  (compose (compose (output c n R) (input c R')) (compose S S'))\n  (compose (compose R (open n R')) (compose S S'))"
                ],
                "tactic_res": [
                    "c87_goal : step_process_base (compose (output c n R) (input c R'))\n  (compose R (open n R'))"
                ]
            },
            {
                "tactic_sig": "constructor .",
                "tactic_sig_no_out_arg": "constructor .",
                "tactic_args": [
                    "c87_goal : step_process_base (compose (output c n R) (input c R'))\n  (compose R (open n R'))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "tau_lts_step",
        "proof": [
            {
                "tactic_sig": "Theorem tau_lts_step : forall P Q , lts P tau_label Q -> step_process P Q .",
                "tactic_sig_no_out_arg": "Theorem tau_lts_step : forall P Q , lts P tau_label Q -> step_process P Q .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (P Q : process) (_ : lts P tau_label Q), step_process P Q"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (P Q : process) (_ : lts P tau_label Q), step_process P Q"
                ],
                "tactic_res": [
                    "c2_goal : step_process P Q",
                    "c2_P : process",
                    "c2_Q : process",
                    "c2_H : lts P tau_label Q"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c2_goal : step_process P Q",
                    "c2_H : lts P tau_label Q"
                ],
                "tactic_res": [
                    "c3_goal : step_process (compose P Q) (compose P' Q)",
                    "c3_IHlts : forall _ : eq l tau_label, step_process P P'",
                    "c3_H : lts P l P'",
                    "c3_P' : process",
                    "c4_goal : step_process (compose P Q) (compose P Q')",
                    "c4_IHlts : forall _ : eq l tau_label, step_process Q Q'",
                    "c4_H : lts Q l Q'",
                    "c4_Q' : process",
                    "c5_goal : step_process (input c P) (open n P)",
                    "c5_Heql : eq (recv_label c n) tau_label",
                    "c5_n : channel",
                    "c5_c : channel",
                    "c6_goal : step_process (output c c' P) P",
                    "c6_Heql : eq (send_label c c') tau_label",
                    "c6_c' : channel",
                    "c6_c : channel",
                    "c7_goal : step_process (compose P Q) (compose P' Q')",
                    "c7_IHlts2 : forall _ : eq (recv_label c n) tau_label, step_process Q Q'",
                    "c7_IHlts1 : forall _ : eq (send_label c n) tau_label, step_process P P'",
                    "c7_H0 : lts Q (recv_label c n) Q'",
                    "c7_H : lts P (send_label c n) P'",
                    "c7_n : channel",
                    "c7_c : channel",
                    "c7_Q' : process",
                    "c7_P' : process",
                    "c7_Heql : eq tau_label tau_label",
                    "c8_goal : step_process (compose P Q) (compose P' Q')",
                    "c8_IHlts2 : forall _ : eq (send_label c n) tau_label, step_process Q Q'",
                    "c8_IHlts1 : forall _ : eq (recv_label c n) tau_label, step_process P P'",
                    "c8_H0 : lts Q (send_label c n) Q'",
                    "c8_H : lts P (recv_label c n) P'",
                    "c8_n : channel",
                    "c8_c : channel",
                    "c8_Q' : process",
                    "c8_P' : process",
                    "c8_Heql : eq tau_label tau_label",
                    "c9_goal : step_process (replicate P) (compose P' (replicate P))",
                    "c9_IHlts : forall _ : eq a tau_label, step_process P P'",
                    "c9_H : lts P a P'",
                    "c9_P' : process",
                    "c9_Heql : eq a tau_label",
                    "c9_a : label",
                    "c10_goal : step_process (replicate P) (compose (compose P' P'') (replicate P))",
                    "c10_IHlts2 : forall _ : eq (recv_label c n) tau_label, step_process P P''",
                    "c10_IHlts1 : forall _ : eq (send_label c n) tau_label, step_process P P'",
                    "c10_H0 : lts P (recv_label c n) P''",
                    "c10_H : lts P (send_label c n) P'",
                    "c10_P'' : process",
                    "c10_P' : process",
                    "c10_n : channel",
                    "c10_c : channel",
                    "c10_Heql : eq tau_label tau_label"
                ]
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c2_Heql : eq l tau_label"
                ],
                "tactic_res": [
                    "c3_H0 : eq l tau_label"
                ]
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c2_Heql : eq l tau_label"
                ],
                "tactic_res": [
                    "c4_H0 : eq l tau_label"
                ]
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c5_goal : step_process (input c P) (open n P)",
                    "c2_Heql : eq l tau_label"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c6_goal : step_process (output c c' P) P",
                    "c2_Heql : eq l tau_label"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c2_Heql : eq l tau_label"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c2_Heql : eq l tau_label"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c2_Heql : eq l tau_label"
                ],
                "tactic_res": [
                    "c9_H0 : eq a tau_label"
                ]
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c2_Heql : eq l tau_label"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c3_goal : step_process (compose P Q) (compose P' Q)",
                    "_global_step_process : forall (_ : process) (_ : process), Prop"
                ],
                "tactic_res": [
                    "c11_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q' : process =>\n      and (congruent (compose P Q) P'0)\n        (and (congruent (compose P' Q) Q') (step_process_base P'0 Q'))))"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c3_IHlts : forall _ : eq l tau_label, step_process P P'",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c11_H0 : step_process P P'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ P0' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P0' ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c11_H0 : ex\n  (fun Q' : process =>\n   and (congruent P P0')\n     (and (congruent P' Q') (step_process_base P0' Q')))",
                    "c11_P0' : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q' ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c11_H0 : and (congruent P P0')\n  (and (congruent P' Q') (step_process_base P0' Q'))",
                    "c11_Q' : process"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c11_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q' : process =>\n      and (congruent (compose P Q) P'0)\n        (and (congruent (compose P' Q) Q') (step_process_base P'0 Q'))))",
                    "c11_P0' : process",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c12_goal : ex\n  (fun Q' : process =>\n   and (congruent (compose P Q) (compose P0' Q))\n     (and (congruent (compose P' Q) Q')\n        (step_process_base (compose P0' Q) Q')))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c12_goal : ex\n  (fun Q' : process =>\n   and (congruent (compose P Q) (compose P0' Q))\n     (and (congruent (compose P' Q) Q')\n        (step_process_base (compose P0' Q) Q')))",
                    "c4_Q' : process",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c13_goal : and (congruent (compose P Q) (compose P0' Q))\n  (and (congruent (compose P' Q) (compose Q' Q))\n     (step_process_base (compose P0' Q) (compose Q' Q)))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c13_goal : and (congruent (compose P Q) (compose P0' Q))\n  (and (congruent (compose P' Q) (compose Q' Q))\n     (step_process_base (compose P0' Q) (compose Q' Q)))"
                ],
                "tactic_res": [
                    "c14_goal : congruent (compose P Q) (compose P0' Q)",
                    "c15_goal : congruent (compose P' Q) (compose Q' Q)",
                    "c16_goal : step_process_base (compose P0' Q) (compose Q' Q)"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c14_goal : congruent (compose P Q) (compose P0' Q)",
                    "c2_P : process",
                    "c2_Q : process",
                    "c2_Q : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c17_goal : eq (compose P Q) (fill (c_compose_l c_hole Q) P)",
                    "c18_goal : congruent (compose P Q) (compose P0' Q)",
                    "c18_H1 : eq (compose P Q) (fill (c_compose_l c_hole Q) P)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c17_goal : eq (compose P Q) (fill (c_compose_l c_hole Q) P)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c18_goal : congruent (compose P Q) (compose P0' Q)",
                    "c11_P0' : process",
                    "c2_Q : process",
                    "c2_Q : process",
                    "c11_P0' : process"
                ],
                "tactic_res": [
                    "c19_goal : eq (compose P0' Q) (fill (c_compose_l c_hole Q) P0')",
                    "c20_goal : congruent (compose P Q) (compose P0' Q)",
                    "c20_H2 : eq (compose P0' Q) (fill (c_compose_l c_hole Q) P0')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c19_goal : eq (compose P0' Q) (fill (c_compose_l c_hole Q) P0')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c20_goal : congruent (compose P Q) (compose P0' Q)",
                    "c18_H1 : eq (compose P Q) (fill (c_compose_l c_hole Q) P)"
                ],
                "tactic_res": [
                    "c21_goal : congruent (fill (c_compose_l c_hole Q) P) (compose P0' Q)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c21_goal : congruent (fill (c_compose_l c_hole Q) P) (compose P0' Q)",
                    "c20_H2 : eq (compose P0' Q) (fill (c_compose_l c_hole Q) P0')"
                ],
                "tactic_res": [
                    "c22_goal : congruent (fill (c_compose_l c_hole Q) P)\n  (fill (c_compose_l c_hole Q) P0')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c22_goal : congruent (fill (c_compose_l c_hole Q) P)\n  (fill (c_compose_l c_hole Q) P0')",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c23_goal : congruent P P0'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c23_goal : congruent P P0'",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c15_goal : congruent (compose P' Q) (compose Q' Q)",
                    "c3_P' : process",
                    "c2_Q : process",
                    "c2_Q : process",
                    "c3_P' : process"
                ],
                "tactic_res": [
                    "c24_goal : eq (compose P' Q) (fill (c_compose_l c_hole Q) P')",
                    "c25_goal : congruent (compose P' Q) (compose Q' Q)",
                    "c25_H1 : eq (compose P' Q) (fill (c_compose_l c_hole Q) P')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c24_goal : eq (compose P' Q) (fill (c_compose_l c_hole Q) P')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c25_goal : congruent (compose P' Q) (compose Q' Q)",
                    "c4_Q' : process",
                    "c2_Q : process",
                    "c2_Q : process",
                    "c4_Q' : process"
                ],
                "tactic_res": [
                    "c26_goal : eq (compose Q' Q) (fill (c_compose_l c_hole Q) Q')",
                    "c27_goal : congruent (compose P' Q) (compose Q' Q)",
                    "c27_H2 : eq (compose Q' Q) (fill (c_compose_l c_hole Q) Q')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c26_goal : eq (compose Q' Q) (fill (c_compose_l c_hole Q) Q')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c27_goal : congruent (compose P' Q) (compose Q' Q)",
                    "c25_H1 : eq (compose P' Q) (fill (c_compose_l c_hole Q) P')"
                ],
                "tactic_res": [
                    "c28_goal : congruent (fill (c_compose_l c_hole Q) P') (compose Q' Q)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c28_goal : congruent (fill (c_compose_l c_hole Q) P') (compose Q' Q)",
                    "c27_H2 : eq (compose Q' Q) (fill (c_compose_l c_hole Q) Q')"
                ],
                "tactic_res": [
                    "c29_goal : congruent (fill (c_compose_l c_hole Q) P')\n  (fill (c_compose_l c_hole Q) Q')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c29_goal : congruent (fill (c_compose_l c_hole Q) P')\n  (fill (c_compose_l c_hole Q) Q')",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c30_goal : congruent P' Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c30_goal : congruent P' Q'",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c16_goal : step_process_base (compose P0' Q) (compose Q' Q)",
                    "_global_step_composition : forall (P1 P2 P3 : process) (_ : step_process_base P1 P2),\n       step_process_base (compose P1 P3) (compose P2 P3)"
                ],
                "tactic_res": [
                    "c31_goal : step_process_base P0' Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c31_goal : step_process_base P0' Q'",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c4_goal : step_process (compose P Q) (compose P Q')",
                    "_global_step_process : forall (_ : process) (_ : process), Prop"
                ],
                "tactic_res": [
                    "c32_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q'0 : process =>\n      and (congruent (compose P Q) P')\n        (and (congruent (compose P Q') Q'0) (step_process_base P' Q'0))))"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c3_IHlts : forall _ : eq l tau_label, step_process P P'",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c32_H0 : step_process Q Q'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ X ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ X ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c32_H0 : ex\n  (fun Q'0 : process =>\n   and (congruent Q X)\n     (and (congruent Q' Q'0) (step_process_base X Q'0)))",
                    "c32_X : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Y ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Y ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c32_H0 : and (congruent Q X) (and (congruent Q' Y) (step_process_base X Y))",
                    "c32_Y : process"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c32_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q'0 : process =>\n      and (congruent (compose P Q) P')\n        (and (congruent (compose P Q') Q'0) (step_process_base P' Q'0))))",
                    "c32_X : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c33_goal : ex\n  (fun Q'0 : process =>\n   and (congruent (compose P Q) (compose X P))\n     (and (congruent (compose P Q') Q'0)\n        (step_process_base (compose X P) Q'0)))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c33_goal : ex\n  (fun Q'0 : process =>\n   and (congruent (compose P Q) (compose X P))\n     (and (congruent (compose P Q') Q'0)\n        (step_process_base (compose X P) Q'0)))",
                    "c32_Y : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c34_goal : and (congruent (compose P Q) (compose X P))\n  (and (congruent (compose P Q') (compose Y P))\n     (step_process_base (compose X P) (compose Y P)))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c34_goal : and (congruent (compose P Q) (compose X P))\n  (and (congruent (compose P Q') (compose Y P))\n     (step_process_base (compose X P) (compose Y P)))"
                ],
                "tactic_res": [
                    "c35_goal : congruent (compose P Q) (compose X P)",
                    "c36_goal : congruent (compose P Q') (compose Y P)",
                    "c37_goal : step_process_base (compose X P) (compose Y P)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c35_goal : congruent (compose P Q) (compose X P)",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c38_goal : congruent (compose P Q) ?Q",
                    "c39_goal : congruent ?Q (compose X P)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c38_goal : congruent (compose P Q) ?Q",
                    "_global_cong_compose_comm : forall P1 P2 : process, congruent (compose P1 P2) (compose P2 P1)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c39_goal : congruent (compose Q P) (compose X P)",
                    "c2_Q : process",
                    "c2_P : process",
                    "c2_P : process",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c40_goal : eq (compose Q P) (fill (c_compose_l c_hole P) Q)",
                    "c41_goal : congruent (compose Q P) (compose X P)",
                    "c41_H1 : eq (compose Q P) (fill (c_compose_l c_hole P) Q)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c40_goal : eq (compose Q P) (fill (c_compose_l c_hole P) Q)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c41_goal : congruent (compose Q P) (compose X P)",
                    "c32_X : process",
                    "c2_P : process",
                    "c2_P : process",
                    "c32_X : process"
                ],
                "tactic_res": [
                    "c42_goal : eq (compose X P) (fill (c_compose_l c_hole P) X)",
                    "c43_goal : congruent (compose Q P) (compose X P)",
                    "c43_H2 : eq (compose X P) (fill (c_compose_l c_hole P) X)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c42_goal : eq (compose X P) (fill (c_compose_l c_hole P) X)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c43_goal : congruent (compose Q P) (compose X P)",
                    "c41_H1 : eq (compose Q P) (fill (c_compose_l c_hole P) Q)"
                ],
                "tactic_res": [
                    "c44_goal : congruent (fill (c_compose_l c_hole P) Q) (compose X P)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c44_goal : congruent (fill (c_compose_l c_hole P) Q) (compose X P)",
                    "c43_H2 : eq (compose X P) (fill (c_compose_l c_hole P) X)"
                ],
                "tactic_res": [
                    "c45_goal : congruent (fill (c_compose_l c_hole P) Q)\n  (fill (c_compose_l c_hole P) X)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c45_goal : congruent (fill (c_compose_l c_hole P) Q)\n  (fill (c_compose_l c_hole P) X)",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c46_goal : congruent Q X"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c46_goal : congruent Q X",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c36_goal : congruent (compose P Q') (compose Y P)",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c47_goal : congruent (compose P Q') ?Q",
                    "c48_goal : congruent ?Q (compose Y P)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c47_goal : congruent (compose P Q') ?Q",
                    "_global_cong_compose_comm : forall P1 P2 : process, congruent (compose P1 P2) (compose P2 P1)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c48_goal : congruent (compose Q' P) (compose Y P)",
                    "c4_Q' : process",
                    "c2_P : process",
                    "c2_P : process",
                    "c4_Q' : process"
                ],
                "tactic_res": [
                    "c49_goal : eq (compose Q' P) (fill (c_compose_l c_hole P) Q')",
                    "c50_goal : congruent (compose Q' P) (compose Y P)",
                    "c50_H1 : eq (compose Q' P) (fill (c_compose_l c_hole P) Q')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c49_goal : eq (compose Q' P) (fill (c_compose_l c_hole P) Q')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i _i = fill ( c_compose_l c_hole _i ) _i ) .",
                "tactic_args": [
                    "c50_goal : congruent (compose Q' P) (compose Y P)",
                    "c32_Y : process",
                    "c2_P : process",
                    "c2_P : process",
                    "c32_Y : process"
                ],
                "tactic_res": [
                    "c51_goal : eq (compose Y P) (fill (c_compose_l c_hole P) Y)",
                    "c52_goal : congruent (compose Q' P) (compose Y P)",
                    "c52_H2 : eq (compose Y P) (fill (c_compose_l c_hole P) Y)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c51_goal : eq (compose Y P) (fill (c_compose_l c_hole P) Y)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c52_goal : congruent (compose Q' P) (compose Y P)",
                    "c50_H1 : eq (compose Q' P) (fill (c_compose_l c_hole P) Q')"
                ],
                "tactic_res": [
                    "c53_goal : congruent (fill (c_compose_l c_hole P) Q') (compose Y P)"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c53_goal : congruent (fill (c_compose_l c_hole P) Q') (compose Y P)",
                    "c52_H2 : eq (compose Y P) (fill (c_compose_l c_hole P) Y)"
                ],
                "tactic_res": [
                    "c54_goal : congruent (fill (c_compose_l c_hole P) Q')\n  (fill (c_compose_l c_hole P) Y)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c54_goal : congruent (fill (c_compose_l c_hole P) Q')\n  (fill (c_compose_l c_hole P) Y)",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c55_goal : congruent Q' Y"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c55_goal : congruent Q' Y",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c37_goal : step_process_base (compose X P) (compose Y P)",
                    "_global_step_composition : forall (P1 P2 P3 : process) (_ : step_process_base P1 P2),\n       step_process_base (compose P1 P3) (compose P2 P3)"
                ],
                "tactic_res": [
                    "c56_goal : step_process_base X Y"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c56_goal : step_process_base X Y",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c7_goal : step_process (compose P Q) (compose P' Q')",
                    "_global_tau_lts_comm_step : forall (P Q P' Q' : process) (c n : channel)\n         (_ : lts P (send_label c n) P') (_ : lts Q (recv_label c n) Q'),\n       step_process (compose P Q) (compose P' Q')"
                ],
                "tactic_res": [
                    "c57_goal : lts P (send_label ?c ?n) P'",
                    "c58_goal : lts Q (recv_label ?c ?n) Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c57_goal : lts P (send_label ?c ?n) P'",
                    "c2_H : lts P tau_label Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c58_goal : lts Q (recv_label c n) Q'",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c8_goal : step_process (compose P Q) (compose P' Q')",
                    "_global_tau_lts_comm_step : forall (P Q P' Q' : process) (c n : channel)\n         (_ : lts P (send_label c n) P') (_ : lts Q (recv_label c n) Q'),\n       step_process (compose P Q) (compose P' Q')",
                    "c2_H : lts P tau_label Q"
                ],
                "tactic_res": [
                    "c59_goal : step_process (compose P Q) (compose P' Q')",
                    "c59_H : step_process (compose ?P P) (compose ?P' P')",
                    "c60_goal : lts ?P (send_label c n) ?P'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ P0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P0 ] .",
                "tactic_args": [
                    "c2_H : lts P tau_label Q"
                ],
                "tactic_res": [
                    "c59_H : ex\n  (fun Q'0 : process =>\n   and (congruent (compose ?P P) P0)\n     (and (congruent (compose ?P' P') Q'0) (step_process_base P0 Q'0)))",
                    "c59_P0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q0 ] .",
                "tactic_args": [
                    "c2_H : lts P tau_label Q"
                ],
                "tactic_res": [
                    "c59_H : and (congruent (compose ?P P) P0)\n  (and (congruent (compose ?P' P') Q0) (step_process_base P0 Q0))",
                    "c59_Q0 : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c59_goal : step_process (compose P Q) (compose P' Q')",
                    "c59_P0 : process"
                ],
                "tactic_res": [
                    "c61_goal : ex\n  (fun Q'0 : process =>\n   and (congruent (compose P Q) P0)\n     (and (congruent (compose P' Q') Q'0) (step_process_base P0 Q'0)))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c61_goal : ex\n  (fun Q'0 : process =>\n   and (congruent (compose P Q) P0)\n     (and (congruent (compose P' Q') Q'0) (step_process_base P0 Q'0)))",
                    "c59_Q0 : process"
                ],
                "tactic_res": [
                    "c62_goal : and (congruent (compose P Q) P0)\n  (and (congruent (compose P' Q') Q0) (step_process_base P0 Q0))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c62_goal : and (congruent (compose P Q) P0)\n  (and (congruent (compose P' Q') Q0) (step_process_base P0 Q0))"
                ],
                "tactic_res": [
                    "c63_goal : congruent (compose P Q) P0",
                    "c64_goal : congruent (compose P' Q') Q0",
                    "c65_goal : step_process_base P0 Q0"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c63_goal : congruent (compose P Q) P0",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c66_goal : congruent (compose P Q) ?Q",
                    "c67_goal : congruent ?Q P0"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c66_goal : congruent (compose P Q) ?Q",
                    "_global_cong_compose_comm : forall P1 P2 : process, congruent (compose P1 P2) (compose P2 P1)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c67_goal : congruent (compose Q P) P0",
                    "c2_H : lts P tau_label Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c64_goal : congruent (compose P' Q') Q0",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c68_goal : congruent (compose P' Q') ?Q",
                    "c69_goal : congruent ?Q Q0"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c68_goal : congruent (compose P' Q') ?Q",
                    "_global_cong_compose_comm : forall P1 P2 : process, congruent (compose P1 P2) (compose P2 P1)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c69_goal : congruent (compose Q' P') Q0",
                    "c2_H : lts P tau_label Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c65_goal : step_process_base P0 Q0",
                    "c2_H : lts P tau_label Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c60_goal : lts Q (send_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c3_IHlts : forall _ : eq l tau_label, step_process P P'",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c9_H0 : step_process P P'"
                ]
            },
            {
                "tactic_sig": "unfold _i in * .",
                "tactic_sig_no_out_arg": "unfold _i in * .",
                "tactic_args": [
                    "c9_goal : step_process (replicate P) (compose P' (replicate P))",
                    "_global_step_process : forall (_ : process) (_ : process), Prop"
                ],
                "tactic_res": [
                    "c70_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q' : process =>\n      and (congruent (replicate P) P'0)\n        (and (congruent (compose P' (replicate P)) Q')\n           (step_process_base P'0 Q'))))",
                    "c70_IHlts : forall _ : eq tau_label tau_label,\nex\n  (fun P'0 : process =>\n   ex\n     (fun Q' : process =>\n      and (congruent P P'0)\n        (and (congruent P' Q') (step_process_base P'0 Q'))))",
                    "c70_H0 : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q' : process =>\n      and (congruent P P'0)\n        (and (congruent P' Q') (step_process_base P'0 Q'))))"
                ]
            },
            {
                "tactic_sig": "clear _i .",
                "tactic_sig_no_out_arg": "clear _i .",
                "tactic_args": [
                    "c3_IHlts : forall _ : eq l tau_label, step_process P P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ P'0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P'0 ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c70_H0 : ex\n  (fun Q' : process =>\n   and (congruent P P'0)\n     (and (congruent P' Q') (step_process_base P'0 Q')))",
                    "c70_P'0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q ] .",
                "tactic_args": [
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c70_H0 : and (congruent P P'0) (and (congruent P' Q) (step_process_base P'0 Q))",
                    "c70_Q : process"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i ( replicate _i ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i ( replicate _i ) ) .",
                "tactic_args": [
                    "c70_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q' : process =>\n      and (congruent (replicate P) P'0)\n        (and (congruent (compose P' (replicate P)) Q')\n           (step_process_base P'0 Q'))))",
                    "c70_P'0 : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c71_goal : ex\n  (fun Q' : process =>\n   and (congruent (replicate P) (compose P'0 (replicate P)))\n     (and (congruent (compose P' (replicate P)) Q')\n        (step_process_base (compose P'0 (replicate P)) Q')))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i ( replicate _i ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i ( replicate _i ) ) .",
                "tactic_args": [
                    "c71_goal : ex\n  (fun Q' : process =>\n   and (congruent (replicate P) (compose P'0 (replicate P)))\n     (and (congruent (compose P' (replicate P)) Q')\n        (step_process_base (compose P'0 (replicate P)) Q')))",
                    "c2_Q : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c72_goal : and (congruent (replicate P) (compose P'0 (replicate P)))\n  (and (congruent (compose P' (replicate P)) (compose Q (replicate P)))\n     (step_process_base (compose P'0 (replicate P))\n        (compose Q (replicate P))))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c72_goal : and (congruent (replicate P) (compose P'0 (replicate P)))\n  (and (congruent (compose P' (replicate P)) (compose Q (replicate P)))\n     (step_process_base (compose P'0 (replicate P))\n        (compose Q (replicate P))))"
                ],
                "tactic_res": [
                    "c73_goal : congruent (replicate P) (compose P'0 (replicate P))",
                    "c74_goal : congruent (compose P' (replicate P)) (compose Q (replicate P))",
                    "c75_goal : step_process_base (compose P'0 (replicate P)) (compose Q (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c73_goal : congruent (replicate P) (compose P'0 (replicate P))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c76_goal : congruent (replicate P) ?Q",
                    "c77_goal : congruent ?Q (compose P'0 (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c76_goal : congruent (replicate P) ?Q",
                    "_global_cong_replicate : forall P : process, congruent (replicate P) (compose P (replicate P))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose _i ( replicate _i ) = fill ( c_compose_l c_hole ( replicate _i ) ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i ( replicate _i ) = fill ( c_compose_l c_hole ( replicate _i ) ) _i ) .",
                "tactic_args": [
                    "c77_goal : congruent (compose P (replicate P)) (compose P'0 (replicate P))",
                    "c2_P : process",
                    "c2_P : process",
                    "c2_P : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c78_goal : eq (compose P (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P)",
                    "c79_goal : congruent (compose P (replicate P)) (compose P'0 (replicate P))",
                    "c79_H1 : eq (compose P (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c78_goal : eq (compose P (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c79_goal : congruent (compose P (replicate P)) (compose P'0 (replicate P))",
                    "c79_H1 : eq (compose P (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P)"
                ],
                "tactic_res": [
                    "c80_goal : congruent (fill (c_compose_l c_hole (replicate P)) P)\n  (compose P'0 (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c80_goal : congruent (fill (c_compose_l c_hole (replicate P)) P)\n  (compose P'0 (replicate P))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c81_goal : congruent (fill (c_compose_l c_hole (replicate P)) P) ?Q",
                    "c82_goal : congruent ?Q (compose P'0 (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c81_goal : congruent (fill (c_compose_l c_hole (replicate P)) P) ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c83_goal : congruent P ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c83_goal : congruent P ?Q",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c82_goal : congruent (fill (c_compose_l c_hole (replicate P)) P'0)\n  (compose P'0 (replicate P))"
                ],
                "tactic_res": [
                    "c84_goal : congruent (compose P'0 (replicate P)) (compose P'0 (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c84_goal : congruent (compose P'0 (replicate P)) (compose P'0 (replicate P))",
                    "_global_cong_refl : forall P : process, congruent P P"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose _i ( replicate _i ) = fill ( c_compose_l c_hole ( replicate _i ) ) _i ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i ( replicate _i ) = fill ( c_compose_l c_hole ( replicate _i ) ) _i ) .",
                "tactic_args": [
                    "c74_goal : congruent (compose P' (replicate P)) (compose Q (replicate P))",
                    "c3_P' : process",
                    "c2_P : process",
                    "c2_P : process",
                    "c3_P' : process"
                ],
                "tactic_res": [
                    "c85_goal : eq (compose P' (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P')",
                    "c86_goal : congruent (compose P' (replicate P)) (compose Q (replicate P))",
                    "c86_H1 : eq (compose P' (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c85_goal : eq (compose P' (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c86_goal : congruent (compose P' (replicate P)) (compose Q (replicate P))",
                    "c86_H1 : eq (compose P' (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) P')"
                ],
                "tactic_res": [
                    "c87_goal : congruent (fill (c_compose_l c_hole (replicate P)) P')\n  (compose Q (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c87_goal : congruent (fill (c_compose_l c_hole (replicate P)) P')\n  (compose Q (replicate P))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c88_goal : congruent (fill (c_compose_l c_hole (replicate P)) P') ?Q",
                    "c89_goal : congruent ?Q (compose Q (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c88_goal : congruent (fill (c_compose_l c_hole (replicate P)) P') ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c90_goal : congruent P' ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c90_goal : congruent P' ?Q",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c89_goal : congruent (fill (c_compose_l c_hole (replicate P)) Q)\n  (compose Q (replicate P))"
                ],
                "tactic_res": [
                    "c91_goal : congruent (compose Q (replicate P)) (compose Q (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c91_goal : congruent (compose Q (replicate P)) (compose Q (replicate P))",
                    "_global_cong_refl : forall P : process, congruent P P"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c75_goal : step_process_base (compose P'0 (replicate P)) (compose Q (replicate P))",
                    "_global_step_composition : forall (P1 P2 P3 : process) (_ : step_process_base P1 P2),\n       step_process_base (compose P1 P3) (compose P2 P3)"
                ],
                "tactic_res": [
                    "c92_goal : step_process_base P'0 Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c92_goal : step_process_base P'0 Q",
                    "c7_H0 : lts Q (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c10_goal : step_process (replicate P) (compose (compose P' P'') (replicate P))",
                    "_global_tau_lts_comm_step : forall (P Q P' Q' : process) (c n : channel)\n         (_ : lts P (send_label c n) P') (_ : lts Q (recv_label c n) Q'),\n       step_process (compose P Q) (compose P' Q')",
                    "c2_H : lts P tau_label Q"
                ],
                "tactic_res": [
                    "c93_goal : step_process (replicate P) (compose (compose P' P'') (replicate P))",
                    "c93_H : step_process (compose P ?Q) (compose P' ?Q')",
                    "c94_goal : lts ?Q (recv_label c n) ?Q'"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c94_goal : lts ?Q (recv_label c n) ?Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ P0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P0 ] .",
                "tactic_args": [
                    "c2_H : lts P tau_label Q"
                ],
                "tactic_res": [
                    "c93_H : ex\n  (fun Q' : process =>\n   and (congruent (compose P P) P0)\n     (and (congruent (compose P' P'') Q') (step_process_base P0 Q')))",
                    "c93_P0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ P0' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P0' ] .",
                "tactic_args": [
                    "c2_H : lts P tau_label Q"
                ],
                "tactic_res": [
                    "c93_H : and (congruent (compose P P) P0)\n  (and (congruent (compose P' P'') P0') (step_process_base P0 P0'))",
                    "c93_P0' : process"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c93_goal : step_process (replicate P) (compose (compose P' P'') (replicate P))",
                    "_global_step_process : forall (_ : process) (_ : process), Prop"
                ],
                "tactic_res": [
                    "c95_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q' : process =>\n      and (congruent (replicate P) P'0)\n        (and (congruent (compose (compose P' P'') (replicate P)) Q')\n           (step_process_base P'0 Q'))))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i ( replicate _i ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i ( replicate _i ) ) .",
                "tactic_args": [
                    "c95_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q' : process =>\n      and (congruent (replicate P) P'0)\n        (and (congruent (compose (compose P' P'') (replicate P)) Q')\n           (step_process_base P'0 Q'))))",
                    "c93_P0 : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c96_goal : ex\n  (fun Q' : process =>\n   and (congruent (replicate P) (compose P0 (replicate P)))\n     (and (congruent (compose (compose P' P'') (replicate P)) Q')\n        (step_process_base (compose P0 (replicate P)) Q')))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i ( replicate _i ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i ( replicate _i ) ) .",
                "tactic_args": [
                    "c96_goal : ex\n  (fun Q' : process =>\n   and (congruent (replicate P) (compose P0 (replicate P)))\n     (and (congruent (compose (compose P' P'') (replicate P)) Q')\n        (step_process_base (compose P0 (replicate P)) Q')))",
                    "c93_P0' : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c97_goal : and (congruent (replicate P) (compose P0 (replicate P)))\n  (and\n     (congruent (compose (compose P' P'') (replicate P))\n        (compose P0' (replicate P)))\n     (step_process_base (compose P0 (replicate P))\n        (compose P0' (replicate P))))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c97_goal : and (congruent (replicate P) (compose P0 (replicate P)))\n  (and\n     (congruent (compose (compose P' P'') (replicate P))\n        (compose P0' (replicate P)))\n     (step_process_base (compose P0 (replicate P))\n        (compose P0' (replicate P))))"
                ],
                "tactic_res": [
                    "c98_goal : congruent (replicate P) (compose P0 (replicate P))",
                    "c99_goal : congruent (compose (compose P' P'') (replicate P))\n  (compose P0' (replicate P))",
                    "c100_goal : step_process_base (compose P0 (replicate P))\n  (compose P0' (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c98_goal : congruent (replicate P) (compose P0 (replicate P))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c101_goal : congruent (replicate P) ?Q",
                    "c102_goal : congruent ?Q (compose P0 (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c101_goal : congruent (replicate P) ?Q",
                    "_global_cong_replicate : forall P : process, congruent (replicate P) (compose P (replicate P))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c102_goal : congruent (compose P (replicate P)) (compose P0 (replicate P))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c103_goal : congruent (compose P (replicate P)) ?Q",
                    "c104_goal : congruent ?Q (compose P0 (replicate P))"
                ]
            },
            {
                "tactic_sig": "assert ( compose _i ( replicate _i ) = fill ( c_compose_r _i c_hole ) ( replicate _i ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose _i ( replicate _i ) = fill ( c_compose_r _i c_hole ) ( replicate _i ) ) .",
                "tactic_args": [
                    "c103_goal : congruent (compose P (replicate P)) ?Q",
                    "c2_P : process",
                    "c2_P : process",
                    "c2_P : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c105_goal : eq (compose P (replicate P))\n  (fill (c_compose_r P c_hole) (replicate P))",
                    "c106_goal : congruent (compose P (replicate P)) ?Q",
                    "c106_H1 : eq (compose P (replicate P))\n  (fill (c_compose_r P c_hole) (replicate P))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c105_goal : eq (compose P (replicate P))\n  (fill (c_compose_r P c_hole) (replicate P))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c106_goal : congruent (compose P (replicate P)) ?Q",
                    "c106_H1 : eq (compose P (replicate P))\n  (fill (c_compose_r P c_hole) (replicate P))"
                ],
                "tactic_res": [
                    "c107_goal : congruent (fill (c_compose_r P c_hole) (replicate P)) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c107_goal : congruent (fill (c_compose_r P c_hole) (replicate P)) ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c108_goal : congruent (replicate P) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c108_goal : congruent (replicate P) ?Q",
                    "_global_cong_replicate : forall P : process, congruent (replicate P) (compose P (replicate P))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c104_goal : congruent (fill (c_compose_r P c_hole) (compose P (replicate P)))\n  (compose P0 (replicate P))"
                ],
                "tactic_res": [
                    "c109_goal : congruent (compose P (compose P (replicate P)))\n  (compose P0 (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c109_goal : congruent (compose P (compose P (replicate P)))\n  (compose P0 (replicate P))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c110_goal : congruent (compose P (compose P (replicate P))) ?Q",
                    "c111_goal : congruent ?Q (compose P0 (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c110_goal : congruent (compose P (compose P (replicate P))) ?Q",
                    "_global_cong_compose_assoc : forall P1 P2 P3 : process,\n       congruent (compose P1 (compose P2 P3)) (compose (compose P1 P2) P3)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c111_goal : congruent (compose (compose P P) (replicate P))\n  (compose P0 (replicate P))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c112_goal : congruent (compose (compose P P) (replicate P)) ?Q",
                    "c113_goal : congruent ?Q (compose P0 (replicate P))"
                ]
            },
            {
                "tactic_sig": "assert ( compose ( compose _i _i ) ( replicate _i ) = fill ( c_compose_l c_hole ( replicate _i ) ) ( compose _i _i ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose ( compose _i _i ) ( replicate _i ) = fill ( c_compose_l c_hole ( replicate _i ) ) ( compose _i _i ) ) .",
                "tactic_args": [
                    "c112_goal : congruent (compose (compose P P) (replicate P)) ?Q",
                    "c2_P : process",
                    "c2_P : process",
                    "c2_P : process",
                    "c2_P : process",
                    "c2_P : process",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c114_goal : eq (compose (compose P P) (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) (compose P P))",
                    "c115_goal : congruent (compose (compose P P) (replicate P)) ?Q",
                    "c115_H1 : eq (compose (compose P P) (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) (compose P P))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c114_goal : eq (compose (compose P P) (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) (compose P P))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c115_goal : congruent (compose (compose P P) (replicate P)) ?Q",
                    "c115_H1 : eq (compose (compose P P) (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) (compose P P))"
                ],
                "tactic_res": [
                    "c116_goal : congruent (fill (c_compose_l c_hole (replicate P)) (compose P P)) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c116_goal : congruent (fill (c_compose_l c_hole (replicate P)) (compose P P)) ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c117_goal : congruent (compose P P) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c117_goal : congruent (compose P P) ?Q",
                    "c2_H : lts P tau_label Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c113_goal : congruent (fill (c_compose_l c_hole (replicate P)) P0)\n  (compose P0 (replicate P))"
                ],
                "tactic_res": [
                    "c118_goal : congruent (compose P0 (replicate P)) (compose P0 (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c118_goal : congruent (compose P0 (replicate P)) (compose P0 (replicate P))",
                    "_global_cong_refl : forall P : process, congruent P P"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( compose ( compose _i _i ) ( replicate _i ) = fill ( c_compose_l c_hole ( replicate _i ) ) ( compose _i _i ) ) .",
                "tactic_sig_no_out_arg": "assert ( compose ( compose _i _i ) ( replicate _i ) = fill ( c_compose_l c_hole ( replicate _i ) ) ( compose _i _i ) ) .",
                "tactic_args": [
                    "c99_goal : congruent (compose (compose P' P'') (replicate P))\n  (compose P0' (replicate P))",
                    "c3_P' : process",
                    "c10_P'' : process",
                    "c2_P : process",
                    "c2_P : process",
                    "c3_P' : process",
                    "c10_P'' : process"
                ],
                "tactic_res": [
                    "c119_goal : eq (compose (compose P' P'') (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) (compose P' P''))",
                    "c120_goal : congruent (compose (compose P' P'') (replicate P))\n  (compose P0' (replicate P))",
                    "c120_H1 : eq (compose (compose P' P'') (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) (compose P' P''))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c119_goal : eq (compose (compose P' P'') (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) (compose P' P''))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c120_goal : congruent (compose (compose P' P'') (replicate P))\n  (compose P0' (replicate P))",
                    "_global_cong_trans : forall (P Q R : process) (_ : congruent P Q) (_ : congruent Q R),\n       congruent P R"
                ],
                "tactic_res": [
                    "c121_goal : congruent (compose (compose P' P'') (replicate P)) ?Q",
                    "c122_goal : congruent ?Q (compose P0' (replicate P))"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c121_goal : congruent (compose (compose P' P'') (replicate P)) ?Q",
                    "c120_H1 : eq (compose (compose P' P'') (replicate P))\n  (fill (c_compose_l c_hole (replicate P)) (compose P' P''))"
                ],
                "tactic_res": [
                    "c123_goal : congruent (fill (c_compose_l c_hole (replicate P)) (compose P' P'')) ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c123_goal : congruent (fill (c_compose_l c_hole (replicate P)) (compose P' P'')) ?Q",
                    "_global_cong_context : forall (c : context) (P Q : process) (_ : congruent P Q),\n       congruent (fill c P) (fill c Q)"
                ],
                "tactic_res": [
                    "c124_goal : congruent (compose P' P'') ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c124_goal : congruent (compose P' P'') ?Q",
                    "c2_H : lts P tau_label Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c122_goal : congruent (fill (c_compose_l c_hole (replicate P)) P0')\n  (compose P0' (replicate P))"
                ],
                "tactic_res": [
                    "c125_goal : congruent (compose P0' (replicate P)) (compose P0' (replicate P))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c125_goal : congruent (compose P0' (replicate P)) (compose P0' (replicate P))",
                    "_global_cong_refl : forall P : process, congruent P P"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c100_goal : step_process_base (compose P0 (replicate P))\n  (compose P0' (replicate P))",
                    "_global_step_composition : forall (P1 P2 P3 : process) (_ : step_process_base P1 P2),\n       step_process_base (compose P1 P3) (compose P2 P3)"
                ],
                "tactic_res": [
                    "c126_goal : step_process_base P0 P0'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c126_goal : step_process_base P0 P0'",
                    "c2_H : lts P tau_label Q"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "early_bisimilarity_symm",
        "proof": [
            {
                "tactic_sig": "Theorem early_bisimilarity_symm : forall p q , early_bisimilar p q -> early_bisimilar q p .",
                "tactic_sig_no_out_arg": "Theorem early_bisimilarity_symm : forall p q , early_bisimilar p q -> early_bisimilar q p .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (p q : process) (_ : early_bisimilar p q), early_bisimilar q p"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (p q : process) (_ : early_bisimilar p q), early_bisimilar q p"
                ],
                "tactic_res": [
                    "c2_goal : early_bisimilar q p",
                    "c2_p : process",
                    "c2_q : process",
                    "c2_H : early_bisimilar p q"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ R ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ R ] .",
                "tactic_args": [
                    "c2_H : early_bisimilar p q"
                ],
                "tactic_res": [
                    "c2_H : and (early_bisimulation R) (R p q)",
                    "c2_R : forall (_ : process) (_ : process), Prop"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H : early_bisimilar p q"
                ],
                "tactic_res": [
                    "c2_H0 : R p q",
                    "c2_H : early_bisimulation R"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c2_goal : early_bisimilar q p",
                    "_global_early_bisimilar : forall (_ : process) (_ : process), Prop"
                ],
                "tactic_res": [
                    "c3_goal : ex\n  (fun R : forall (_ : process) (_ : process), Prop =>\n   and (early_bisimulation R) (R q p))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c3_goal : ex\n  (fun R : forall (_ : process) (_ : process), Prop =>\n   and (early_bisimulation R) (R q p))",
                    "c2_R : forall (_ : process) (_ : process), Prop"
                ],
                "tactic_res": [
                    "c4_goal : and (early_bisimulation R) (R q p)"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c4_goal : and (early_bisimulation R) (R q p)"
                ],
                "tactic_res": [
                    "c5_goal : early_bisimulation R",
                    "c6_goal : R q p"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c5_goal : early_bisimulation R"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "unfold _i in _i .",
                "tactic_sig_no_out_arg": "unfold _i in _i .",
                "tactic_args": [
                    "_global_early_bisimulation : forall _ : forall (_ : process) (_ : process), Prop, Prop",
                    "c2_H : early_bisimilar p q"
                ],
                "tactic_res": [
                    "c6_H : and (forall (P1 P2 : process) (_ : R P1 P2), R P2 P1)\n  (forall (P1 P1' P2 : process) (l : label) (_ : R P1 P2)\n     (_ : lts P1 l P1'),\n   ex (fun P2' : process => and (lts P2 l P2') (R P1' P2')))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H : early_bisimilar p q"
                ],
                "tactic_res": [
                    "c6_H1 : forall (P1 P1' P2 : process) (l : label) (_ : R P1 P2)\n  (_ : lts P1 l P1'),\nex (fun P2' : process => and (lts P2 l P2') (R P1' P2'))",
                    "c6_H : forall (P1 P2 : process) (_ : R P1 P2), R P2 P1"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c6_goal : R q p",
                    "c2_H : early_bisimilar p q"
                ],
                "tactic_res": [
                    "c7_goal : R p q"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c7_goal : R p q",
                    "c2_H0 : R p q"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "early_bisimilarity_refl",
        "proof": [
            {
                "tactic_sig": "Theorem early_bisimilarity_refl : forall p , early_bisimilar p p .",
                "tactic_sig_no_out_arg": "Theorem early_bisimilarity_refl : forall p , early_bisimilar p p .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall p : process, early_bisimilar p p"
                ]
            },
            {
                "tactic_sig": "intros _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall p : process, early_bisimilar p p"
                ],
                "tactic_res": [
                    "c2_goal : early_bisimilar p p",
                    "c2_p : process"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c2_goal : early_bisimilar p p",
                    "_global_early_bisimilar : forall (_ : process) (_ : process), Prop"
                ],
                "tactic_res": [
                    "c3_goal : ex\n  (fun R : forall (_ : process) (_ : process), Prop =>\n   and (early_bisimulation R) (R p p))"
                ]
            },
            {
                "tactic_sig": "exists ( fun _i q => _i = q ) .",
                "tactic_sig_no_out_arg": "exists ( fun _i q => _i = q ) .",
                "tactic_args": [
                    "c3_goal : ex\n  (fun R : forall (_ : process) (_ : process), Prop =>\n   and (early_bisimulation R) (R p p))",
                    "c2_p : process",
                    "c2_p : process"
                ],
                "tactic_res": [
                    "c4_goal : and (early_bisimulation (fun p q : process => eq p q)) (eq p p)"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c4_goal : and (early_bisimulation (fun p q : process => eq p q)) (eq p p)"
                ],
                "tactic_res": [
                    "c5_goal : early_bisimulation (fun p q : process => eq p q)",
                    "c6_goal : eq p p"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c6_goal : eq p p"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c5_goal : early_bisimulation (fun p q : process => eq p q)",
                    "_global_early_bisimulation : forall _ : forall (_ : process) (_ : process), Prop, Prop"
                ],
                "tactic_res": [
                    "c7_goal : and (forall (P1 P2 : process) (_ : eq P1 P2), eq P2 P1)\n  (forall (P1 P1' P2 : process) (l : label) (_ : eq P1 P2)\n     (_ : lts P1 l P1'),\n   ex (fun P2' : process => and (lts P2 l P2') (eq P1' P2')))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c7_goal : and (forall (P1 P2 : process) (_ : eq P1 P2), eq P2 P1)\n  (forall (P1 P1' P2 : process) (l : label) (_ : eq P1 P2)\n     (_ : lts P1 l P1'),\n   ex (fun P2' : process => and (lts P2 l P2') (eq P1' P2')))"
                ],
                "tactic_res": [
                    "c8_goal : forall (P1 P2 : process) (_ : eq P1 P2), eq P2 P1",
                    "c9_goal : forall (P1 P1' P2 : process) (l : label) (_ : eq P1 P2)\n  (_ : lts P1 l P1'),\nex (fun P2' : process => and (lts P2 l P2') (eq P1' P2'))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c8_goal : forall (P1 P2 : process) (_ : eq P1 P2), eq P2 P1"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c9_goal : forall (P1 P1' P2 : process) (l : label) (_ : eq P1 P2)\n  (_ : lts P1 l P1'),\nex (fun P2' : process => and (lts P2 l P2') (eq P1' P2'))"
                ],
                "tactic_res": [
                    "c10_goal : ex (fun P2' : process => and (lts P2 l P2') (eq P1' P2'))",
                    "c10_P1 : process",
                    "c10_P1' : process",
                    "c10_P2 : process",
                    "c10_l : label",
                    "c10_H : eq P1 P2",
                    "c10_H0 : lts P1 l P1'"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c10_goal : ex (fun P2' : process => and (lts P2 l P2') (eq P1' P2'))"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "early_bisimilarity_trans",
        "proof": [
            {
                "tactic_sig": "Theorem early_bisimilarity_trans : forall p q r , early_bisimilar p q -> early_bisimilar q r -> early_bisimilar p r .",
                "tactic_sig_no_out_arg": "Theorem early_bisimilarity_trans : forall p q r , early_bisimilar p q -> early_bisimilar q r -> early_bisimilar p r .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (p q r : process) (_ : early_bisimilar p q)\n  (_ : early_bisimilar q r), early_bisimilar p r"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (p q r : process) (_ : early_bisimilar p q)\n  (_ : early_bisimilar q r), early_bisimilar p r"
                ],
                "tactic_res": [
                    "c2_goal : early_bisimilar p r",
                    "c2_p : process",
                    "c2_q : process",
                    "c2_r : process",
                    "c2_H : early_bisimilar p q",
                    "c2_H0 : early_bisimilar q r"
                ]
            },
            {
                "tactic_sig": "unfold _i in * .",
                "tactic_sig_no_out_arg": "unfold _i in * .",
                "tactic_args": [
                    "c2_goal : early_bisimilar p r",
                    "_global_early_bisimilar : forall (_ : process) (_ : process), Prop"
                ],
                "tactic_res": [
                    "c3_goal : ex\n  (fun R : forall (_ : process) (_ : process), Prop =>\n   and (early_bisimulation R) (R p r))",
                    "c3_H0 : ex\n  (fun R : forall (_ : process) (_ : process), Prop =>\n   and (early_bisimulation R) (R q r))",
                    "c3_H : ex\n  (fun R : forall (_ : process) (_ : process), Prop =>\n   and (early_bisimulation R) (R p q))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ R1 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ R1 ] .",
                "tactic_args": [
                    "c2_H : early_bisimilar p q"
                ],
                "tactic_res": [
                    "c3_H : and (early_bisimulation R1) (R1 p q)",
                    "c3_R1 : forall (_ : process) (_ : process), Prop"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ R2 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ R2 ] .",
                "tactic_args": [
                    "c2_H0 : early_bisimilar q r"
                ],
                "tactic_res": [
                    "c3_H0 : and (early_bisimulation R2) (R2 q r)",
                    "c3_R2 : forall (_ : process) (_ : process), Prop"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H : early_bisimilar p q"
                ],
                "tactic_res": [
                    "c3_H1 : R1 p q",
                    "c3_H : early_bisimulation R1"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H0 : early_bisimilar q r"
                ],
                "tactic_res": [
                    "c3_H2 : R2 q r",
                    "c3_H0 : early_bisimulation R2"
                ]
            },
            {
                "tactic_sig": "exists ( clos_trans process ( fun _i _i => ( _i _i _i \\/ _i _i _i ) ) ) .",
                "tactic_sig_no_out_arg": "exists ( clos_trans process ( fun _i _i => ( _i _i _i \\/ _i _i _i ) ) ) .",
                "tactic_args": [
                    "c3_goal : ex\n  (fun R : forall (_ : process) (_ : process), Prop =>\n   and (early_bisimulation R) (R p r))",
                    "c2_p : process",
                    "c2_q : process",
                    "c3_R1 : forall (_ : process) (_ : process), Prop",
                    "c2_p : process",
                    "c2_q : process",
                    "c3_R2 : forall (_ : process) (_ : process), Prop",
                    "c2_p : process",
                    "c2_q : process"
                ],
                "tactic_res": [
                    "c4_goal : and\n  (early_bisimulation\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))))\n  (clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) p r)"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c4_goal : and\n  (early_bisimulation\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))))\n  (clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) p r)"
                ],
                "tactic_res": [
                    "c5_goal : early_bisimulation\n  (clos_trans process (fun p q : process => or (R1 p q) (R2 p q)))",
                    "c6_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) p r"
                ]
            },
            {
                "tactic_sig": "unfold _i in * .",
                "tactic_sig_no_out_arg": "unfold _i in * .",
                "tactic_args": [
                    "c5_goal : early_bisimulation\n  (clos_trans process (fun p q : process => or (R1 p q) (R2 p q)))",
                    "_global_early_bisimulation : forall _ : forall (_ : process) (_ : process), Prop, Prop"
                ],
                "tactic_res": [
                    "c7_goal : and\n  (forall (P1 P2 : process)\n     (_ : clos_trans process\n            (fun p q : process => or (R1 p q) (R2 p q)) P1 P2),\n   clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P2 P1)\n  (forall (P1 P1' P2 : process) (l : label)\n     (_ : clos_trans process\n            (fun p q : process => or (R1 p q) (R2 p q)) P1 P2)\n     (_ : lts P1 l P1'),\n   ex\n     (fun P2' : process =>\n      and (lts P2 l P2')\n        (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n           P1' P2')))",
                    "c7_H0 : and (forall (P1 P2 : process) (_ : R2 P1 P2), R2 P2 P1)\n  (forall (P1 P1' P2 : process) (l : label) (_ : R2 P1 P2)\n     (_ : lts P1 l P1'),\n   ex (fun P2' : process => and (lts P2 l P2') (R2 P1' P2')))",
                    "c7_H : and (forall (P1 P2 : process) (_ : R1 P1 P2), R1 P2 P1)\n  (forall (P1 P1' P2 : process) (l : label) (_ : R1 P1 P2)\n     (_ : lts P1 l P1'),\n   ex (fun P2' : process => and (lts P2 l P2') (R1 P1' P2')))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c7_goal : and\n  (forall (P1 P2 : process)\n     (_ : clos_trans process\n            (fun p q : process => or (R1 p q) (R2 p q)) P1 P2),\n   clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P2 P1)\n  (forall (P1 P1' P2 : process) (l : label)\n     (_ : clos_trans process\n            (fun p q : process => or (R1 p q) (R2 p q)) P1 P2)\n     (_ : lts P1 l P1'),\n   ex\n     (fun P2' : process =>\n      and (lts P2 l P2')\n        (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n           P1' P2')))"
                ],
                "tactic_res": [
                    "c8_goal : forall (P1 P2 : process)\n  (_ : clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n         P1 P2),\nclos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P2 P1",
                    "c9_goal : forall (P1 P1' P2 : process) (l : label)\n  (_ : clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n         P1 P2) (_ : lts P1 l P1'),\nex\n  (fun P2' : process =>\n   and (lts P2 l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c8_goal : forall (P1 P2 : process)\n  (_ : clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n         P1 P2),\nclos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P2 P1"
                ],
                "tactic_res": [
                    "c10_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P2 P1",
                    "c10_P1 : process",
                    "c10_P2 : process",
                    "c10_H3 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1 P2"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c10_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P2 P1",
                    "c10_H3 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1 P2"
                ],
                "tactic_res": [
                    "c11_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) y x",
                    "c11_H3 : or (R1 x y) (R2 x y)",
                    "c11_y : process",
                    "c11_x : process",
                    "c12_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) z x",
                    "c12_IHclos_trans2 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) z y",
                    "c12_IHclos_trans1 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) y x",
                    "c12_H3_0 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) y z",
                    "c12_H3_ : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) x y",
                    "c12_z : process",
                    "c12_y : process",
                    "c12_x : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c11_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) y x",
                    "c10_H3 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1 P2"
                ],
                "tactic_res": [
                    "c13_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) y x",
                    "c13_H3 : R1 x y",
                    "c14_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) y x",
                    "c14_H3 : R2 x y"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c13_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) y x",
                    "_global_t_step : forall (A : Type) (R : relation A) (x y : A) (_ : R x y),\n       clos_trans A R x y"
                ],
                "tactic_res": [
                    "c15_goal : or (R1 y x) (R2 y x)"
                ]
            },
            {
                "tactic_sig": "left .",
                "tactic_sig_no_out_arg": "left .",
                "tactic_args": [
                    "c15_goal : or (R1 y x) (R2 y x)"
                ],
                "tactic_res": [
                    "c16_goal : R1 y x"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c16_goal : R1 y x",
                    "c2_H : early_bisimilar p q"
                ],
                "tactic_res": [
                    "c17_goal : R1 x y"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c17_goal : R1 x y"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c14_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) y x",
                    "_global_t_step : forall (A : Type) (R : relation A) (x y : A) (_ : R x y),\n       clos_trans A R x y"
                ],
                "tactic_res": [
                    "c18_goal : or (R1 y x) (R2 y x)"
                ]
            },
            {
                "tactic_sig": "right .",
                "tactic_sig_no_out_arg": "right .",
                "tactic_args": [
                    "c18_goal : or (R1 y x) (R2 y x)"
                ],
                "tactic_res": [
                    "c19_goal : R2 y x"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c19_goal : R2 y x",
                    "c2_H0 : early_bisimilar q r"
                ],
                "tactic_res": [
                    "c20_goal : R2 x y"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c20_goal : R2 x y"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c12_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) z x",
                    "_global_t_trans : forall (A : Type) (R : relation A) (x y z : A)\n         (_ : clos_trans A R x y) (_ : clos_trans A R y z),\n       clos_trans A R x z"
                ],
                "tactic_res": [
                    "c21_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) z ?y",
                    "c22_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) ?y x"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c21_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) z ?y",
                    "c12_IHclos_trans2 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) z y"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c22_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) y x",
                    "c12_IHclos_trans1 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) y x"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c9_goal : forall (P1 P1' P2 : process) (l : label)\n  (_ : clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n         P1 P2) (_ : lts P1 l P1'),\nex\n  (fun P2' : process =>\n   and (lts P2 l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))"
                ],
                "tactic_res": [
                    "c23_goal : ex\n  (fun P2' : process =>\n   and (lts P2 l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c23_P1 : process",
                    "c23_P1' : process",
                    "c23_P2 : process",
                    "c23_l : label",
                    "c23_H3 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1 P2",
                    "c23_H4 : lts P1 l P1'"
                ]
            },
            {
                "tactic_sig": "generalize dependent _i .",
                "tactic_sig_no_out_arg": "generalize dependent _i .",
                "tactic_args": [
                    "c23_goal : ex\n  (fun P2' : process =>\n   and (lts P2 l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c23_P1' : process"
                ],
                "tactic_res": [
                    "c24_goal : forall (P1' : process) (_ : lts P1 l P1'),\nex\n  (fun P2' : process =>\n   and (lts P2 l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c24_goal : forall (P1' : process) (_ : lts P1 l P1'),\nex\n  (fun P2' : process =>\n   and (lts P2 l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c23_H3 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1 P2"
                ],
                "tactic_res": [
                    "c25_goal : forall (P1' : process) (_ : lts x l P1'),\nex\n  (fun P2' : process =>\n   and (lts y l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c25_H3 : or (R1 x y) (R2 x y)",
                    "c25_y : process",
                    "c25_x : process",
                    "c26_goal : forall (P1' : process) (_ : lts x l P1'),\nex\n  (fun P2' : process =>\n   and (lts z l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c26_IHclos_trans2 : forall (P1' : process) (_ : lts y l P1'),\nex\n  (fun P2' : process =>\n   and (lts z l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c26_IHclos_trans1 : forall (P1' : process) (_ : lts x l P1'),\nex\n  (fun P2' : process =>\n   and (lts y l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c26_H3_0 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) y z",
                    "c26_H3_ : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) x y",
                    "c26_z : process",
                    "c26_y : process",
                    "c26_x : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c25_goal : forall (P1' : process) (_ : lts x l P1'),\nex\n  (fun P2' : process =>\n   and (lts y l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c23_H3 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1 P2"
                ],
                "tactic_res": [
                    "c27_goal : forall (P1' : process) (_ : lts x l P1'),\nex\n  (fun P2' : process =>\n   and (lts y l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c27_H3 : R1 x y",
                    "c28_goal : forall (P1' : process) (_ : lts x l P1'),\nex\n  (fun P2' : process =>\n   and (lts y l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c28_H3 : R2 x y"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H : early_bisimilar p q"
                ],
                "tactic_res": [
                    "c27_H4 : forall (P1 P1' P2 : process) (l : label) (_ : R1 P1 P2)\n  (_ : lts P1 l P1'),\nex (fun P2' : process => and (lts P2 l P2') (R1 P1' P2'))",
                    "c27_H : forall (P1 P2 : process) (_ : R1 P1 P2), R1 P2 P1"
                ]
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c27_goal : forall (P1' : process) (_ : lts x l P1'),\nex\n  (fun P2' : process =>\n   and (lts y l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))"
                ],
                "tactic_res": [
                    "c29_goal : ex\n  (fun P2' : process =>\n   and (lts y l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c29_P1' : process",
                    "c29_H5 : lts x l P1'"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c29_goal : ex\n  (fun P2' : process =>\n   and (lts y l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c23_H4 : lts P1 l P1'",
                    "c29_H5 : lts x l P1'"
                ],
                "tactic_res": [
                    "c30_goal : ex\n  (fun P2' : process =>\n   and (lts y l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c30_H5 : ex (fun P2' : process => and (lts ?P2 l P2') (R1 P1' P2'))",
                    "c31_goal : R1 x ?P2"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c29_H5 : lts x l P1'"
                ],
                "tactic_res": [
                    "c30_H5 : and (lts ?P2 l x0) (R1 P1' x0)",
                    "c30_x0 : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c30_goal : ex\n  (fun P2' : process =>\n   and (lts y l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c30_x0 : process"
                ],
                "tactic_res": [
                    "c32_goal : and (lts y l x0)\n  (clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1'\n     x0)"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c32_goal : and (lts y l x0)\n  (clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1'\n     x0)"
                ],
                "tactic_res": [
                    "c33_goal : lts y l x0",
                    "c34_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1' x0"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c29_H5 : lts x l P1'"
                ],
                "tactic_res": [
                    "c33_H6 : R1 P1' x0",
                    "c33_H5 : lts ?P2 l x0"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c33_goal : lts y l x0",
                    "c29_H5 : lts x l P1'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c34_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1' x0",
                    "_global_t_step : forall (A : Type) (R : relation A) (x y : A) (_ : R x y),\n       clos_trans A R x y"
                ],
                "tactic_res": [
                    "c35_goal : or (R1 P1' x0) (R2 P1' x0)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c29_H5 : lts x l P1'"
                ],
                "tactic_res": [
                    "c35_H6 : R1 P1' x0",
                    "c35_H5 : lts y l x0"
                ]
            },
            {
                "tactic_sig": "left .",
                "tactic_sig_no_out_arg": "left .",
                "tactic_args": [
                    "c35_goal : or (R1 P1' x0) (R2 P1' x0)"
                ],
                "tactic_res": [
                    "c36_goal : R1 P1' x0"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c36_goal : R1 P1' x0",
                    "c33_H6 : R1 P1' x0"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c31_goal : R1 x y",
                    "c23_H3 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1 P2"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c28_goal : forall (P1' : process) (_ : lts x l P1'),\nex\n  (fun P2' : process =>\n   and (lts y l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))"
                ],
                "tactic_res": [
                    "c37_goal : ex\n  (fun P2' : process =>\n   and (lts y l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c37_P1' : process",
                    "c37_H4 : lts x l P1'"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c37_goal : ex\n  (fun P2' : process =>\n   and (lts y l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c2_H0 : early_bisimilar q r",
                    "c23_H4 : lts P1 l P1'"
                ],
                "tactic_res": [
                    "c38_goal : ex\n  (fun P2' : process =>\n   and (lts y l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c38_H4 : ex (fun P2' : process => and (lts ?P2 l P2') (R2 P1' P2'))",
                    "c39_goal : R2 x ?P2",
                    "c39_H5 : forall (P1 P1' P2 : process) (l : label) (_ : R2 P1 P2)\n  (_ : lts P1 l P1'),\nex (fun P2' : process => and (lts P2 l P2') (R2 P1' P2'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c23_H4 : lts P1 l P1'"
                ],
                "tactic_res": [
                    "c38_H4 : and (lts ?P2 l x0) (R2 P1' x0)",
                    "c38_x0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c23_H4 : lts P1 l P1'"
                ],
                "tactic_res": [
                    "c38_H5 : R2 P1' x0",
                    "c38_H4 : lts ?P2 l x0"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c38_goal : ex\n  (fun P2' : process =>\n   and (lts y l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c38_x0 : process"
                ],
                "tactic_res": [
                    "c40_goal : and (lts y l x0)\n  (clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1'\n     x0)"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c40_goal : and (lts y l x0)\n  (clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1'\n     x0)"
                ],
                "tactic_res": [
                    "c41_goal : lts y l x0",
                    "c42_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1' x0"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c41_goal : lts y l x0",
                    "c23_H4 : lts P1 l P1'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c42_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1' x0",
                    "_global_t_step : forall (A : Type) (R : relation A) (x y : A) (_ : R x y),\n       clos_trans A R x y"
                ],
                "tactic_res": [
                    "c43_goal : or (R1 P1' x0) (R2 P1' x0)"
                ]
            },
            {
                "tactic_sig": "right .",
                "tactic_sig_no_out_arg": "right .",
                "tactic_args": [
                    "c43_goal : or (R1 P1' x0) (R2 P1' x0)"
                ],
                "tactic_res": [
                    "c44_goal : R2 P1' x0"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c44_goal : R2 P1' x0",
                    "c39_H5 : forall (P1 P1' P2 : process) (l : label) (_ : R2 P1 P2)\n  (_ : lts P1 l P1'),\nex (fun P2' : process => and (lts P2 l P2') (R2 P1' P2'))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c39_goal : R2 x y",
                    "c23_H3 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1 P2"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c26_goal : forall (P1' : process) (_ : lts x l P1'),\nex\n  (fun P2' : process =>\n   and (lts z l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))"
                ],
                "tactic_res": [
                    "c45_goal : ex\n  (fun P2' : process =>\n   and (lts z l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c45_P1' : process",
                    "c45_H4 : lts x l P1'"
                ]
            },
            {
                "tactic_sig": "apply _i in _i .",
                "tactic_sig_no_out_arg": "apply _i in _i .",
                "tactic_args": [
                    "c26_IHclos_trans1 : forall (P1' : process) (_ : lts x l P1'),\nex\n  (fun P2' : process =>\n   and (lts y l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c23_H4 : lts P1 l P1'"
                ],
                "tactic_res": [
                    "c45_H4 : ex\n  (fun P2' : process =>\n   and (lts y l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c23_H4 : lts P1 l P1'"
                ],
                "tactic_res": [
                    "c45_H3 : and (lts y l x0)\n  (clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1'\n     x0)",
                    "c45_x0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c23_H3 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1 P2"
                ],
                "tactic_res": [
                    "c45_H4 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1' x0",
                    "c45_H3 : lts y l x0"
                ]
            },
            {
                "tactic_sig": "apply _i in _i .",
                "tactic_sig_no_out_arg": "apply _i in _i .",
                "tactic_args": [
                    "c26_IHclos_trans2 : forall (P1' : process) (_ : lts y l P1'),\nex\n  (fun P2' : process =>\n   and (lts z l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c23_H3 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1 P2"
                ],
                "tactic_res": [
                    "c45_H3 : ex\n  (fun P2' : process =>\n   and (lts z l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) x0\n        P2'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c23_H3 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1 P2"
                ],
                "tactic_res": [
                    "c45_H3 : and (lts z l x1)\n  (clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) x0 x1)",
                    "c45_x1 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c23_H3 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1 P2"
                ],
                "tactic_res": [
                    "c45_H5 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) x0 x1",
                    "c45_H3 : lts z l x1"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c45_goal : ex\n  (fun P2' : process =>\n   and (lts z l P2')\n     (clos_trans process (fun p q : process => or (R1 p q) (R2 p q))\n        P1' P2'))",
                    "c45_x1 : process"
                ],
                "tactic_res": [
                    "c46_goal : and (lts z l x1)\n  (clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1'\n     x1)"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c46_goal : and (lts z l x1)\n  (clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1'\n     x1)"
                ],
                "tactic_res": [
                    "c47_goal : lts z l x1",
                    "c48_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1' x1"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c47_goal : lts z l x1",
                    "c23_H3 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1 P2"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c48_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1' x1",
                    "_global_t_trans : forall (A : Type) (R : relation A) (x y z : A)\n         (_ : clos_trans A R x y) (_ : clos_trans A R y z),\n       clos_trans A R x z"
                ],
                "tactic_res": [
                    "c49_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1' ?y",
                    "c50_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) ?y x1"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c49_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) P1' ?y",
                    "c23_H4 : lts P1 l P1'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c50_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) x0 x1",
                    "c45_H5 : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) x0 x1"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c6_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) p r",
                    "_global_t_trans : forall (A : Type) (R : relation A) (x y z : A)\n         (_ : clos_trans A R x y) (_ : clos_trans A R y z),\n       clos_trans A R x z"
                ],
                "tactic_res": [
                    "c51_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) p ?y",
                    "c52_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) ?y r"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c51_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) p ?y",
                    "_global_t_step : forall (A : Type) (R : relation A) (x y : A) (_ : R x y),\n       clos_trans A R x y"
                ],
                "tactic_res": [
                    "c53_goal : or (R1 p ?y) (R2 p ?y)"
                ]
            },
            {
                "tactic_sig": "left .",
                "tactic_sig_no_out_arg": "left .",
                "tactic_args": [
                    "c53_goal : or (R1 p ?y) (R2 p ?y)"
                ],
                "tactic_res": [
                    "c54_goal : R1 p ?y"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c54_goal : R1 p ?y",
                    "c3_H1 : R1 p q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c52_goal : clos_trans process (fun p q : process => or (R1 p q) (R2 p q)) q r",
                    "_global_t_step : forall (A : Type) (R : relation A) (x y : A) (_ : R x y),\n       clos_trans A R x y"
                ],
                "tactic_res": [
                    "c55_goal : or (R1 q r) (R2 q r)"
                ]
            },
            {
                "tactic_sig": "right .",
                "tactic_sig_no_out_arg": "right .",
                "tactic_args": [
                    "c55_goal : or (R1 q r) (R2 q r)"
                ],
                "tactic_res": [
                    "c56_goal : R2 q r"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c56_goal : R2 q r",
                    "c3_H2 : R2 q r"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "progresses_subset_left",
        "proof": [
            {
                "tactic_sig": "Theorem progresses_subset_left : forall R S T , subset R S -> progresses S T -> progresses R T .",
                "tactic_sig_no_out_arg": "Theorem progresses_subset_left : forall R S T , subset R S -> progresses S T -> progresses R T .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (R S : relation) (T : forall (_ : process) (_ : process), Prop)\n  (_ : subset R S) (_ : progresses S T), progresses R T"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (R S : relation) (T : forall (_ : process) (_ : process), Prop)\n  (_ : subset R S) (_ : progresses S T), progresses R T"
                ],
                "tactic_res": [
                    "c2_goal : progresses R T",
                    "c2_R : relation",
                    "c2_S : relation",
                    "c2_T : forall (_ : process) (_ : process), Prop",
                    "c2_H : subset R S",
                    "c2_H0 : progresses S T"
                ]
            },
            {
                "tactic_sig": "unfold _i in * .",
                "tactic_sig_no_out_arg": "unfold _i in * .",
                "tactic_args": [
                    "c2_goal : progresses R T",
                    "_global_progresses : forall (_ : relation) (_ : forall (_ : process) (_ : process), Prop),\n       Prop"
                ],
                "tactic_res": [
                    "c3_goal : and\n  (forall (P Q : process) (l : Semantics.label) (Q' : process)\n     (_ : Semantics.lts Q l Q') (_ : R P Q),\n   ex (fun P' : process => and (Semantics.lts P l P') (T P' Q')))\n  (forall (P Q : process) (l : Semantics.label) (P' : process)\n     (_ : Semantics.lts P l P') (_ : R P Q),\n   ex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q')))",
                    "c3_H0 : and\n  (forall (P Q : process) (l : Semantics.label) (Q' : process)\n     (_ : Semantics.lts Q l Q') (_ : S P Q),\n   ex (fun P' : process => and (Semantics.lts P l P') (T P' Q')))\n  (forall (P Q : process) (l : Semantics.label) (P' : process)\n     (_ : Semantics.lts P l P') (_ : S P Q),\n   ex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q')))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c3_goal : and\n  (forall (P Q : process) (l : Semantics.label) (Q' : process)\n     (_ : Semantics.lts Q l Q') (_ : R P Q),\n   ex (fun P' : process => and (Semantics.lts P l P') (T P' Q')))\n  (forall (P Q : process) (l : Semantics.label) (P' : process)\n     (_ : Semantics.lts P l P') (_ : R P Q),\n   ex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q')))"
                ],
                "tactic_res": [
                    "c4_goal : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : R P Q),\nex (fun P' : process => and (Semantics.lts P l P') (T P' Q'))",
                    "c5_goal : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : R P Q),\nex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H0 : progresses S T"
                ],
                "tactic_res": [
                    "c4_H1 : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : S P Q),\nex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q'))",
                    "c4_H0 : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : S P Q),\nex (fun P' : process => and (Semantics.lts P l P') (T P' Q'))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c4_goal : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : R P Q),\nex (fun P' : process => and (Semantics.lts P l P') (T P' Q'))"
                ],
                "tactic_res": [
                    "c6_goal : ex (fun P' : process => and (Semantics.lts P l P') (T P' Q'))",
                    "c6_P : process",
                    "c6_Q : process",
                    "c6_l : label",
                    "c6_Q' : process",
                    "c6_H2 : Semantics.lts Q l Q'",
                    "c6_H3 : R P Q"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c6_goal : ex (fun P' : process => and (Semantics.lts P l P') (T P' Q'))",
                    "c2_H0 : progresses S T",
                    "c6_H2 : Semantics.lts Q l Q'"
                ],
                "tactic_res": [
                    "c7_goal : ex (fun P' : process => and (Semantics.lts P l P') (T P' Q'))",
                    "c7_H2 : ex (fun P' : process => and (Semantics.lts ?P l P') (T P' Q'))",
                    "c8_goal : S ?P Q"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q'0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q'0 ] .",
                "tactic_args": [
                    "c6_H2 : Semantics.lts Q l Q'"
                ],
                "tactic_res": [
                    "c7_H2 : and (Semantics.lts ?P l Q'0) (T Q'0 Q')",
                    "c7_Q'0 : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c7_goal : ex (fun P' : process => and (Semantics.lts P l P') (T P' Q'))",
                    "c7_Q'0 : process"
                ],
                "tactic_res": [
                    "c9_goal : and (Semantics.lts P l Q'0) (T Q'0 Q')"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c9_goal : and (Semantics.lts P l Q'0) (T Q'0 Q')"
                ],
                "tactic_res": [
                    "c10_goal : Semantics.lts P l Q'0",
                    "c11_goal : T Q'0 Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c10_goal : Semantics.lts P l Q'0",
                    "c6_H2 : Semantics.lts Q l Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c11_goal : T Q'0 Q'",
                    "c6_H2 : Semantics.lts Q l Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c8_goal : S P Q",
                    "c2_H : subset R S"
                ],
                "tactic_res": [
                    "c12_goal : R P Q"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c12_goal : R P Q",
                    "c6_H3 : R P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H0 : progresses S T"
                ],
                "tactic_res": [
                    "c5_H1 : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : S P Q),\nex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q'))",
                    "c5_H0 : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : S P Q),\nex (fun P' : process => and (Semantics.lts P l P') (T P' Q'))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c5_goal : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : R P Q),\nex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q'))"
                ],
                "tactic_res": [
                    "c13_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q'))",
                    "c13_P : process",
                    "c13_Q : process",
                    "c13_l : label",
                    "c13_P' : process",
                    "c13_H2 : Semantics.lts P l P'",
                    "c13_H3 : R P Q"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c13_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q'))",
                    "c4_H1 : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : S P Q),\nex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q'))",
                    "c13_H2 : Semantics.lts P l P'"
                ],
                "tactic_res": [
                    "c14_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q'))",
                    "c14_H2 : ex (fun Q' : process => and (Semantics.lts ?Q l Q') (T P' Q'))",
                    "c15_goal : S P ?Q"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q'0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q'0 ] .",
                "tactic_args": [
                    "c13_H2 : Semantics.lts P l P'"
                ],
                "tactic_res": [
                    "c14_H2 : and (Semantics.lts ?Q l Q'0) (T P' Q'0)",
                    "c14_Q'0 : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c14_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q'))",
                    "c14_Q'0 : process"
                ],
                "tactic_res": [
                    "c16_goal : and (Semantics.lts Q l Q'0) (T P' Q'0)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c16_goal : and (Semantics.lts Q l Q'0) (T P' Q'0)",
                    "c13_H2 : Semantics.lts P l P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c15_goal : S P Q",
                    "c2_H : subset R S"
                ],
                "tactic_res": [
                    "c17_goal : R P Q"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c17_goal : R P Q",
                    "c13_H3 : R P Q"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "progresses_subset_right",
        "proof": [
            {
                "tactic_sig": "Theorem progresses_subset_right : forall R S T , subset S T -> progresses R S -> progresses R T .",
                "tactic_sig_no_out_arg": "Theorem progresses_subset_right : forall R S T , subset S T -> progresses R S -> progresses R T .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (R S T : relation) (_ : subset S T) (_ : progresses R S),\nprogresses R T"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (R S T : relation) (_ : subset S T) (_ : progresses R S),\nprogresses R T"
                ],
                "tactic_res": [
                    "c2_goal : progresses R T",
                    "c2_R : relation",
                    "c2_S : relation",
                    "c2_T : relation",
                    "c2_H : subset S T",
                    "c2_H0 : progresses R S"
                ]
            },
            {
                "tactic_sig": "unfold _i in * .",
                "tactic_sig_no_out_arg": "unfold _i in * .",
                "tactic_args": [
                    "c2_goal : progresses R T",
                    "_global_progresses : forall (_ : relation) (_ : forall (_ : process) (_ : process), Prop),\n       Prop"
                ],
                "tactic_res": [
                    "c3_goal : and\n  (forall (P Q : process) (l : Semantics.label) (Q' : process)\n     (_ : Semantics.lts Q l Q') (_ : R P Q),\n   ex (fun P' : process => and (Semantics.lts P l P') (T P' Q')))\n  (forall (P Q : process) (l : Semantics.label) (P' : process)\n     (_ : Semantics.lts P l P') (_ : R P Q),\n   ex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q')))",
                    "c3_H0 : and\n  (forall (P Q : process) (l : Semantics.label) (Q' : process)\n     (_ : Semantics.lts Q l Q') (_ : R P Q),\n   ex (fun P' : process => and (Semantics.lts P l P') (S P' Q')))\n  (forall (P Q : process) (l : Semantics.label) (P' : process)\n     (_ : Semantics.lts P l P') (_ : R P Q),\n   ex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q')))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c3_goal : and\n  (forall (P Q : process) (l : Semantics.label) (Q' : process)\n     (_ : Semantics.lts Q l Q') (_ : R P Q),\n   ex (fun P' : process => and (Semantics.lts P l P') (T P' Q')))\n  (forall (P Q : process) (l : Semantics.label) (P' : process)\n     (_ : Semantics.lts P l P') (_ : R P Q),\n   ex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q')))"
                ],
                "tactic_res": [
                    "c4_goal : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : R P Q),\nex (fun P' : process => and (Semantics.lts P l P') (T P' Q'))",
                    "c5_goal : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : R P Q),\nex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H0 : progresses R S"
                ],
                "tactic_res": [
                    "c4_H1 : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : R P Q),\nex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q'))",
                    "c4_H0 : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : R P Q),\nex (fun P' : process => and (Semantics.lts P l P') (S P' Q'))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c4_goal : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : R P Q),\nex (fun P' : process => and (Semantics.lts P l P') (T P' Q'))"
                ],
                "tactic_res": [
                    "c6_goal : ex (fun P' : process => and (Semantics.lts P l P') (T P' Q'))",
                    "c6_P : process",
                    "c6_Q : process",
                    "c6_l : label",
                    "c6_Q' : process",
                    "c6_H2 : Semantics.lts Q l Q'",
                    "c6_H3 : R P Q"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c6_goal : ex (fun P' : process => and (Semantics.lts P l P') (T P' Q'))",
                    "c2_H0 : progresses R S",
                    "c6_H2 : Semantics.lts Q l Q'"
                ],
                "tactic_res": [
                    "c7_goal : ex (fun P' : process => and (Semantics.lts P l P') (T P' Q'))",
                    "c7_H2 : ex (fun P' : process => and (Semantics.lts ?P l P') (S P' Q'))",
                    "c8_goal : R ?P Q"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ P' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P' ] .",
                "tactic_args": [
                    "c6_H2 : Semantics.lts Q l Q'"
                ],
                "tactic_res": [
                    "c7_H2 : and (Semantics.lts ?P l P') (S P' Q')",
                    "c7_P' : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c7_goal : ex (fun P' : process => and (Semantics.lts P l P') (T P' Q'))",
                    "c7_P' : process"
                ],
                "tactic_res": [
                    "c9_goal : and (Semantics.lts P l P') (T P' Q')"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c9_goal : and (Semantics.lts P l P') (T P' Q')"
                ],
                "tactic_res": [
                    "c10_goal : Semantics.lts P l P'",
                    "c11_goal : T P' Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c10_goal : Semantics.lts P l P'",
                    "c6_H2 : Semantics.lts Q l Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c11_goal : T P' Q'",
                    "c2_H : subset S T"
                ],
                "tactic_res": [
                    "c12_goal : S P' Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c12_goal : S P' Q'",
                    "c6_H2 : Semantics.lts Q l Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c8_goal : R P Q",
                    "c6_H3 : R P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H0 : progresses R S"
                ],
                "tactic_res": [
                    "c5_H1 : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : R P Q),\nex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q'))",
                    "c5_H0 : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : R P Q),\nex (fun P' : process => and (Semantics.lts P l P') (S P' Q'))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c5_goal : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : R P Q),\nex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q'))"
                ],
                "tactic_res": [
                    "c13_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q'))",
                    "c13_P : process",
                    "c13_Q : process",
                    "c13_l : label",
                    "c13_P' : process",
                    "c13_H2 : Semantics.lts P l P'",
                    "c13_H3 : R P Q"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c13_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q'))",
                    "c4_H1 : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : R P Q),\nex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q'))",
                    "c13_H2 : Semantics.lts P l P'"
                ],
                "tactic_res": [
                    "c14_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q'))",
                    "c14_H2 : ex (fun Q' : process => and (Semantics.lts ?Q l Q') (S P' Q'))",
                    "c15_goal : R P ?Q"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q' ] .",
                "tactic_args": [
                    "c13_H2 : Semantics.lts P l P'"
                ],
                "tactic_res": [
                    "c14_H2 : and (Semantics.lts ?Q l Q') (S P' Q')",
                    "c14_Q' : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c14_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (T P' Q'))",
                    "c14_Q' : process"
                ],
                "tactic_res": [
                    "c16_goal : and (Semantics.lts Q l Q') (T P' Q')"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c16_goal : and (Semantics.lts Q l Q') (T P' Q')"
                ],
                "tactic_res": [
                    "c17_goal : Semantics.lts Q l Q'",
                    "c18_goal : T P' Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c17_goal : Semantics.lts Q l Q'",
                    "c13_H2 : Semantics.lts P l P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c18_goal : T P' Q'",
                    "c2_H : subset S T"
                ],
                "tactic_res": [
                    "c19_goal : S P' Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c19_goal : S P' Q'",
                    "c13_H2 : Semantics.lts P l P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c15_goal : R P Q",
                    "c13_H3 : R P Q"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "apply_n_symm",
        "proof": [
            {
                "tactic_sig": "Lemma apply_n_symm : forall n R F , symmetric R -> preserves_symm F -> symmetric ( apply_n n R F ) .",
                "tactic_sig_no_out_arg": "Lemma apply_n_symm : forall n R F , symmetric R -> preserves_symm F -> symmetric ( apply_n n R F ) .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (n : nat) (R : relation) (F : forall _ : relation, relation)\n  (_ : symmetric R) (_ : preserves_symm F), symmetric (apply_n n R F)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (n : nat) (R : relation) (F : forall _ : relation, relation)\n  (_ : symmetric R) (_ : preserves_symm F), symmetric (apply_n n R F)"
                ],
                "tactic_res": [
                    "c2_goal : symmetric (apply_n n R F)",
                    "c2_n : nat",
                    "c2_R : relation",
                    "c2_F : forall _ : relation, relation",
                    "c2_H : symmetric R",
                    "c2_H0 : preserves_symm F"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c2_goal : symmetric (apply_n n R F)",
                    "c2_n : nat"
                ],
                "tactic_res": [
                    "c3_goal : symmetric (apply_n 0 R F)",
                    "c4_goal : symmetric (apply_n (S n) R F)",
                    "c4_IHn : symmetric (apply_n n R F)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c3_goal : symmetric (apply_n 0 R F)"
                ],
                "tactic_res": [
                    "c5_goal : symmetric R"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c5_goal : symmetric R"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c4_goal : symmetric (apply_n (S n) R F)"
                ],
                "tactic_res": [
                    "c6_goal : symmetric\n  (fun P Q : process => or (apply_n n R F P Q) (F (apply_n n R F) P Q))"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c6_goal : symmetric\n  (fun P Q : process => or (apply_n n R F P Q) (F (apply_n n R F) P Q))",
                    "_global_symmetric : forall _ : relation, Prop"
                ],
                "tactic_res": [
                    "c7_goal : forall (P Q : process)\n  (_ : or (apply_n n R F P Q) (F (apply_n n R F) P Q)),\nor (apply_n n R F Q P) (F (apply_n n R F) Q P)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c7_goal : forall (P Q : process)\n  (_ : or (apply_n n R F P Q) (F (apply_n n R F) P Q)),\nor (apply_n n R F Q P) (F (apply_n n R F) Q P)"
                ],
                "tactic_res": [
                    "c8_goal : or (apply_n n R F Q P) (F (apply_n n R F) Q P)",
                    "c8_P : process",
                    "c8_Q : process",
                    "c8_H1 : or (apply_n n R F P Q) (F (apply_n n R F) P Q)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c8_goal : or (apply_n n R F Q P) (F (apply_n n R F) Q P)",
                    "c8_H1 : or (apply_n n R F P Q) (F (apply_n n R F) P Q)"
                ],
                "tactic_res": [
                    "c9_goal : or (apply_n n R F Q P) (F (apply_n n R F) Q P)",
                    "c9_H1 : apply_n n R F P Q",
                    "c10_goal : or (apply_n n R F Q P) (F (apply_n n R F) Q P)",
                    "c10_H1 : F (apply_n n R F) P Q"
                ]
            },
            {
                "tactic_sig": "left .",
                "tactic_sig_no_out_arg": "left .",
                "tactic_args": [
                    "c9_goal : or (apply_n n R F Q P) (F (apply_n n R F) Q P)"
                ],
                "tactic_res": [
                    "c11_goal : apply_n n R F Q P"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c11_goal : apply_n n R F Q P"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "right .",
                "tactic_sig_no_out_arg": "right .",
                "tactic_args": [
                    "c10_goal : or (apply_n n R F Q P) (F (apply_n n R F) Q P)"
                ],
                "tactic_res": [
                    "c12_goal : F (apply_n n R F) Q P"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c2_H0 : preserves_symm F",
                    "c4_IHn : symmetric (apply_n n R F)"
                ],
                "tactic_res": [
                    "c12_IHn : symmetric (F (apply_n n R F))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c12_goal : F (apply_n n R F) Q P"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "apply_n_subset",
        "proof": [
            {
                "tactic_sig": "Lemma apply_n_subset : forall R F n , subset ( apply_n n R F ) ( apply_n ( S n ) R F ) .",
                "tactic_sig_no_out_arg": "Lemma apply_n_subset : forall R F n , subset ( apply_n n R F ) ( apply_n ( S n ) R F ) .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (R : forall (_ : process) (_ : process), Prop)\n  (F : forall _ : relation, relation) (n : nat),\nsubset (apply_n n R F) (apply_n (S n) R F)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (R : forall (_ : process) (_ : process), Prop)\n  (F : forall _ : relation, relation) (n : nat),\nsubset (apply_n n R F) (apply_n (S n) R F)"
                ],
                "tactic_res": [
                    "c2_goal : subset (apply_n n R F) (apply_n (S n) R F)",
                    "c2_R : forall (_ : process) (_ : process), Prop",
                    "c2_F : forall _ : relation, relation",
                    "c2_n : nat"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c2_goal : subset (apply_n n R F) (apply_n (S n) R F)"
                ],
                "tactic_res": [
                    "c3_goal : subset (apply_n n R F)\n  (fun P Q : process => or (apply_n n R F P Q) (F (apply_n n R F) P Q))"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c3_goal : subset (apply_n n R F)\n  (fun P Q : process => or (apply_n n R F P Q) (F (apply_n n R F) P Q))",
                    "_global_subset : forall (_ : relation) (_ : relation), Prop"
                ],
                "tactic_res": [
                    "c4_goal : forall (P Q : process) (_ : apply_n n R F P Q),\nor (apply_n n R F P Q) (F (apply_n n R F) P Q)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c4_goal : forall (P Q : process) (_ : apply_n n R F P Q),\nor (apply_n n R F P Q) (F (apply_n n R F) P Q)"
                ],
                "tactic_res": [
                    "c5_goal : or (apply_n n R F P Q) (F (apply_n n R F) P Q)",
                    "c5_P : process",
                    "c5_Q : process",
                    "c5_H : apply_n n R F P Q"
                ]
            },
            {
                "tactic_sig": "left .",
                "tactic_sig_no_out_arg": "left .",
                "tactic_args": [
                    "c5_goal : or (apply_n n R F P Q) (F (apply_n n R F) P Q)"
                ],
                "tactic_res": [
                    "c6_goal : apply_n n R F P Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c6_goal : apply_n n R F P Q",
                    "c5_H : apply_n n R F P Q"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "progresses_union",
        "proof": [
            {
                "tactic_sig": "Lemma progresses_union : forall R1 R2 S , progresses R1 S -> progresses R2 S -> progresses ( fun P Q => R1 P Q \\/ R2 P Q ) S .",
                "tactic_sig_no_out_arg": "Lemma progresses_union : forall R1 R2 S , progresses R1 S -> progresses R2 S -> progresses ( fun P Q => R1 P Q \\/ R2 P Q ) S .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (R1 R2 : relation)\n  (S : forall (_ : process) (_ : process), Prop) (_ : progresses R1 S)\n  (_ : progresses R2 S),\nprogresses (fun P Q : process => or (R1 P Q) (R2 P Q)) S"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (R1 R2 : relation)\n  (S : forall (_ : process) (_ : process), Prop) (_ : progresses R1 S)\n  (_ : progresses R2 S),\nprogresses (fun P Q : process => or (R1 P Q) (R2 P Q)) S"
                ],
                "tactic_res": [
                    "c2_goal : progresses (fun P Q : process => or (R1 P Q) (R2 P Q)) S",
                    "c2_R1 : relation",
                    "c2_R2 : relation",
                    "c2_S : forall (_ : process) (_ : process), Prop",
                    "c2_H : progresses R1 S",
                    "c2_H0 : progresses R2 S"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c2_goal : progresses (fun P Q : process => or (R1 P Q) (R2 P Q)) S",
                    "_global_progresses : forall (_ : relation) (_ : forall (_ : process) (_ : process), Prop),\n       Prop"
                ],
                "tactic_res": [
                    "c3_goal : and\n  (forall (P Q : process) (l : Semantics.label) (Q' : process)\n     (_ : Semantics.lts Q l Q') (_ : or (R1 P Q) (R2 P Q)),\n   ex (fun P' : process => and (Semantics.lts P l P') (S P' Q')))\n  (forall (P Q : process) (l : Semantics.label) (P' : process)\n     (_ : Semantics.lts P l P') (_ : or (R1 P Q) (R2 P Q)),\n   ex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q')))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c3_goal : and\n  (forall (P Q : process) (l : Semantics.label) (Q' : process)\n     (_ : Semantics.lts Q l Q') (_ : or (R1 P Q) (R2 P Q)),\n   ex (fun P' : process => and (Semantics.lts P l P') (S P' Q')))\n  (forall (P Q : process) (l : Semantics.label) (P' : process)\n     (_ : Semantics.lts P l P') (_ : or (R1 P Q) (R2 P Q)),\n   ex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q')))"
                ],
                "tactic_res": [
                    "c4_goal : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : or (R1 P Q) (R2 P Q)),\nex (fun P' : process => and (Semantics.lts P l P') (S P' Q'))",
                    "c5_goal : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : or (R1 P Q) (R2 P Q)),\nex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q'))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c4_goal : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : or (R1 P Q) (R2 P Q)),\nex (fun P' : process => and (Semantics.lts P l P') (S P' Q'))"
                ],
                "tactic_res": [
                    "c6_goal : ex (fun P' : process => and (Semantics.lts P l P') (S P' Q'))",
                    "c6_P : process",
                    "c6_Q : process",
                    "c6_l : label",
                    "c6_Q' : process",
                    "c6_H1 : Semantics.lts Q l Q'",
                    "c6_H2 : or (R1 P Q) (R2 P Q)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ _i _ ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ _i _ ] .",
                "tactic_args": [
                    "c2_H : progresses R1 S",
                    "c2_H : progresses R1 S"
                ],
                "tactic_res": [
                    "c6_H : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : R1 P Q),\nex (fun P' : process => and (Semantics.lts P l P') (S P' Q'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ _i _ ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ _i _ ] .",
                "tactic_args": [
                    "c2_H0 : progresses R2 S",
                    "c2_H0 : progresses R2 S"
                ],
                "tactic_res": [
                    "c6_H0 : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : R2 P Q),\nex (fun P' : process => and (Semantics.lts P l P') (S P' Q'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c6_goal : ex (fun P' : process => and (Semantics.lts P l P') (S P' Q'))",
                    "c6_H2 : or (R1 P Q) (R2 P Q)"
                ],
                "tactic_res": [
                    "c7_goal : ex (fun P' : process => and (Semantics.lts P l P') (S P' Q'))",
                    "c7_H2 : R1 P Q",
                    "c8_goal : ex (fun P' : process => and (Semantics.lts P l P') (S P' Q'))",
                    "c8_H2 : R2 P Q"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c7_goal : ex (fun P' : process => and (Semantics.lts P l P') (S P' Q'))",
                    "c2_H : progresses R1 S",
                    "c6_H1 : Semantics.lts Q l Q'"
                ],
                "tactic_res": [
                    "c9_goal : ex (fun P' : process => and (Semantics.lts P l P') (S P' Q'))",
                    "c9_H1 : ex (fun P' : process => and (Semantics.lts ?P l P') (S P' Q'))",
                    "c10_goal : R1 ?P Q"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c9_goal : ex (fun P' : process => and (Semantics.lts P l P') (S P' Q'))",
                    "c6_H1 : Semantics.lts Q l Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c10_goal : R1 P Q",
                    "c6_H2 : or (R1 P Q) (R2 P Q)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c8_goal : ex (fun P' : process => and (Semantics.lts P l P') (S P' Q'))",
                    "c2_H0 : progresses R2 S",
                    "c6_H1 : Semantics.lts Q l Q'"
                ],
                "tactic_res": [
                    "c11_goal : ex (fun P' : process => and (Semantics.lts P l P') (S P' Q'))",
                    "c11_H1 : ex (fun P' : process => and (Semantics.lts ?P l P') (S P' Q'))",
                    "c12_goal : R2 ?P Q"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c11_goal : ex (fun P' : process => and (Semantics.lts P l P') (S P' Q'))",
                    "c6_H1 : Semantics.lts Q l Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c12_goal : R2 P Q",
                    "c6_H2 : or (R1 P Q) (R2 P Q)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c5_goal : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : or (R1 P Q) (R2 P Q)),\nex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q'))"
                ],
                "tactic_res": [
                    "c13_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q'))",
                    "c13_P : process",
                    "c13_Q : process",
                    "c13_l : label",
                    "c13_P' : process",
                    "c13_H1 : Semantics.lts P l P'",
                    "c13_H2 : or (R1 P Q) (R2 P Q)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ _ _i ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ _ _i ] .",
                "tactic_args": [
                    "c2_H : progresses R1 S",
                    "c2_H : progresses R1 S"
                ],
                "tactic_res": [
                    "c13_H : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : R1 P Q),\nex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ _ _i ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ _ _i ] .",
                "tactic_args": [
                    "c2_H0 : progresses R2 S",
                    "c2_H0 : progresses R2 S"
                ],
                "tactic_res": [
                    "c13_H0 : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : R2 P Q),\nex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c13_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q'))",
                    "c13_H2 : or (R1 P Q) (R2 P Q)"
                ],
                "tactic_res": [
                    "c14_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q'))",
                    "c14_H2 : R1 P Q",
                    "c15_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q'))",
                    "c15_H2 : R2 P Q"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c14_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q'))",
                    "c2_H : progresses R1 S",
                    "c13_H1 : Semantics.lts P l P'"
                ],
                "tactic_res": [
                    "c16_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q'))",
                    "c16_H1 : ex (fun Q' : process => and (Semantics.lts ?Q l Q') (S P' Q'))",
                    "c17_goal : R1 P ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c16_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q'))",
                    "c13_H1 : Semantics.lts P l P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c17_goal : R1 P Q",
                    "c13_H2 : or (R1 P Q) (R2 P Q)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c15_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q'))",
                    "c2_H0 : progresses R2 S",
                    "c13_H1 : Semantics.lts P l P'"
                ],
                "tactic_res": [
                    "c18_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q'))",
                    "c18_H1 : ex (fun Q' : process => and (Semantics.lts ?Q l Q') (S P' Q'))",
                    "c19_goal : R2 P ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c18_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (S P' Q'))",
                    "c13_H1 : Semantics.lts P l P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c19_goal : R2 P Q",
                    "c13_H2 : or (R1 P Q) (R2 P Q)"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "apply_n_progresses",
        "proof": [
            {
                "tactic_sig": "Theorem apply_n_progresses : forall ( R : relation ) F n , strongly_safe F -> progresses R ( F R ) -> progresses ( apply_n n R F ) ( apply_n ( S n ) R F ) .",
                "tactic_sig_no_out_arg": "Theorem apply_n_progresses : forall ( R : relation ) F n , strongly_safe F -> progresses R ( F R ) -> progresses ( apply_n n R F ) ( apply_n ( S n ) R F ) .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (R : relation) (F : forall _ : relation, relation) \n  (n : nat) (_ : strongly_safe F) (_ : progresses R (F R)),\nprogresses (apply_n n R F) (apply_n (S n) R F)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (R : relation) (F : forall _ : relation, relation) \n  (n : nat) (_ : strongly_safe F) (_ : progresses R (F R)),\nprogresses (apply_n n R F) (apply_n (S n) R F)"
                ],
                "tactic_res": [
                    "c2_goal : progresses (apply_n n R F) (apply_n (S n) R F)",
                    "c2_R : relation",
                    "c2_F : forall _ : relation, relation",
                    "c2_n : nat",
                    "c2_H : strongly_safe F",
                    "c2_H0 : progresses R (F R)"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c2_goal : progresses (apply_n n R F) (apply_n (S n) R F)",
                    "c2_n : nat"
                ],
                "tactic_res": [
                    "c3_goal : progresses (apply_n 0 R F) (apply_n 1 R F)",
                    "c4_goal : progresses (apply_n (S n) R F) (apply_n (S (S n)) R F)",
                    "c4_IHn : progresses (apply_n n R F) (apply_n (S n) R F)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c3_goal : progresses (apply_n 0 R F) (apply_n 1 R F)"
                ],
                "tactic_res": [
                    "c5_goal : progresses R (fun P Q : process => or (R P Q) (F R P Q))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c5_goal : progresses R (fun P Q : process => or (R P Q) (F R P Q))",
                    "_global_progresses_subset_right : forall (R S T : relation) (_ : subset S T) (_ : progresses R S),\n       progresses R T"
                ],
                "tactic_res": [
                    "c6_goal : subset ?S (fun P Q : process => or (R P Q) (F R P Q))",
                    "c7_goal : progresses R ?S"
                ]
            },
            {
                "tactic_sig": "try ( apply _i ) .",
                "tactic_sig_no_out_arg": "try ( apply _i ) .",
                "tactic_args": [
                    "c2_H0 : progresses R (F R)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try ( apply _i ) .",
                "tactic_sig_no_out_arg": "try ( apply _i ) .",
                "tactic_args": [
                    "c7_goal : progresses R ?S",
                    "c2_H0 : progresses R (F R)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c6_goal : subset (F R) (fun P Q : process => or (R P Q) (F R P Q))",
                    "_global_subset : forall (_ : relation) (_ : relation), Prop"
                ],
                "tactic_res": [
                    "c8_goal : forall (P Q : process) (_ : F R P Q), or (R P Q) (F R P Q)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c8_goal : forall (P Q : process) (_ : F R P Q), or (R P Q) (F R P Q)"
                ],
                "tactic_res": [
                    "c9_goal : or (R P Q) (F R P Q)",
                    "c9_P : process",
                    "c9_Q : process",
                    "c9_H1 : F R P Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c9_goal : or (R P Q) (F R P Q)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl in * .",
                "tactic_sig_no_out_arg": "simpl in * .",
                "tactic_args": [
                    "c4_goal : progresses (apply_n (S n) R F) (apply_n (S (S n)) R F)"
                ],
                "tactic_res": [
                    "c10_goal : progresses\n  (fun P Q : process => or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n  (fun P Q : process =>\n   or (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n     (F\n        (fun P0 Q0 : process =>\n         or (apply_n n R F P0 Q0) (F (apply_n n R F) P0 Q0)) P Q))",
                    "c10_IHn : progresses (apply_n n R F)\n  (fun P Q : process => or (apply_n n R F P Q) (F (apply_n n R F) P Q))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c10_goal : progresses\n  (fun P Q : process => or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n  (fun P Q : process =>\n   or (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n     (F\n        (fun P0 Q0 : process =>\n         or (apply_n n R F P0 Q0) (F (apply_n n R F) P0 Q0)) P Q))",
                    "_global_progresses_union : forall (R1 R2 : relation)\n         (S : forall (_ : process) (_ : process), Prop) \n         (_ : progresses R1 S) (_ : progresses R2 S),\n       progresses (fun P Q : process => or (R1 P Q) (R2 P Q)) S"
                ],
                "tactic_res": [
                    "c11_goal : progresses (apply_n n R F)\n  (fun P Q : process =>\n   or (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n     (F\n        (fun P0 Q0 : process =>\n         or (apply_n n R F P0 Q0) (F (apply_n n R F) P0 Q0)) P Q))",
                    "c12_goal : progresses (F (apply_n n R F))\n  (fun P Q : process =>\n   or (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n     (F\n        (fun P0 Q0 : process =>\n         or (apply_n n R F P0 Q0) (F (apply_n n R F) P0 Q0)) P Q))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c11_goal : progresses (apply_n n R F)\n  (fun P Q : process =>\n   or (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n     (F\n        (fun P0 Q0 : process =>\n         or (apply_n n R F P0 Q0) (F (apply_n n R F) P0 Q0)) P Q))",
                    "_global_progresses_subset_right : forall (R S T : relation) (_ : subset S T) (_ : progresses R S),\n       progresses R T"
                ],
                "tactic_res": [
                    "c13_goal : subset ?S\n  (fun P Q : process =>\n   or (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n     (F\n        (fun P0 Q0 : process =>\n         or (apply_n n R F P0 Q0) (F (apply_n n R F) P0 Q0)) P Q))",
                    "c14_goal : progresses (apply_n n R F) ?S"
                ]
            },
            {
                "tactic_sig": "try ( apply _i ) .",
                "tactic_sig_no_out_arg": "try ( apply _i ) .",
                "tactic_args": [
                    "c4_IHn : progresses (apply_n n R F) (apply_n (S n) R F)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try ( apply _i ) .",
                "tactic_sig_no_out_arg": "try ( apply _i ) .",
                "tactic_args": [
                    "c14_goal : progresses (apply_n n R F) ?S",
                    "c4_IHn : progresses (apply_n n R F) (apply_n (S n) R F)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c13_goal : subset\n  (fun P Q : process => or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n  (fun P Q : process =>\n   or (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n     (F\n        (fun P0 Q0 : process =>\n         or (apply_n n R F P0 Q0) (F (apply_n n R F) P0 Q0)) P Q))",
                    "_global_subset : forall (_ : relation) (_ : relation), Prop"
                ],
                "tactic_res": [
                    "c15_goal : forall (P Q : process)\n  (_ : or (apply_n n R F P Q) (F (apply_n n R F) P Q)),\nor (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n  (F\n     (fun P0 Q0 : process =>\n      or (apply_n n R F P0 Q0) (F (apply_n n R F) P0 Q0)) P Q)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c15_goal : forall (P Q : process)\n  (_ : or (apply_n n R F P Q) (F (apply_n n R F) P Q)),\nor (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n  (F\n     (fun P0 Q0 : process =>\n      or (apply_n n R F P0 Q0) (F (apply_n n R F) P0 Q0)) P Q)"
                ],
                "tactic_res": [
                    "c16_goal : or (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n  (F\n     (fun P Q : process =>\n      or (apply_n n R F P Q) (F (apply_n n R F) P Q)) P Q)",
                    "c16_P : process",
                    "c16_Q : process",
                    "c16_H1 : or (apply_n n R F P Q) (F (apply_n n R F) P Q)"
                ]
            },
            {
                "tactic_sig": "left .",
                "tactic_sig_no_out_arg": "left .",
                "tactic_args": [
                    "c16_goal : or (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n  (F\n     (fun P Q : process =>\n      or (apply_n n R F P Q) (F (apply_n n R F) P Q)) P Q)"
                ],
                "tactic_res": [
                    "c17_goal : or (apply_n n R F P Q) (F (apply_n n R F) P Q)"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c17_goal : or (apply_n n R F P Q) (F (apply_n n R F) P Q)",
                    "c16_H1 : or (apply_n n R F P Q) (F (apply_n n R F) P Q)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i with ( _i ( fun P Q => apply_n _i _i _i P Q \\/ _i ( apply_n _i _i _i ) P Q ) ) .",
                "tactic_sig_no_out_arg": "eapply _i with ( _i ( fun P Q => apply_n _i _i _i P Q \\/ _i ( apply_n _i _i _i ) P Q ) ) .",
                "tactic_args": [
                    "c12_goal : progresses (F (apply_n n R F))\n  (fun P Q : process =>\n   or (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n     (F\n        (fun P0 Q0 : process =>\n         or (apply_n n R F P0 Q0) (F (apply_n n R F) P0 Q0)) P Q))",
                    "_global_progresses_subset_right : forall (R S T : relation) (_ : subset S T) (_ : progresses R S),\n       progresses R T",
                    "c2_F : forall _ : relation, relation",
                    "c2_n : nat",
                    "c2_R : relation",
                    "c2_F : forall _ : relation, relation",
                    "c2_F : forall _ : relation, relation",
                    "c2_n : nat",
                    "c2_R : relation",
                    "c2_F : forall _ : relation, relation"
                ],
                "tactic_res": [
                    "c18_goal : subset\n  (F\n     (fun P Q : process =>\n      or (apply_n n R F P Q) (F (apply_n n R F) P Q)))\n  (fun P Q : process =>\n   or (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n     (F\n        (fun P0 Q0 : process =>\n         or (apply_n n R F P0 Q0) (F (apply_n n R F) P0 Q0)) P Q))",
                    "c19_goal : progresses (F (apply_n n R F))\n  (F\n     (fun P Q : process =>\n      or (apply_n n R F P Q) (F (apply_n n R F) P Q)))"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "_global_symmetric : forall _ : relation, Prop"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c18_goal : subset\n  (F\n     (fun P Q : process =>\n      or (apply_n n R F P Q) (F (apply_n n R F) P Q)))\n  (fun P Q : process =>\n   or (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n     (F\n        (fun P0 Q0 : process =>\n         or (apply_n n R F P0 Q0) (F (apply_n n R F) P0 Q0)) P Q))",
                    "_global_subset : forall (_ : relation) (_ : relation), Prop"
                ],
                "tactic_res": [
                    "c20_goal : forall (P Q : process)\n  (_ : F\n         (fun P0 Q0 : process =>\n          or (apply_n n R F P0 Q0) (F (apply_n n R F) P0 Q0)) P Q),\nor (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n  (F\n     (fun P0 Q0 : process =>\n      or (apply_n n R F P0 Q0) (F (apply_n n R F) P0 Q0)) P Q)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c20_goal : forall (P Q : process)\n  (_ : F\n         (fun P0 Q0 : process =>\n          or (apply_n n R F P0 Q0) (F (apply_n n R F) P0 Q0)) P Q),\nor (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n  (F\n     (fun P0 Q0 : process =>\n      or (apply_n n R F P0 Q0) (F (apply_n n R F) P0 Q0)) P Q)"
                ],
                "tactic_res": [
                    "c21_goal : or (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n  (F\n     (fun P Q : process =>\n      or (apply_n n R F P Q) (F (apply_n n R F) P Q)) P Q)",
                    "c21_P : process",
                    "c21_Q : process",
                    "c21_H1 : F (fun P Q : process => or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n  P Q"
                ]
            },
            {
                "tactic_sig": "right .",
                "tactic_sig_no_out_arg": "right .",
                "tactic_args": [
                    "c21_goal : or (or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n  (F\n     (fun P Q : process =>\n      or (apply_n n R F P Q) (F (apply_n n R F) P Q)) P Q)"
                ],
                "tactic_res": [
                    "c22_goal : F (fun P Q : process => or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n  P Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c22_goal : F (fun P Q : process => or (apply_n n R F P Q) (F (apply_n n R F) P Q))\n  P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c19_goal : progresses (F (apply_n n R F))\n  (F\n     (fun P Q : process =>\n      or (apply_n n R F P Q) (F (apply_n n R F) P Q)))",
                    "c2_H : strongly_safe F",
                    "c4_IHn : progresses (apply_n n R F) (apply_n (S n) R F)"
                ],
                "tactic_res": [
                    "c23_goal : progresses (F (apply_n n R F))\n  (F\n     (fun P Q : process =>\n      or (apply_n n R F P Q) (F (apply_n n R F) P Q)))",
                    "c23_IHn : and\n  (subset (F (apply_n n R F))\n     (F\n        (fun P Q : process =>\n         or (apply_n n R F P Q) (F (apply_n n R F) P Q))))\n  (progresses (F (apply_n n R F))\n     (F\n        (fun P Q : process =>\n         or (apply_n n R F P Q) (F (apply_n n R F) P Q))))",
                    "c24_goal : subset (apply_n n R F)\n  (fun P Q : process => or (apply_n n R F P Q) (F (apply_n n R F) P Q))"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c23_goal : progresses (F (apply_n n R F))\n  (F\n     (fun P Q : process =>\n      or (apply_n n R F P Q) (F (apply_n n R F) P Q)))",
                    "c4_IHn : progresses (apply_n n R F) (apply_n (S n) R F)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c24_goal : subset (apply_n n R F)\n  (fun P Q : process => or (apply_n n R F P Q) (F (apply_n n R F) P Q))",
                    "_global_subset : forall (_ : relation) (_ : relation), Prop"
                ],
                "tactic_res": [
                    "c25_goal : forall (P Q : process) (_ : apply_n n R F P Q),\nor (apply_n n R F P Q) (F (apply_n n R F) P Q)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c25_goal : forall (P Q : process) (_ : apply_n n R F P Q),\nor (apply_n n R F P Q) (F (apply_n n R F) P Q)"
                ],
                "tactic_res": [
                    "c26_goal : or (apply_n n R F P Q) (F (apply_n n R F) P Q)",
                    "c26_P : process",
                    "c26_Q : process",
                    "c26_H1 : apply_n n R F P Q"
                ]
            },
            {
                "tactic_sig": "left .",
                "tactic_sig_no_out_arg": "left .",
                "tactic_args": [
                    "c26_goal : or (apply_n n R F P Q) (F (apply_n n R F) P Q)"
                ],
                "tactic_res": [
                    "c27_goal : apply_n n R F P Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c27_goal : apply_n n R F P Q"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "strongly_safe_in_bisimulation",
        "proof": [
            {
                "tactic_sig": "Theorem strongly_safe_in_bisimulation : forall ( R : relation ) F , preserves_symm F -> symmetric R -> strongly_safe F -> progresses R ( F R ) -> early_bisimulation ( fun P Q => exists n , apply_n n R F P Q ) .",
                "tactic_sig_no_out_arg": "Theorem strongly_safe_in_bisimulation : forall ( R : relation ) F , preserves_symm F -> symmetric R -> strongly_safe F -> progresses R ( F R ) -> early_bisimulation ( fun P Q => exists n , apply_n n R F P Q ) .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (R : relation) (F : forall _ : relation, relation)\n  (_ : preserves_symm F) (_ : symmetric R) (_ : strongly_safe F)\n  (_ : progresses R (F R)),\nearly_bisimulation\n  (fun P Q : process => ex (fun n : nat => apply_n n R F P Q))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (R : relation) (F : forall _ : relation, relation)\n  (_ : preserves_symm F) (_ : symmetric R) (_ : strongly_safe F)\n  (_ : progresses R (F R)),\nearly_bisimulation\n  (fun P Q : process => ex (fun n : nat => apply_n n R F P Q))"
                ],
                "tactic_res": [
                    "c2_goal : early_bisimulation\n  (fun P Q : process => ex (fun n : nat => apply_n n R F P Q))",
                    "c2_R : relation",
                    "c2_F : forall _ : relation, relation",
                    "c2_H : preserves_symm F",
                    "c2_H0 : symmetric R",
                    "c2_H1 : strongly_safe F",
                    "c2_H2 : progresses R (F R)"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c2_goal : early_bisimulation\n  (fun P Q : process => ex (fun n : nat => apply_n n R F P Q))",
                    "_global_early_bisimulation : forall _ : forall (_ : process) (_ : process), Prop, Prop"
                ],
                "tactic_res": [
                    "c3_goal : and\n  (forall (P1 P2 : process)\n     (_ : ex (fun n : nat => apply_n n R F P1 P2)),\n   ex (fun n : nat => apply_n n R F P2 P1))\n  (forall (P1 P1' P2 : process) (l : Semantics.label)\n     (_ : ex (fun n : nat => apply_n n R F P1 P2))\n     (_ : Semantics.lts P1 l P1'),\n   ex\n     (fun P2' : process =>\n      and (Semantics.lts P2 l P2')\n        (ex (fun n : nat => apply_n n R F P1' P2'))))"
                ]
            },
            {
                "tactic_sig": "unfold _i in _i .",
                "tactic_sig_no_out_arg": "unfold _i in _i .",
                "tactic_args": [
                    "_global_progresses : forall (_ : relation) (_ : forall (_ : process) (_ : process), Prop),\n       Prop",
                    "c2_H2 : progresses R (F R)"
                ],
                "tactic_res": [
                    "c3_H2 : and\n  (forall (P Q : process) (l : Semantics.label) (Q' : process)\n     (_ : Semantics.lts Q l Q') (_ : R P Q),\n   ex (fun P' : process => and (Semantics.lts P l P') (F R P' Q')))\n  (forall (P Q : process) (l : Semantics.label) (P' : process)\n     (_ : Semantics.lts P l P') (_ : R P Q),\n   ex (fun Q' : process => and (Semantics.lts Q l Q') (F R P' Q')))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c3_goal : and\n  (forall (P1 P2 : process)\n     (_ : ex (fun n : nat => apply_n n R F P1 P2)),\n   ex (fun n : nat => apply_n n R F P2 P1))\n  (forall (P1 P1' P2 : process) (l : Semantics.label)\n     (_ : ex (fun n : nat => apply_n n R F P1 P2))\n     (_ : Semantics.lts P1 l P1'),\n   ex\n     (fun P2' : process =>\n      and (Semantics.lts P2 l P2')\n        (ex (fun n : nat => apply_n n R F P1' P2'))))"
                ],
                "tactic_res": [
                    "c4_goal : forall (P1 P2 : process) (_ : ex (fun n : nat => apply_n n R F P1 P2)),\nex (fun n : nat => apply_n n R F P2 P1)",
                    "c5_goal : forall (P1 P1' P2 : process) (l : Semantics.label)\n  (_ : ex (fun n : nat => apply_n n R F P1 P2))\n  (_ : Semantics.lts P1 l P1'),\nex\n  (fun P2' : process =>\n   and (Semantics.lts P2 l P2')\n     (ex (fun n : nat => apply_n n R F P1' P2')))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c4_goal : forall (P1 P2 : process) (_ : ex (fun n : nat => apply_n n R F P1 P2)),\nex (fun n : nat => apply_n n R F P2 P1)"
                ],
                "tactic_res": [
                    "c6_goal : ex (fun n : nat => apply_n n R F P2 P1)",
                    "c6_P1 : process",
                    "c6_P2 : process",
                    "c6_H3 : ex (fun n : nat => apply_n n R F P1 P2)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ n ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ n ] .",
                "tactic_args": [
                    "c6_H3 : ex (fun n : nat => apply_n n R F P1 P2)"
                ],
                "tactic_res": [
                    "c6_H3 : apply_n n R F P1 P2",
                    "c6_n : nat"
                ]
            },
            {
                "tactic_sig": "generalize dependent _i .",
                "tactic_sig_no_out_arg": "generalize dependent _i .",
                "tactic_args": [
                    "c6_goal : ex (fun n : nat => apply_n n R F P2 P1)",
                    "c6_P1 : process"
                ],
                "tactic_res": [
                    "c7_goal : forall (P1 : process) (_ : apply_n n R F P1 P2),\nex (fun n : nat => apply_n n R F P2 P1)"
                ]
            },
            {
                "tactic_sig": "generalize dependent _i .",
                "tactic_sig_no_out_arg": "generalize dependent _i .",
                "tactic_args": [
                    "c7_goal : forall (P1 : process) (_ : apply_n n R F P1 P2),\nex (fun n : nat => apply_n n R F P2 P1)",
                    "c6_P2 : process"
                ],
                "tactic_res": [
                    "c8_goal : forall (P2 P1 : process) (_ : apply_n n R F P1 P2),\nex (fun n : nat => apply_n n R F P2 P1)"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c8_goal : forall (P2 P1 : process) (_ : apply_n n R F P1 P2),\nex (fun n : nat => apply_n n R F P2 P1)",
                    "c6_n : nat"
                ],
                "tactic_res": [
                    "c9_goal : forall (P2 P1 : process) (_ : apply_n 0 R F P1 P2),\nex (fun n : nat => apply_n n R F P2 P1)",
                    "c10_goal : forall (P2 P1 : process) (_ : apply_n (S n) R F P1 P2),\nex (fun n : nat => apply_n n R F P2 P1)",
                    "c10_IHn : forall (P2 P1 : process) (_ : apply_n n R F P1 P2),\nex (fun n : nat => apply_n n R F P2 P1)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c9_goal : forall (P2 P1 : process) (_ : apply_n 0 R F P1 P2),\nex (fun n : nat => apply_n n R F P2 P1)"
                ],
                "tactic_res": [
                    "c11_goal : ex (fun n : nat => apply_n n R F P2 P1)",
                    "c11_P2 : process",
                    "c11_P1 : process",
                    "c11_H3 : apply_n 0 R F P1 P2"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c6_H3 : ex (fun n : nat => apply_n n R F P1 P2)"
                ],
                "tactic_res": [
                    "c11_H3 : R P1 P2"
                ]
            },
            {
                "tactic_sig": "exists 0 .",
                "tactic_sig_no_out_arg": "exists 0 .",
                "tactic_args": [
                    "c11_goal : ex (fun n : nat => apply_n n R F P2 P1)"
                ],
                "tactic_res": [
                    "c12_goal : apply_n 0 R F P2 P1"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c12_goal : apply_n 0 R F P2 P1"
                ],
                "tactic_res": [
                    "c13_goal : R P2 P1"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c13_goal : R P2 P1"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c10_goal : forall (P2 P1 : process) (_ : apply_n (S n) R F P1 P2),\nex (fun n : nat => apply_n n R F P2 P1)"
                ],
                "tactic_res": [
                    "c14_goal : ex (fun n : nat => apply_n n R F P2 P1)",
                    "c14_P2 : process",
                    "c14_P1 : process",
                    "c14_H3 : apply_n (S n) R F P1 P2"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c6_H3 : ex (fun n : nat => apply_n n R F P1 P2)"
                ],
                "tactic_res": [
                    "c14_H3 : or (apply_n n R F P1 P2) (F (apply_n n R F) P1 P2)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o | _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c14_goal : ex (fun n : nat => apply_n n R F P2 P1)",
                    "c6_H3 : ex (fun n : nat => apply_n n R F P1 P2)"
                ],
                "tactic_res": [
                    "c15_goal : ex (fun n : nat => apply_n n R F P2 P1)",
                    "c15_H3 : apply_n n R F P1 P2",
                    "c16_goal : ex (fun n : nat => apply_n n R F P2 P1)",
                    "c16_H3 : F (apply_n n R F) P1 P2"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c15_goal : ex (fun n : nat => apply_n n R F P2 P1)",
                    "c10_IHn : forall (P2 P1 : process) (_ : apply_n n R F P1 P2),\nex (fun n : nat => apply_n n R F P2 P1)"
                ],
                "tactic_res": [
                    "c17_goal : apply_n n R F P1 P2"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c17_goal : apply_n n R F P1 P2"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "exists ( S _i ) .",
                "tactic_sig_no_out_arg": "exists ( S _i ) .",
                "tactic_args": [
                    "c16_goal : ex (fun n : nat => apply_n n R F P2 P1)",
                    "c6_n : nat"
                ],
                "tactic_res": [
                    "c18_goal : apply_n (S n) R F P2 P1"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c18_goal : apply_n (S n) R F P2 P1"
                ],
                "tactic_res": [
                    "c19_goal : or (apply_n n R F P2 P1) (F (apply_n n R F) P2 P1)"
                ]
            },
            {
                "tactic_sig": "right .",
                "tactic_sig_no_out_arg": "right .",
                "tactic_args": [
                    "c19_goal : or (apply_n n R F P2 P1) (F (apply_n n R F) P2 P1)"
                ],
                "tactic_res": [
                    "c20_goal : F (apply_n n R F) P2 P1"
                ]
            },
            {
                "tactic_sig": "assert ( symmetric ( apply_n _i _i _i ) ) .",
                "tactic_sig_no_out_arg": "assert ( symmetric ( apply_n _i _i _i ) ) .",
                "tactic_args": [
                    "c20_goal : F (apply_n n R F) P2 P1",
                    "c6_n : nat",
                    "c2_R : relation",
                    "c2_F : forall _ : relation, relation"
                ],
                "tactic_res": [
                    "c21_goal : symmetric (apply_n n R F)",
                    "c22_goal : F (apply_n n R F) P2 P1",
                    "c22_H4 : symmetric (apply_n n R F)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c21_goal : symmetric (apply_n n R F)",
                    "_global_apply_n_symm : forall (n : nat) (R : relation) (F : forall _ : relation, relation)\n         (_ : symmetric R) (_ : preserves_symm F), \n       symmetric (apply_n n R F)"
                ],
                "tactic_res": [
                    "c23_goal : symmetric R",
                    "c24_goal : preserves_symm F"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c23_goal : symmetric R",
                    "c2_H0 : symmetric R"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c24_goal : preserves_symm F",
                    "c2_H : preserves_symm F"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i in _i .",
                "tactic_sig_no_out_arg": "apply _i in _i .",
                "tactic_args": [
                    "c2_H : preserves_symm F",
                    "c22_H4 : symmetric (apply_n n R F)"
                ],
                "tactic_res": [
                    "c22_H4 : symmetric (F (apply_n n R F))"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c22_goal : F (apply_n n R F) P2 P1",
                    "c22_H4 : symmetric (apply_n n R F)"
                ],
                "tactic_res": [
                    "c25_goal : F (apply_n n R F) P1 P2"
                ]
            },
            {
                "tactic_sig": "apply _i .",
                "tactic_sig_no_out_arg": "apply _i .",
                "tactic_args": [
                    "c25_goal : F (apply_n n R F) P1 P2",
                    "c6_H3 : ex (fun n : nat => apply_n n R F P1 P2)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c5_goal : forall (P1 P1' P2 : process) (l : Semantics.label)\n  (_ : ex (fun n : nat => apply_n n R F P1 P2))\n  (_ : Semantics.lts P1 l P1'),\nex\n  (fun P2' : process =>\n   and (Semantics.lts P2 l P2')\n     (ex (fun n : nat => apply_n n R F P1' P2')))"
                ],
                "tactic_res": [
                    "c26_goal : ex\n  (fun P2' : process =>\n   and (Semantics.lts P2 l P2')\n     (ex (fun n : nat => apply_n n R F P1' P2')))",
                    "c26_P1 : process",
                    "c26_P1' : process",
                    "c26_P2 : process",
                    "c26_l : label",
                    "c26_H3 : ex (fun n : nat => apply_n n R F P1 P2)",
                    "c26_H4 : Semantics.lts P1 l P1'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ n ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ n ] .",
                "tactic_args": [
                    "c26_H3 : ex (fun n : nat => apply_n n R F P1 P2)"
                ],
                "tactic_res": [
                    "c26_H3 : apply_n n R F P1 P2",
                    "c26_n : nat"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c26_goal : ex\n  (fun P2' : process =>\n   and (Semantics.lts P2 l P2')\n     (ex (fun n : nat => apply_n n R F P1' P2')))",
                    "_global_apply_n_progresses : forall (R : relation) (F : forall _ : relation, relation) \n         (n : nat) (_ : strongly_safe F) (_ : progresses R (F R)),\n       progresses (apply_n n R F) (apply_n (S n) R F)",
                    "c26_H3 : ex (fun n : nat => apply_n n R F P1 P2)"
                ],
                "tactic_res": [
                    "c27_goal : ex\n  (fun P2' : process =>\n   and (Semantics.lts P2 l P2')\n     (ex (fun n : nat => apply_n n R F P1' P2')))",
                    "c27_H3 : ex\n  (fun Q' : process =>\n   and (Semantics.lts P2 ?l Q') (apply_n (S n) R F ?P' Q'))",
                    "c28_goal : strongly_safe F",
                    "c28_H5 : forall (R : relation) (F : forall _ : relation, relation) \n  (n : nat) (_ : strongly_safe F) (_ : progresses R (F R))\n  (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : apply_n n R F P Q),\nex\n  (fun Q' : process =>\n   and (Semantics.lts Q l Q') (apply_n (S n) R F P' Q'))",
                    "c29_goal : progresses R (F R)",
                    "c29_H5 : forall (R : relation) (F : forall _ : relation, relation) \n  (n : nat) (_ : strongly_safe F) (_ : progresses R (F R))\n  (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : apply_n n R F P Q),\nex\n  (fun Q' : process =>\n   and (Semantics.lts Q l Q') (apply_n (S n) R F P' Q'))",
                    "c30_goal : Semantics.lts P1 ?l ?P'",
                    "c30_H5 : forall (R : relation) (F : forall _ : relation, relation) \n  (n : nat) (_ : strongly_safe F) (_ : progresses R (F R))\n  (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : apply_n n R F P Q),\nex\n  (fun Q' : process =>\n   and (Semantics.lts Q l Q') (apply_n (S n) R F P' Q'))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c28_goal : strongly_safe F"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c29_goal : progresses R (F R)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c30_goal : Semantics.lts P1 ?l ?P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ P2' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P2' ] .",
                "tactic_args": [
                    "c26_H3 : ex (fun n : nat => apply_n n R F P1 P2)"
                ],
                "tactic_res": [
                    "c27_H3 : and (Semantics.lts P2 l P2') (apply_n (S n) R F P1' P2')",
                    "c27_P2' : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c27_goal : ex\n  (fun P2' : process =>\n   and (Semantics.lts P2 l P2')\n     (ex (fun n : nat => apply_n n R F P1' P2')))",
                    "c27_P2' : process"
                ],
                "tactic_res": [
                    "c31_goal : and (Semantics.lts P2 l P2')\n  (ex (fun n : nat => apply_n n R F P1' P2'))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c31_goal : and (Semantics.lts P2 l P2')\n  (ex (fun n : nat => apply_n n R F P1' P2'))"
                ],
                "tactic_res": [
                    "c32_goal : Semantics.lts P2 l P2'",
                    "c33_goal : ex (fun n : nat => apply_n n R F P1' P2')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c32_goal : Semantics.lts P2 l P2'",
                    "c26_H3 : ex (fun n : nat => apply_n n R F P1 P2)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "exists ( S _i ) .",
                "tactic_sig_no_out_arg": "exists ( S _i ) .",
                "tactic_args": [
                    "c33_goal : ex (fun n : nat => apply_n n R F P1' P2')",
                    "c26_n : nat"
                ],
                "tactic_res": [
                    "c34_goal : apply_n (S n) R F P1' P2'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c34_goal : apply_n (S n) R F P1' P2'",
                    "c26_H3 : ex (fun n : nat => apply_n n R F P1 P2)"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "iterate_sum",
        "proof": [
            {
                "tactic_sig": "Theorem iterate_sum : forall F R P A Q n m , iterate n F R P A -> iterate m F R A Q -> iterate ( S ( n + m ) ) F R P Q .",
                "tactic_sig_no_out_arg": "Theorem iterate_sum : forall F R P A Q n m , iterate n F R P A -> iterate m F R A Q -> iterate ( S ( n + m ) ) F R P Q .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (F : forall _ : relation, relation) (R : relation)\n  (P A Q : process) (n m : nat) (_ : iterate n F R P A)\n  (_ : iterate m F R A Q), iterate (S (Init.Nat.add n m)) F R P Q"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (F : forall _ : relation, relation) (R : relation)\n  (P A Q : process) (n m : nat) (_ : iterate n F R P A)\n  (_ : iterate m F R A Q), iterate (S (Init.Nat.add n m)) F R P Q"
                ],
                "tactic_res": [
                    "c2_goal : iterate (S (Init.Nat.add n m)) F R P Q",
                    "c2_F : forall _ : relation, relation",
                    "c2_R : relation",
                    "c2_P : process",
                    "c2_A : process",
                    "c2_Q : process",
                    "c2_n : nat",
                    "c2_m : nat",
                    "c2_H : iterate n F R P A",
                    "c2_H0 : iterate m F R A Q"
                ]
            },
            {
                "tactic_sig": "generalize dependent _i .",
                "tactic_sig_no_out_arg": "generalize dependent _i .",
                "tactic_args": [
                    "c2_goal : iterate (S (Init.Nat.add n m)) F R P Q",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c3_goal : forall (P : process) (_ : iterate n F R P A),\niterate (S (Init.Nat.add n m)) F R P Q"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c3_goal : forall (P : process) (_ : iterate n F R P A),\niterate (S (Init.Nat.add n m)) F R P Q",
                    "c2_n : nat"
                ],
                "tactic_res": [
                    "c4_goal : forall (P : process) (_ : iterate 0 F R P A),\niterate (S (Init.Nat.add 0 m)) F R P Q",
                    "c5_goal : forall (P : process) (_ : iterate (S n) F R P A),\niterate (S (Init.Nat.add (S n) m)) F R P Q",
                    "c5_IHn : forall (P : process) (_ : iterate n F R P A),\niterate (S (Init.Nat.add n m)) F R P Q"
                ]
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c4_goal : forall (P : process) (_ : iterate 0 F R P A),\niterate (S (Init.Nat.add 0 m)) F R P Q"
                ],
                "tactic_res": [
                    "c6_goal : iterate (S (Init.Nat.add 0 m)) F R P Q",
                    "c6_P : process",
                    "c6_H : iterate 0 F R P A"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c6_goal : iterate (S (Init.Nat.add 0 m)) F R P Q"
                ],
                "tactic_res": [
                    "c7_goal : r_compose (F R) (iterate m F R) P Q"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c2_H : iterate n F R P A"
                ],
                "tactic_res": [
                    "c7_H : F R P A"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c7_goal : r_compose (F R) (iterate m F R) P Q",
                    "c2_A : process"
                ],
                "tactic_res": [
                    "c8_goal : and (F R P A) (iterate m F R A Q)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c8_goal : and (F R P A) (iterate m F R A Q)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c5_goal : forall (P : process) (_ : iterate (S n) F R P A),\niterate (S (Init.Nat.add (S n) m)) F R P Q"
                ],
                "tactic_res": [
                    "c9_goal : iterate (S (Init.Nat.add (S n) m)) F R P Q",
                    "c9_P : process",
                    "c9_H : iterate (S n) F R P A"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c9_goal : iterate (S (Init.Nat.add (S n) m)) F R P Q"
                ],
                "tactic_res": [
                    "c10_goal : r_compose (F R) (r_compose (F R) (iterate (Init.Nat.add n m) F R)) P Q"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c2_H : iterate n F R P A"
                ],
                "tactic_res": [
                    "c10_H : r_compose (F R) (iterate n F R) P A"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c5_IHn : forall (P : process) (_ : iterate n F R P A),\niterate (S (Init.Nat.add n m)) F R P Q"
                ],
                "tactic_res": [
                    "c10_IHn : forall (P : process) (_ : iterate n F R P A),\nr_compose (F R) (iterate (Init.Nat.add n m) F R) P Q"
                ]
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c2_H : iterate n F R P A"
                ],
                "tactic_res": [
                    "c10_H1 : and (F R P x) (iterate n F R x A)",
                    "c10_x : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c10_goal : r_compose (F R) (r_compose (F R) (iterate (Init.Nat.add n m) F R)) P Q",
                    "c10_x : process"
                ],
                "tactic_res": [
                    "c11_goal : and (F R P x) (r_compose (F R) (iterate (Init.Nat.add n m) F R) x Q)"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c11_goal : and (F R P x) (r_compose (F R) (iterate (Init.Nat.add n m) F R) x Q)"
                ],
                "tactic_res": [
                    "c12_goal : F R P x",
                    "c13_goal : r_compose (F R) (iterate (Init.Nat.add n m) F R) x Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c12_goal : F R P x",
                    "c10_H1 : and (F R P x) (iterate n F R x A)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c13_goal : r_compose (F R) (iterate (Init.Nat.add n m) F R) x Q",
                    "c5_IHn : forall (P : process) (_ : iterate n F R P A),\niterate (S (Init.Nat.add n m)) F R P Q"
                ],
                "tactic_res": [
                    "c14_goal : iterate n F R x A"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c14_goal : iterate n F R x A",
                    "c10_H1 : and (F R P x) (iterate n F R x A)"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "closure_compose",
        "proof": [
            {
                "tactic_sig": "Theorem closure_compose : forall A P Q F R , closure F R P A -> closure F R A Q -> closure F R P Q .",
                "tactic_sig_no_out_arg": "Theorem closure_compose : forall A P Q F R , closure F R P A -> closure F R A Q -> closure F R P Q .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (A P Q : process) (F : forall _ : relation, relation)\n  (R : relation) (_ : closure F R P A) (_ : closure F R A Q),\nclosure F R P Q"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (A P Q : process) (F : forall _ : relation, relation)\n  (R : relation) (_ : closure F R P A) (_ : closure F R A Q),\nclosure F R P Q"
                ],
                "tactic_res": [
                    "c2_goal : closure F R P Q",
                    "c2_A : process",
                    "c2_P : process",
                    "c2_Q : process",
                    "c2_F : forall _ : relation, relation",
                    "c2_R : relation",
                    "c2_H : closure F R P A",
                    "c2_H0 : closure F R A Q"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H : closure F R P A"
                ],
                "tactic_res": [
                    "c2_H : iterate x F R P A",
                    "c2_x : nat"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H0 : closure F R A Q"
                ],
                "tactic_res": [
                    "c2_H0 : iterate x0 F R A Q",
                    "c2_x0 : nat"
                ]
            },
            {
                "tactic_sig": "exists ( 1 + _i + _i ) .",
                "tactic_sig_no_out_arg": "exists ( 1 + _i + _i ) .",
                "tactic_args": [
                    "c2_goal : closure F R P Q",
                    "c2_x : nat",
                    "c2_x0 : nat"
                ],
                "tactic_res": [
                    "c3_goal : iterate (Init.Nat.add (Init.Nat.add 1 x) x0) F R P Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c3_goal : iterate (Init.Nat.add (Init.Nat.add 1 x) x0) F R P Q",
                    "_global_iterate_sum : forall (F : forall _ : relation, relation) \n         (R : relation) (P A Q : process) (n m : nat) \n         (_ : iterate n F R P A) (_ : iterate m F R A Q),\n       iterate (S (Init.Nat.add n m)) F R P Q"
                ],
                "tactic_res": [
                    "c4_goal : iterate x F R P ?A",
                    "c5_goal : iterate x0 F R ?A Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c4_goal : iterate x F R P ?A",
                    "c2_H : closure F R P A"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c5_goal : iterate x0 F R A Q",
                    "c2_H0 : closure F R A Q"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "iterate_progresses",
        "proof": [
            {
                "tactic_sig": "Theorem iterate_progresses : forall ( R : relation ) S F n , ( forall f , symmetric f -> symmetric ( F f ) ) -> ( forall R S , subset R S -> progresses R S -> ( subset ( F R ) ( closure F S ) /\\ ( progresses ( F R ) ( closure F S ) ) ) ) -> subset R S -> progresses R S -> ( subset ( iterate n F R ) ( closure F S ) /\\ ( progresses ( iterate n F R ) ( closure F S ) ) ) .",
                "tactic_sig_no_out_arg": "Theorem iterate_progresses : forall ( R : relation ) S F n , ( forall f , symmetric f -> symmetric ( F f ) ) -> ( forall R S , subset R S -> progresses R S -> ( subset ( F R ) ( closure F S ) /\\ ( progresses ( F R ) ( closure F S ) ) ) ) -> subset R S -> progresses R S -> ( subset ( iterate n F R ) ( closure F S ) /\\ ( progresses ( iterate n F R ) ( closure F S ) ) ) .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (R S : relation) (F : forall _ : relation, relation) \n  (n : nat)\n  (_ : forall (f : relation) (_ : symmetric f), symmetric (F f))\n  (_ : forall (R0 S0 : relation) (_ : subset R0 S0)\n         (_ : progresses R0 S0),\n       and (subset (F R0) (closure F S0))\n         (progresses (F R0) (closure F S0))) (_ : subset R S)\n  (_ : progresses R S),\nand (subset (iterate n F R) (closure F S))\n  (progresses (iterate n F R) (closure F S))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (R S : relation) (F : forall _ : relation, relation) \n  (n : nat)\n  (_ : forall (f : relation) (_ : symmetric f), symmetric (F f))\n  (_ : forall (R0 S0 : relation) (_ : subset R0 S0)\n         (_ : progresses R0 S0),\n       and (subset (F R0) (closure F S0))\n         (progresses (F R0) (closure F S0))) (_ : subset R S)\n  (_ : progresses R S),\nand (subset (iterate n F R) (closure F S))\n  (progresses (iterate n F R) (closure F S))"
                ],
                "tactic_res": [
                    "c2_goal : and (subset (iterate n F R) (closure F S))\n  (progresses (iterate n F R) (closure F S))",
                    "c2_R : relation",
                    "c2_S : relation",
                    "c2_F : forall _ : relation, relation",
                    "c2_n : nat",
                    "c2_H : forall (f : relation) (_ : symmetric f), symmetric (F f)",
                    "c2_H0 : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (F R) (closure F S)) (progresses (F R) (closure F S))",
                    "c2_H1 : subset R S",
                    "c2_H2 : progresses R S"
                ]
            },
            {
                "tactic_sig": "generalize dependent _i .",
                "tactic_sig_no_out_arg": "generalize dependent _i .",
                "tactic_args": [
                    "c2_goal : and (subset (iterate n F R) (closure F S))\n  (progresses (iterate n F R) (closure F S))",
                    "c2_R : relation"
                ],
                "tactic_res": [
                    "c3_goal : forall (R : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (iterate n F R) (closure F S))\n  (progresses (iterate n F R) (closure F S))"
                ]
            },
            {
                "tactic_sig": "generalize dependent _i .",
                "tactic_sig_no_out_arg": "generalize dependent _i .",
                "tactic_args": [
                    "c3_goal : forall (R : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (iterate n F R) (closure F S))\n  (progresses (iterate n F R) (closure F S))",
                    "c2_S : relation"
                ],
                "tactic_res": [
                    "c4_goal : forall (S R : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (iterate n F R) (closure F S))\n  (progresses (iterate n F R) (closure F S))"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c4_goal : forall (S R : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (iterate n F R) (closure F S))\n  (progresses (iterate n F R) (closure F S))",
                    "c2_n : nat"
                ],
                "tactic_res": [
                    "c5_goal : forall (S R : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (iterate 0 F R) (closure F S))\n  (progresses (iterate 0 F R) (closure F S))",
                    "c6_goal : forall (S0 R : relation) (_ : subset R S0) (_ : progresses R S0),\nand (subset (iterate (S n) F R) (closure F S0))\n  (progresses (iterate (S n) F R) (closure F S0))",
                    "c6_IHn : forall (S R : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (iterate n F R) (closure F S))\n  (progresses (iterate n F R) (closure F S))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c5_goal : forall (S R : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (iterate 0 F R) (closure F S))\n  (progresses (iterate 0 F R) (closure F S))"
                ],
                "tactic_res": [
                    "c7_goal : and (subset (iterate 0 F R) (closure F S))\n  (progresses (iterate 0 F R) (closure F S))",
                    "c7_S : relation",
                    "c7_R : relation",
                    "c7_H1 : subset R S",
                    "c7_H2 : progresses R S"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c7_goal : and (subset (iterate 0 F R) (closure F S))\n  (progresses (iterate 0 F R) (closure F S))"
                ],
                "tactic_res": [
                    "c8_goal : subset (iterate 0 F R) (closure F S)",
                    "c9_goal : progresses (iterate 0 F R) (closure F S)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c8_goal : subset (iterate 0 F R) (closure F S)"
                ],
                "tactic_res": [
                    "c10_goal : subset (F R) (closure F S)"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c10_goal : subset (F R) (closure F S)",
                    "_global_closure : forall (_ : forall _ : relation, relation) \n         (_ : relation) (_ : process) (_ : process), Prop"
                ],
                "tactic_res": [
                    "c11_goal : subset (F R)\n  (fun P Q : process => ex (fun n : nat => iterate n F S P Q))"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c11_goal : subset (F R)\n  (fun P Q : process => ex (fun n : nat => iterate n F S P Q))",
                    "_global_subset : forall (_ : relation) (_ : relation), Prop"
                ],
                "tactic_res": [
                    "c12_goal : forall (P Q : process) (_ : F R P Q),\nex (fun n : nat => iterate n F S P Q)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c12_goal : forall (P Q : process) (_ : F R P Q),\nex (fun n : nat => iterate n F S P Q)"
                ],
                "tactic_res": [
                    "c13_goal : ex (fun n : nat => iterate n F S P Q)",
                    "c13_P : process",
                    "c13_Q : process",
                    "c13_H3 : F R P Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c13_goal : ex (fun n : nat => iterate n F S P Q)",
                    "c2_H0 : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (F R) (closure F S)) (progresses (F R) (closure F S))"
                ],
                "tactic_res": [
                    "c14_goal : subset ?R S",
                    "c15_goal : progresses ?R S",
                    "c16_goal : F ?R P Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c14_goal : subset ?R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c15_goal : progresses R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c16_goal : F R P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c9_goal : progresses (iterate 0 F R) (closure F S)"
                ],
                "tactic_res": [
                    "c17_goal : progresses (F R) (closure F S)"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c17_goal : progresses (F R) (closure F S)",
                    "_global_closure : forall (_ : forall _ : relation, relation) \n         (_ : relation) (_ : process) (_ : process), Prop"
                ],
                "tactic_res": [
                    "c18_goal : progresses (F R)\n  (fun P Q : process => ex (fun n : nat => iterate n F S P Q))"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c18_goal : progresses (F R)\n  (fun P Q : process => ex (fun n : nat => iterate n F S P Q))",
                    "_global_progresses : forall (_ : relation) (_ : forall (_ : process) (_ : process), Prop),\n       Prop"
                ],
                "tactic_res": [
                    "c19_goal : and\n  (forall (P Q : process) (l : Semantics.label) (Q' : process)\n     (_ : Semantics.lts Q l Q') (_ : F R P Q),\n   ex\n     (fun P' : process =>\n      and (Semantics.lts P l P')\n        (ex (fun n : nat => iterate n F S P' Q'))))\n  (forall (P Q : process) (l : Semantics.label) (P' : process)\n     (_ : Semantics.lts P l P') (_ : F R P Q),\n   ex\n     (fun Q' : process =>\n      and (Semantics.lts Q l Q')\n        (ex (fun n : nat => iterate n F S P' Q'))))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c19_goal : and\n  (forall (P Q : process) (l : Semantics.label) (Q' : process)\n     (_ : Semantics.lts Q l Q') (_ : F R P Q),\n   ex\n     (fun P' : process =>\n      and (Semantics.lts P l P')\n        (ex (fun n : nat => iterate n F S P' Q'))))\n  (forall (P Q : process) (l : Semantics.label) (P' : process)\n     (_ : Semantics.lts P l P') (_ : F R P Q),\n   ex\n     (fun Q' : process =>\n      and (Semantics.lts Q l Q')\n        (ex (fun n : nat => iterate n F S P' Q'))))"
                ],
                "tactic_res": [
                    "c20_goal : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : F R P Q),\nex\n  (fun P' : process =>\n   and (Semantics.lts P l P') (ex (fun n : nat => iterate n F S P' Q')))",
                    "c21_goal : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : F R P Q),\nex\n  (fun Q' : process =>\n   and (Semantics.lts Q l Q') (ex (fun n : nat => iterate n F S P' Q')))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c20_goal : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : F R P Q),\nex\n  (fun P' : process =>\n   and (Semantics.lts P l P') (ex (fun n : nat => iterate n F S P' Q')))"
                ],
                "tactic_res": [
                    "c22_goal : ex\n  (fun P' : process =>\n   and (Semantics.lts P l P') (ex (fun n : nat => iterate n F S P' Q')))",
                    "c22_P : process",
                    "c22_Q : process",
                    "c22_l : label",
                    "c22_Q' : process",
                    "c22_H3 : Semantics.lts Q l Q'",
                    "c22_H4 : F R P Q"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c22_goal : ex\n  (fun P' : process =>\n   and (Semantics.lts P l P') (ex (fun n : nat => iterate n F S P' Q')))",
                    "c2_H0 : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (F R) (closure F S)) (progresses (F R) (closure F S))",
                    "c2_H1 : subset R S"
                ],
                "tactic_res": [
                    "c23_goal : ex\n  (fun P' : process =>\n   and (Semantics.lts P l P') (ex (fun n : nat => iterate n F S P' Q')))",
                    "c23_H1 : and (subset (F R) (closure F S)) (progresses (F R) (closure F S))",
                    "c24_goal : progresses R S"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c24_goal : progresses R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c23_goal : ex\n  (fun P' : process =>\n   and (Semantics.lts P l P') (ex (fun n : nat => iterate n F S P' Q')))",
                    "c2_H1 : subset R S"
                ],
                "tactic_res": [
                    "c25_goal : Semantics.lts ?Q l Q'",
                    "c26_goal : F R P ?Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c25_goal : Semantics.lts ?Q l Q'",
                    "c22_H3 : Semantics.lts Q l Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c26_goal : F R P Q",
                    "c22_H4 : F R P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c21_goal : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : F R P Q),\nex\n  (fun Q' : process =>\n   and (Semantics.lts Q l Q') (ex (fun n : nat => iterate n F S P' Q')))"
                ],
                "tactic_res": [
                    "c27_goal : ex\n  (fun Q' : process =>\n   and (Semantics.lts Q l Q') (ex (fun n : nat => iterate n F S P' Q')))",
                    "c27_P : process",
                    "c27_Q : process",
                    "c27_l : label",
                    "c27_P' : process",
                    "c27_H3 : Semantics.lts P l P'",
                    "c27_H4 : F R P Q"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c27_goal : ex\n  (fun Q' : process =>\n   and (Semantics.lts Q l Q') (ex (fun n : nat => iterate n F S P' Q')))",
                    "c2_H0 : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (F R) (closure F S)) (progresses (F R) (closure F S))",
                    "c2_H1 : subset R S"
                ],
                "tactic_res": [
                    "c28_goal : ex\n  (fun Q' : process =>\n   and (Semantics.lts Q l Q') (ex (fun n : nat => iterate n F S P' Q')))",
                    "c28_H1 : and (subset (F R) (closure F S)) (progresses (F R) (closure F S))",
                    "c29_goal : progresses R S"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c29_goal : progresses R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c28_goal : ex\n  (fun Q' : process =>\n   and (Semantics.lts Q l Q') (ex (fun n : nat => iterate n F S P' Q')))",
                    "c2_H1 : subset R S"
                ],
                "tactic_res": [
                    "c30_goal : Semantics.lts ?P l P'",
                    "c31_goal : F R ?P Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c30_goal : Semantics.lts ?P l P'",
                    "c27_H3 : Semantics.lts P l P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c31_goal : F R P Q",
                    "c27_H4 : F R P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c6_goal : forall (S0 R : relation) (_ : subset R S0) (_ : progresses R S0),\nand (subset (iterate (S n) F R) (closure F S0))\n  (progresses (iterate (S n) F R) (closure F S0))"
                ],
                "tactic_res": [
                    "c32_goal : and (subset (iterate (Datatypes.S n) F R) (closure F S))\n  (progresses (iterate (Datatypes.S n) F R) (closure F S))",
                    "c32_S : relation",
                    "c32_R : relation",
                    "c32_H1 : subset R S",
                    "c32_H2 : progresses R S"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c32_goal : and (subset (iterate (Datatypes.S n) F R) (closure F S))\n  (progresses (iterate (Datatypes.S n) F R) (closure F S))"
                ],
                "tactic_res": [
                    "c33_goal : subset (iterate (Datatypes.S n) F R) (closure F S)",
                    "c34_goal : progresses (iterate (Datatypes.S n) F R) (closure F S)"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c33_goal : subset (iterate (Datatypes.S n) F R) (closure F S)",
                    "_global_subset : forall (_ : relation) (_ : relation), Prop"
                ],
                "tactic_res": [
                    "c35_goal : forall (P Q : process) (_ : iterate (Datatypes.S n) F R P Q),\nclosure F S P Q"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c35_goal : forall (P Q : process) (_ : iterate (Datatypes.S n) F R P Q),\nclosure F S P Q"
                ],
                "tactic_res": [
                    "c36_goal : forall (P Q : process) (_ : r_compose (F R) (iterate n F R) P Q),\nclosure F S P Q"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c36_goal : forall (P Q : process) (_ : r_compose (F R) (iterate n F R) P Q),\nclosure F S P Q"
                ],
                "tactic_res": [
                    "c37_goal : closure F S P Q",
                    "c37_P : process",
                    "c37_Q : process",
                    "c37_H3 : r_compose (F R) (iterate n F R) P Q"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ A ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ A ] .",
                "tactic_args": [
                    "c37_H3 : r_compose (F R) (iterate n F R) P Q"
                ],
                "tactic_res": [
                    "c37_H3 : and (F R P A) (iterate n F R A Q)",
                    "c37_A : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c37_H3 : r_compose (F R) (iterate n F R) P Q"
                ],
                "tactic_res": [
                    "c37_H4 : iterate n F R A Q",
                    "c37_H3 : F R P A"
                ]
            },
            {
                "tactic_sig": "assert ( progresses _i _i ) .",
                "tactic_sig_no_out_arg": "assert ( progresses _i _i ) .",
                "tactic_args": [
                    "c37_goal : closure F S P Q",
                    "c2_R : relation",
                    "c2_S : relation"
                ],
                "tactic_res": [
                    "c38_goal : progresses R S",
                    "c39_goal : closure F S P Q",
                    "c39_H5 : progresses R S"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c38_goal : progresses R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i in _i .",
                "tactic_sig_no_out_arg": "apply _i in _i .",
                "tactic_args": [
                    "c39_goal : closure F S P Q",
                    "c6_IHn : forall (S R : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (iterate n F R) (closure F S))\n  (progresses (iterate n F R) (closure F S))",
                    "c2_H2 : progresses R S"
                ],
                "tactic_res": [
                    "c40_goal : closure F S P Q",
                    "c40_H2 : and (subset (iterate n F R) (closure F S))\n  (progresses (iterate n F R) (closure F S))",
                    "c41_goal : subset R S"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c41_goal : subset R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ _i H2' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ _i H2' ] .",
                "tactic_args": [
                    "c2_H2 : progresses R S",
                    "c2_H2 : progresses R S"
                ],
                "tactic_res": [
                    "c40_H2' : progresses (iterate n F R) (closure F S)",
                    "c40_H2 : subset (iterate n F R) (closure F S)"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c2_H2 : progresses R S",
                    "c37_H4 : iterate n F R A Q"
                ],
                "tactic_res": [
                    "c40_H4 : closure F S A Q"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c40_goal : closure F S P Q",
                    "c2_H0 : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (F R) (closure F S)) (progresses (F R) (closure F S))",
                    "c2_H1 : subset R S"
                ],
                "tactic_res": [
                    "c42_goal : closure F S P Q",
                    "c42_H1 : and (subset (F R) (closure F S)) (progresses (F R) (closure F S))",
                    "c43_goal : progresses R S"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c43_goal : progresses R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H1 : subset R S"
                ],
                "tactic_res": [
                    "c42_H6 : progresses (F R) (closure F S)",
                    "c42_H1 : subset (F R) (closure F S)"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c2_H1 : subset R S",
                    "c37_H3 : r_compose (F R) (iterate n F R) P Q"
                ],
                "tactic_res": [
                    "c42_H3 : closure F S P A"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ n' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ n' ] .",
                "tactic_args": [
                    "c37_H3 : r_compose (F R) (iterate n F R) P Q"
                ],
                "tactic_res": [
                    "c42_H3 : iterate n' F S P A",
                    "c42_n' : nat"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ n'' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ n'' ] .",
                "tactic_args": [
                    "c37_H4 : iterate n F R A Q"
                ],
                "tactic_res": [
                    "c42_H4 : iterate n'' F S A Q",
                    "c42_n'' : nat"
                ]
            },
            {
                "tactic_sig": "exists ( 1 + ( _i + _i ) ) .",
                "tactic_sig_no_out_arg": "exists ( 1 + ( _i + _i ) ) .",
                "tactic_args": [
                    "c42_goal : closure F S P Q",
                    "c42_n' : nat",
                    "c42_n'' : nat"
                ],
                "tactic_res": [
                    "c44_goal : iterate (Init.Nat.add 1 (Init.Nat.add n' n'')) F S P Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c44_goal : iterate (Init.Nat.add 1 (Init.Nat.add n' n'')) F S P Q",
                    "_global_iterate_sum : forall (F : forall _ : relation, relation) \n         (R : relation) (P A Q : process) (n m : nat) \n         (_ : iterate n F R P A) (_ : iterate m F R A Q),\n       iterate (Datatypes.S (Init.Nat.add n m)) F R P Q"
                ],
                "tactic_res": [
                    "c45_goal : iterate n' F S P ?A",
                    "c46_goal : iterate n'' F S ?A Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c45_goal : iterate n' F S P ?A"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c46_goal : iterate n'' F S A Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c34_goal : progresses (iterate (Datatypes.S n) F R) (closure F S)"
                ],
                "tactic_res": [
                    "c47_goal : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : iterate (Datatypes.S n) F R P Q),\nex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))",
                    "c48_goal : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : iterate (Datatypes.S n) F R P Q),\nex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c47_goal : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : iterate (Datatypes.S n) F R P Q),\nex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))"
                ],
                "tactic_res": [
                    "c49_goal : ex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))",
                    "c49_P : process",
                    "c49_Q : process",
                    "c49_l : label",
                    "c49_Q' : process",
                    "c49_H3 : Semantics.lts Q l Q'",
                    "c49_H4 : iterate (Datatypes.S n) F R P Q"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c49_H4 : iterate (Datatypes.S n) F R P Q"
                ],
                "tactic_res": [
                    "c49_H4 : r_compose (F R) (iterate n F R) P Q"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ A ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ A ] .",
                "tactic_args": [
                    "c49_H4 : iterate (Datatypes.S n) F R P Q"
                ],
                "tactic_res": [
                    "c49_H4 : and (F R P A) (iterate n F R A Q)",
                    "c49_A : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c49_H4 : iterate (Datatypes.S n) F R P Q"
                ],
                "tactic_res": [
                    "c49_H5 : iterate n F R A Q",
                    "c49_H4 : F R P A"
                ]
            },
            {
                "tactic_sig": "assert ( subset _i _i ) .",
                "tactic_sig_no_out_arg": "assert ( subset _i _i ) .",
                "tactic_args": [
                    "c49_goal : ex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))",
                    "c2_R : relation",
                    "c2_S : relation"
                ],
                "tactic_res": [
                    "c50_goal : subset R S",
                    "c51_goal : ex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))",
                    "c51_H6 : subset R S"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c50_goal : subset R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c51_goal : ex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))",
                    "c6_IHn : forall (S R : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (iterate n F R) (closure F S))\n  (progresses (iterate n F R) (closure F S))",
                    "c51_H6 : subset R S"
                ],
                "tactic_res": [
                    "c52_goal : ex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))",
                    "c52_H6 : and (subset (iterate n F R) (closure F S))\n  (progresses (iterate n F R) (closure F S))",
                    "c53_goal : progresses R S"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c53_goal : progresses R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( subset _i _i ) .",
                "tactic_sig_no_out_arg": "assert ( subset _i _i ) .",
                "tactic_args": [
                    "c52_goal : ex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))",
                    "c2_R : relation",
                    "c2_S : relation"
                ],
                "tactic_res": [
                    "c54_goal : subset R S",
                    "c55_goal : ex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))",
                    "c55_H7 : subset R S"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c54_goal : subset R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c55_goal : ex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))",
                    "c2_H0 : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (F R) (closure F S)) (progresses (F R) (closure F S))",
                    "c55_H7 : subset R S"
                ],
                "tactic_res": [
                    "c56_goal : ex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))",
                    "c56_H7 : and (subset (F R) (closure F S)) (progresses (F R) (closure F S))",
                    "c57_goal : progresses R S"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c57_goal : progresses R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c55_H7 : subset R S"
                ],
                "tactic_res": [
                    "c56_H8 : progresses (F R) (closure F S)",
                    "c56_H7 : subset (F R) (closure F S)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ _i _ ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ _i _ ] .",
                "tactic_args": [
                    "c56_H8 : progresses (F R) (closure F S)",
                    "c56_H8 : progresses (F R) (closure F S)"
                ],
                "tactic_res": [
                    "c56_H8 : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : F R P Q),\nex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ _ _i ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ _ _i ] .",
                "tactic_args": [
                    "c51_H6 : subset R S",
                    "c51_H6 : subset R S"
                ],
                "tactic_res": [
                    "c56_H6 : progresses (iterate n F R) (closure F S)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ _i _ ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ _i _ ] .",
                "tactic_args": [
                    "c51_H6 : subset R S",
                    "c51_H6 : subset R S"
                ],
                "tactic_res": [
                    "c56_H6 : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q') (_ : iterate n F R P Q),\nex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c56_goal : ex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))",
                    "c51_H6 : subset R S",
                    "c49_H5 : iterate n F R A Q"
                ],
                "tactic_res": [
                    "c58_goal : ex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))",
                    "c58_H5 : ex\n  (fun P' : process => and (Semantics.lts A ?l P') (closure F S P' ?Q'))",
                    "c59_goal : Semantics.lts Q ?l ?Q'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c49_H5 : iterate n F R A Q"
                ],
                "tactic_res": [
                    "c58_H5 : and (Semantics.lts A ?l x) (closure F S x ?Q')",
                    "c58_x : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c49_H5 : iterate n F R A Q"
                ],
                "tactic_res": [
                    "c58_H9 : closure F S x ?Q'",
                    "c58_H5 : Semantics.lts A ?l x"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c58_goal : ex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))",
                    "c56_H8 : progresses (F R) (closure F S)",
                    "c49_H4 : iterate (Datatypes.S n) F R P Q"
                ],
                "tactic_res": [
                    "c60_goal : ex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))",
                    "c60_H9 : closure F S x ?Q'0",
                    "c60_H5 : Semantics.lts A ?l0 x",
                    "c60_H4 : ex\n  (fun P' : process => and (Semantics.lts P ?l P') (closure F S P' ?Q'))",
                    "c61_goal : Semantics.lts A ?l ?Q'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c49_H4 : iterate (Datatypes.S n) F R P Q"
                ],
                "tactic_res": [
                    "c60_H4 : and (Semantics.lts P ?l x0) (closure F S x0 ?Q')",
                    "c60_x0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c49_H4 : iterate (Datatypes.S n) F R P Q"
                ],
                "tactic_res": [
                    "c60_H10 : closure F S x0 ?Q'",
                    "c60_H4 : Semantics.lts P ?l x0"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c60_goal : ex (fun P' : process => and (Semantics.lts P l P') (closure F S P' Q'))",
                    "c60_x0 : process"
                ],
                "tactic_res": [
                    "c62_goal : and (Semantics.lts P l x0) (closure F S x0 Q')"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c62_goal : and (Semantics.lts P l x0) (closure F S x0 Q')"
                ],
                "tactic_res": [
                    "c63_goal : Semantics.lts P l x0",
                    "c64_goal : closure F S x0 Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c63_goal : Semantics.lts P l x0",
                    "c49_H4 : iterate (Datatypes.S n) F R P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c64_goal : closure F S x0 Q'",
                    "_global_closure_compose : forall (A P Q : process) (F : forall _ : relation, relation)\n         (R : relation) (_ : closure F R P A) (_ : closure F R A Q),\n       closure F R P Q"
                ],
                "tactic_res": [
                    "c65_goal : closure F S x0 ?A",
                    "c66_goal : closure F S ?A Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c65_goal : closure F S x0 ?A",
                    "c60_H10 : closure F S x0 ?Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c66_goal : closure F S ?A Q'",
                    "c58_H9 : closure F S x ?Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c61_goal : Semantics.lts A l x",
                    "c49_H5 : iterate n F R A Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c59_goal : Semantics.lts Q l Q'",
                    "c49_H3 : Semantics.lts Q l Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c48_goal : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : iterate (Datatypes.S n) F R P Q),\nex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))"
                ],
                "tactic_res": [
                    "c67_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))",
                    "c67_P : process",
                    "c67_Q : process",
                    "c67_l : label",
                    "c67_P' : process",
                    "c67_H3 : Semantics.lts P l P'",
                    "c67_H4 : iterate (Datatypes.S n) F R P Q"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c67_H4 : iterate (Datatypes.S n) F R P Q"
                ],
                "tactic_res": [
                    "c67_H4 : r_compose (F R) (iterate n F R) P Q"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ A ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ A ] .",
                "tactic_args": [
                    "c67_H4 : iterate (Datatypes.S n) F R P Q"
                ],
                "tactic_res": [
                    "c67_H4 : and (F R P A) (iterate n F R A Q)",
                    "c67_A : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c67_H4 : iterate (Datatypes.S n) F R P Q"
                ],
                "tactic_res": [
                    "c67_H5 : iterate n F R A Q",
                    "c67_H4 : F R P A"
                ]
            },
            {
                "tactic_sig": "assert ( subset _i _i ) .",
                "tactic_sig_no_out_arg": "assert ( subset _i _i ) .",
                "tactic_args": [
                    "c67_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))",
                    "c2_R : relation",
                    "c2_S : relation"
                ],
                "tactic_res": [
                    "c68_goal : subset R S",
                    "c69_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))",
                    "c69_H6 : subset R S"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c68_goal : subset R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c69_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))",
                    "c6_IHn : forall (S R : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (iterate n F R) (closure F S))\n  (progresses (iterate n F R) (closure F S))",
                    "c69_H6 : subset R S"
                ],
                "tactic_res": [
                    "c70_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))",
                    "c70_H6 : and (subset (iterate n F R) (closure F S))\n  (progresses (iterate n F R) (closure F S))",
                    "c71_goal : progresses R S"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c71_goal : progresses R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "assert ( subset _i _i ) .",
                "tactic_sig_no_out_arg": "assert ( subset _i _i ) .",
                "tactic_args": [
                    "c70_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))",
                    "c2_R : relation",
                    "c2_S : relation"
                ],
                "tactic_res": [
                    "c72_goal : subset R S",
                    "c73_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))",
                    "c73_H7 : subset R S"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c72_goal : subset R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c73_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))",
                    "c2_H0 : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (F R) (closure F S)) (progresses (F R) (closure F S))",
                    "c73_H7 : subset R S"
                ],
                "tactic_res": [
                    "c74_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))",
                    "c74_H7 : and (subset (F R) (closure F S)) (progresses (F R) (closure F S))",
                    "c75_goal : progresses R S"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c75_goal : progresses R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c73_H7 : subset R S"
                ],
                "tactic_res": [
                    "c74_H8 : progresses (F R) (closure F S)",
                    "c74_H7 : subset (F R) (closure F S)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ _ _i ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ _ _i ] .",
                "tactic_args": [
                    "c74_H8 : progresses (F R) (closure F S)",
                    "c74_H8 : progresses (F R) (closure F S)"
                ],
                "tactic_res": [
                    "c74_H8 : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : F R P Q),\nex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ _ _i ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ _ _i ] .",
                "tactic_args": [
                    "c69_H6 : subset R S",
                    "c69_H6 : subset R S"
                ],
                "tactic_res": [
                    "c74_H6 : progresses (iterate n F R) (closure F S)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ _ _i ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ _ _i ] .",
                "tactic_args": [
                    "c69_H6 : subset R S",
                    "c69_H6 : subset R S"
                ],
                "tactic_res": [
                    "c74_H6 : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P') (_ : iterate n F R P Q),\nex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c74_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))",
                    "c74_H8 : progresses (F R) (closure F S)",
                    "c67_H4 : iterate (Datatypes.S n) F R P Q"
                ],
                "tactic_res": [
                    "c76_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))",
                    "c76_H4 : ex\n  (fun Q' : process => and (Semantics.lts A ?l Q') (closure F S ?P' Q'))",
                    "c77_goal : Semantics.lts P ?l ?P'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c67_H4 : iterate (Datatypes.S n) F R P Q"
                ],
                "tactic_res": [
                    "c76_H4 : and (Semantics.lts A ?l x) (closure F S ?P' x)",
                    "c76_x : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c67_H4 : iterate (Datatypes.S n) F R P Q"
                ],
                "tactic_res": [
                    "c76_H9 : closure F S ?P' x",
                    "c76_H4 : Semantics.lts A ?l x"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c76_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))",
                    "c69_H6 : subset R S",
                    "c67_H5 : iterate n F R A Q"
                ],
                "tactic_res": [
                    "c78_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))",
                    "c78_H9 : closure F S ?P'0 x",
                    "c78_H4 : Semantics.lts A ?l0 x",
                    "c78_H5 : ex\n  (fun Q' : process => and (Semantics.lts Q ?l Q') (closure F S ?P' Q'))",
                    "c79_goal : Semantics.lts A ?l ?P'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c67_H5 : iterate n F R A Q"
                ],
                "tactic_res": [
                    "c78_H5 : and (Semantics.lts Q ?l x0) (closure F S ?P' x0)",
                    "c78_x0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c67_H5 : iterate n F R A Q"
                ],
                "tactic_res": [
                    "c78_H10 : closure F S ?P' x0",
                    "c78_H5 : Semantics.lts Q ?l x0"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c78_goal : ex (fun Q' : process => and (Semantics.lts Q l Q') (closure F S P' Q'))",
                    "c78_x0 : process"
                ],
                "tactic_res": [
                    "c80_goal : and (Semantics.lts Q l x0) (closure F S P' x0)"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c80_goal : and (Semantics.lts Q l x0) (closure F S P' x0)"
                ],
                "tactic_res": [
                    "c81_goal : Semantics.lts Q l x0",
                    "c82_goal : closure F S P' x0"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c81_goal : Semantics.lts Q l x0",
                    "c67_H5 : iterate n F R A Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c82_goal : closure F S P' x0",
                    "_global_closure_compose : forall (A P Q : process) (F : forall _ : relation, relation)\n         (R : relation) (_ : closure F R P A) (_ : closure F R A Q),\n       closure F R P Q"
                ],
                "tactic_res": [
                    "c83_goal : closure F S P' ?A",
                    "c84_goal : closure F S ?A x0"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c83_goal : closure F S P' ?A",
                    "c76_H9 : closure F S ?P' x"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c84_goal : closure F S x x0",
                    "c78_H10 : closure F S ?P' x0"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c79_goal : Semantics.lts A l x",
                    "c67_H4 : iterate (Datatypes.S n) F R P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c77_goal : Semantics.lts P l P'",
                    "c67_H3 : Semantics.lts P l P'"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "closure_safe",
        "proof": [
            {
                "tactic_sig": "Theorem closure_safe : forall F , ( forall f , symmetric f -> symmetric ( F f ) ) -> ( forall R S , subset R S -> progresses R S -> subset ( F R ) ( closure F S ) /\\ ( progresses ( F R ) ( closure F S ) ) ) -> strongly_safe ( closure F ) .",
                "tactic_sig_no_out_arg": "Theorem closure_safe : forall F , ( forall f , symmetric f -> symmetric ( F f ) ) -> ( forall R S , subset R S -> progresses R S -> subset ( F R ) ( closure F S ) /\\ ( progresses ( F R ) ( closure F S ) ) ) -> strongly_safe ( closure F ) .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (F : forall _ : relation, relation)\n  (_ : forall (f : relation) (_ : symmetric f), symmetric (F f))\n  (_ : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\n       and (subset (F R) (closure F S))\n         (progresses (F R) (closure F S))), strongly_safe (closure F)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (F : forall _ : relation, relation)\n  (_ : forall (f : relation) (_ : symmetric f), symmetric (F f))\n  (_ : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\n       and (subset (F R) (closure F S))\n         (progresses (F R) (closure F S))), strongly_safe (closure F)"
                ],
                "tactic_res": [
                    "c2_goal : strongly_safe (closure F)",
                    "c2_F : forall _ : relation, relation",
                    "c2_H : forall (f : relation) (_ : symmetric f), symmetric (F f)",
                    "c2_H0 : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (F R) (closure F S)) (progresses (F R) (closure F S))"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c2_goal : strongly_safe (closure F)",
                    "_global_closure : forall (_ : forall _ : relation, relation) \n         (_ : relation) (_ : process) (_ : process), Prop"
                ],
                "tactic_res": [
                    "c3_goal : strongly_safe\n  (fun (R : relation) (P Q : process) =>\n   ex (fun n : nat => iterate n F R P Q))"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c3_goal : strongly_safe\n  (fun (R : relation) (P Q : process) =>\n   ex (fun n : nat => iterate n F R P Q))",
                    "_global_strongly_safe : forall _ : forall _ : relation, relation, Prop"
                ],
                "tactic_res": [
                    "c4_goal : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\nand\n  (subset (fun P Q : process => ex (fun n : nat => iterate n F R P Q))\n     (fun P Q : process => ex (fun n : nat => iterate n F S P Q)))\n  (progresses\n     (fun P Q : process => ex (fun n : nat => iterate n F R P Q))\n     (fun P Q : process => ex (fun n : nat => iterate n F S P Q)))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c4_goal : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\nand\n  (subset (fun P Q : process => ex (fun n : nat => iterate n F R P Q))\n     (fun P Q : process => ex (fun n : nat => iterate n F S P Q)))\n  (progresses\n     (fun P Q : process => ex (fun n : nat => iterate n F R P Q))\n     (fun P Q : process => ex (fun n : nat => iterate n F S P Q)))"
                ],
                "tactic_res": [
                    "c5_goal : and\n  (subset (fun P Q : process => ex (fun n : nat => iterate n F R P Q))\n     (fun P Q : process => ex (fun n : nat => iterate n F S P Q)))\n  (progresses\n     (fun P Q : process => ex (fun n : nat => iterate n F R P Q))\n     (fun P Q : process => ex (fun n : nat => iterate n F S P Q)))",
                    "c5_R : relation",
                    "c5_S : relation",
                    "c5_H1 : subset R S",
                    "c5_H2 : progresses R S"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c5_goal : and\n  (subset (fun P Q : process => ex (fun n : nat => iterate n F R P Q))\n     (fun P Q : process => ex (fun n : nat => iterate n F S P Q)))\n  (progresses\n     (fun P Q : process => ex (fun n : nat => iterate n F R P Q))\n     (fun P Q : process => ex (fun n : nat => iterate n F S P Q)))"
                ],
                "tactic_res": [
                    "c6_goal : subset (fun P Q : process => ex (fun n : nat => iterate n F R P Q))\n  (fun P Q : process => ex (fun n : nat => iterate n F S P Q))",
                    "c7_goal : progresses (fun P Q : process => ex (fun n : nat => iterate n F R P Q))\n  (fun P Q : process => ex (fun n : nat => iterate n F S P Q))"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c6_goal : subset (fun P Q : process => ex (fun n : nat => iterate n F R P Q))\n  (fun P Q : process => ex (fun n : nat => iterate n F S P Q))",
                    "_global_subset : forall (_ : relation) (_ : relation), Prop"
                ],
                "tactic_res": [
                    "c8_goal : forall (P Q : process) (_ : ex (fun n : nat => iterate n F R P Q)),\nex (fun n : nat => iterate n F S P Q)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c8_goal : forall (P Q : process) (_ : ex (fun n : nat => iterate n F R P Q)),\nex (fun n : nat => iterate n F S P Q)"
                ],
                "tactic_res": [
                    "c9_goal : ex (fun n : nat => iterate n F S P Q)",
                    "c9_P : process",
                    "c9_Q : process",
                    "c9_H3 : ex (fun n : nat => iterate n F R P Q)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ n ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ n ] .",
                "tactic_args": [
                    "c9_H3 : ex (fun n : nat => iterate n F R P Q)"
                ],
                "tactic_res": [
                    "c9_H3 : iterate n F R P Q",
                    "c9_n : nat"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c9_goal : ex (fun n : nat => iterate n F S P Q)",
                    "_global_iterate_progresses : forall (R S : relation) (F : forall _ : relation, relation) \n         (n : nat)\n         (_ : forall (f : relation) (_ : symmetric f), symmetric (F f))\n         (_ : forall (R0 S0 : relation) (_ : subset R0 S0)\n                (_ : progresses R0 S0),\n              and (subset (F R0) (closure F S0))\n                (progresses (F R0) (closure F S0))) \n         (_ : subset R S) (_ : progresses R S),\n       and (subset (iterate n F R) (closure F S))\n         (progresses (iterate n F R) (closure F S))"
                ],
                "tactic_res": [
                    "c10_goal : forall (f : relation) (_ : symmetric f), symmetric (F f)",
                    "c11_goal : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (F R) (closure F S)) (progresses (F R) (closure F S))",
                    "c12_goal : subset ?R S",
                    "c13_goal : progresses ?R S",
                    "c14_goal : iterate ?n F ?R P Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c10_goal : forall (f : relation) (_ : symmetric f), symmetric (F f)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c11_goal : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (F R) (closure F S)) (progresses (F R) (closure F S))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c12_goal : subset ?R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c13_goal : progresses R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c14_goal : iterate ?n F R P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c7_goal : progresses (fun P Q : process => ex (fun n : nat => iterate n F R P Q))\n  (fun P Q : process => ex (fun n : nat => iterate n F S P Q))",
                    "_global_progresses : forall (_ : relation) (_ : forall (_ : process) (_ : process), Prop),\n       Prop"
                ],
                "tactic_res": [
                    "c15_goal : and\n  (forall (P Q : process) (l : Semantics.label) (Q' : process)\n     (_ : Semantics.lts Q l Q')\n     (_ : ex (fun n : nat => iterate n F R P Q)),\n   ex\n     (fun P' : process =>\n      and (Semantics.lts P l P')\n        (ex (fun n : nat => iterate n F S P' Q'))))\n  (forall (P Q : process) (l : Semantics.label) (P' : process)\n     (_ : Semantics.lts P l P')\n     (_ : ex (fun n : nat => iterate n F R P Q)),\n   ex\n     (fun Q' : process =>\n      and (Semantics.lts Q l Q')\n        (ex (fun n : nat => iterate n F S P' Q'))))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c15_goal : and\n  (forall (P Q : process) (l : Semantics.label) (Q' : process)\n     (_ : Semantics.lts Q l Q')\n     (_ : ex (fun n : nat => iterate n F R P Q)),\n   ex\n     (fun P' : process =>\n      and (Semantics.lts P l P')\n        (ex (fun n : nat => iterate n F S P' Q'))))\n  (forall (P Q : process) (l : Semantics.label) (P' : process)\n     (_ : Semantics.lts P l P')\n     (_ : ex (fun n : nat => iterate n F R P Q)),\n   ex\n     (fun Q' : process =>\n      and (Semantics.lts Q l Q')\n        (ex (fun n : nat => iterate n F S P' Q'))))"
                ],
                "tactic_res": [
                    "c16_goal : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q')\n  (_ : ex (fun n : nat => iterate n F R P Q)),\nex\n  (fun P' : process =>\n   and (Semantics.lts P l P') (ex (fun n : nat => iterate n F S P' Q')))",
                    "c17_goal : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P')\n  (_ : ex (fun n : nat => iterate n F R P Q)),\nex\n  (fun Q' : process =>\n   and (Semantics.lts Q l Q') (ex (fun n : nat => iterate n F S P' Q')))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c16_goal : forall (P Q : process) (l : Semantics.label) (Q' : process)\n  (_ : Semantics.lts Q l Q')\n  (_ : ex (fun n : nat => iterate n F R P Q)),\nex\n  (fun P' : process =>\n   and (Semantics.lts P l P') (ex (fun n : nat => iterate n F S P' Q')))"
                ],
                "tactic_res": [
                    "c18_goal : ex\n  (fun P' : process =>\n   and (Semantics.lts P l P') (ex (fun n : nat => iterate n F S P' Q')))",
                    "c18_P : process",
                    "c18_Q : process",
                    "c18_l : label",
                    "c18_Q' : process",
                    "c18_H3 : Semantics.lts Q l Q'",
                    "c18_H4 : ex (fun n : nat => iterate n F R P Q)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c18_H4 : ex (fun n : nat => iterate n F R P Q)"
                ],
                "tactic_res": [
                    "c18_H4 : iterate x F R P Q",
                    "c18_x : nat"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c18_goal : ex\n  (fun P' : process =>\n   and (Semantics.lts P l P') (ex (fun n : nat => iterate n F S P' Q')))",
                    "_global_iterate_progresses : forall (R S : relation) (F : forall _ : relation, relation) \n         (n : nat)\n         (_ : forall (f : relation) (_ : symmetric f), symmetric (F f))\n         (_ : forall (R0 S0 : relation) (_ : subset R0 S0)\n                (_ : progresses R0 S0),\n              and (subset (F R0) (closure F S0))\n                (progresses (F R0) (closure F S0))) \n         (_ : subset R S) (_ : progresses R S),\n       and (subset (iterate n F R) (closure F S))\n         (progresses (iterate n F R) (closure F S))",
                    "c5_H1 : subset R S"
                ],
                "tactic_res": [
                    "c19_goal : ex\n  (fun P' : process =>\n   and (Semantics.lts P l P') (ex (fun n : nat => iterate n F S P' Q')))",
                    "c19_H1 : and (subset (iterate ?n ?F R) (closure ?F S))\n  (progresses (iterate ?n ?F R) (closure ?F S))",
                    "c20_goal : forall (f : relation) (_ : symmetric f), symmetric (?F f)",
                    "c21_goal : forall (R0 S0 : relation) (_ : subset R0 S0) (_ : progresses R0 S0),\nand (subset (?F R0) (closure ?F S0))\n  (progresses (?F R0) (closure ?F S0))",
                    "c22_goal : progresses R S"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c20_goal : forall (f : relation) (_ : symmetric f), symmetric (?F f)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c21_goal : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (F R) (closure F S)) (progresses (F R) (closure F S))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c22_goal : progresses R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c19_goal : ex\n  (fun P' : process =>\n   and (Semantics.lts P l P') (ex (fun n : nat => iterate n F S P' Q')))",
                    "c5_H1 : subset R S"
                ],
                "tactic_res": [
                    "c23_goal : Semantics.lts ?Q l Q'",
                    "c24_goal : iterate ?n F R P ?Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c23_goal : Semantics.lts ?Q l Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c24_goal : iterate ?n F R P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c17_goal : forall (P Q : process) (l : Semantics.label) (P' : process)\n  (_ : Semantics.lts P l P')\n  (_ : ex (fun n : nat => iterate n F R P Q)),\nex\n  (fun Q' : process =>\n   and (Semantics.lts Q l Q') (ex (fun n : nat => iterate n F S P' Q')))"
                ],
                "tactic_res": [
                    "c25_goal : ex\n  (fun Q' : process =>\n   and (Semantics.lts Q l Q') (ex (fun n : nat => iterate n F S P' Q')))",
                    "c25_P : process",
                    "c25_Q : process",
                    "c25_l : label",
                    "c25_P' : process",
                    "c25_H3 : Semantics.lts P l P'",
                    "c25_H4 : ex (fun n : nat => iterate n F R P Q)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c25_H4 : ex (fun n : nat => iterate n F R P Q)"
                ],
                "tactic_res": [
                    "c25_H4 : iterate x F R P Q",
                    "c25_x : nat"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c25_goal : ex\n  (fun Q' : process =>\n   and (Semantics.lts Q l Q') (ex (fun n : nat => iterate n F S P' Q')))",
                    "_global_iterate_progresses : forall (R S : relation) (F : forall _ : relation, relation) \n         (n : nat)\n         (_ : forall (f : relation) (_ : symmetric f), symmetric (F f))\n         (_ : forall (R0 S0 : relation) (_ : subset R0 S0)\n                (_ : progresses R0 S0),\n              and (subset (F R0) (closure F S0))\n                (progresses (F R0) (closure F S0))) \n         (_ : subset R S) (_ : progresses R S),\n       and (subset (iterate n F R) (closure F S))\n         (progresses (iterate n F R) (closure F S))",
                    "c5_H1 : subset R S"
                ],
                "tactic_res": [
                    "c26_goal : ex\n  (fun Q' : process =>\n   and (Semantics.lts Q l Q') (ex (fun n : nat => iterate n F S P' Q')))",
                    "c26_H1 : and (subset (iterate ?n ?F R) (closure ?F S))\n  (progresses (iterate ?n ?F R) (closure ?F S))",
                    "c27_goal : forall (f : relation) (_ : symmetric f), symmetric (?F f)",
                    "c28_goal : forall (R0 S0 : relation) (_ : subset R0 S0) (_ : progresses R0 S0),\nand (subset (?F R0) (closure ?F S0))\n  (progresses (?F R0) (closure ?F S0))",
                    "c29_goal : progresses R S"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c27_goal : forall (f : relation) (_ : symmetric f), symmetric (?F f)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c28_goal : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (F R) (closure F S)) (progresses (F R) (closure F S))"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c29_goal : progresses R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c26_goal : ex\n  (fun Q' : process =>\n   and (Semantics.lts Q l Q') (ex (fun n : nat => iterate n F S P' Q')))",
                    "c5_H1 : subset R S"
                ],
                "tactic_res": [
                    "c30_goal : Semantics.lts ?P l P'",
                    "c31_goal : iterate ?n F R ?P Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c30_goal : Semantics.lts ?P l P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c31_goal : iterate ?n F R P Q"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "ni_compose_fill",
        "proof": [
            {
                "tactic_sig": "Theorem ni_compose_fill : forall nc1 nc2 P , ni_fill nc1 ( ni_fill nc2 P ) = ni_fill ( ni_compose nc1 nc2 ) P .",
                "tactic_sig_no_out_arg": "Theorem ni_compose_fill : forall nc1 nc2 P , ni_fill nc1 ( ni_fill nc2 P ) = ni_fill ( ni_compose nc1 nc2 ) P .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (nc1 nc2 : ni_context) (P : process),\neq (ni_fill nc1 (ni_fill nc2 P)) (ni_fill (ni_compose nc1 nc2) P)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (nc1 nc2 : ni_context) (P : process),\neq (ni_fill nc1 (ni_fill nc2 P)) (ni_fill (ni_compose nc1 nc2) P)"
                ],
                "tactic_res": [
                    "c2_goal : eq (ni_fill nc1 (ni_fill nc2 P)) (ni_fill (ni_compose nc1 nc2) P)",
                    "c2_nc1 : ni_context",
                    "c2_nc2 : ni_context",
                    "c2_P : process"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c2_goal : eq (ni_fill nc1 (ni_fill nc2 P)) (ni_fill (ni_compose nc1 nc2) P)",
                    "c2_nc1 : ni_context"
                ],
                "tactic_res": [
                    "c3_goal : eq (ni_fill (ni_output c c0 nc1) (ni_fill nc2 P))\n  (ni_fill (ni_compose (ni_output c c0 nc1) nc2) P)",
                    "c3_IHnc1 : eq (ni_fill nc1 (ni_fill nc2 P)) (ni_fill (ni_compose nc1 nc2) P)",
                    "c3_c0 : channel",
                    "c3_c : channel",
                    "c4_goal : eq (ni_fill (ni_replicate nc1) (ni_fill nc2 P))\n  (ni_fill (ni_compose (ni_replicate nc1) nc2) P)",
                    "c4_IHnc1 : eq (ni_fill nc1 (ni_fill nc2 P)) (ni_fill (ni_compose nc1 nc2) P)",
                    "c5_goal : eq (ni_fill (ni_compose_l nc1 p) (ni_fill nc2 P))\n  (ni_fill (ni_compose (ni_compose_l nc1 p) nc2) P)",
                    "c5_IHnc1 : eq (ni_fill nc1 (ni_fill nc2 P)) (ni_fill (ni_compose nc1 nc2) P)",
                    "c5_p : process",
                    "c6_goal : eq (ni_fill (ni_compose_r p nc1) (ni_fill nc2 P))\n  (ni_fill (ni_compose (ni_compose_r p nc1) nc2) P)",
                    "c6_IHnc1 : eq (ni_fill nc1 (ni_fill nc2 P)) (ni_fill (ni_compose nc1 nc2) P)",
                    "c6_p : process",
                    "c7_goal : eq (ni_fill ni_hole (ni_fill nc2 P))\n  (ni_fill (ni_compose ni_hole nc2) P)"
                ]
            },
            {
                "tactic_sig": "try ( simpl ; rewrite _i ; eauto ) .",
                "tactic_sig_no_out_arg": "try ( simpl ; rewrite _i ; eauto ) .",
                "tactic_args": [
                    "c3_goal : eq (ni_fill (ni_output c c0 nc1) (ni_fill nc2 P))\n  (ni_fill (ni_compose (ni_output c c0 nc1) nc2) P)",
                    "c3_IHnc1 : eq (ni_fill nc1 (ni_fill nc2 P)) (ni_fill (ni_compose nc1 nc2) P)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try ( simpl ; rewrite _i ; eauto ) .",
                "tactic_sig_no_out_arg": "try ( simpl ; rewrite _i ; eauto ) .",
                "tactic_args": [
                    "c4_goal : eq (ni_fill (ni_replicate nc1) (ni_fill nc2 P))\n  (ni_fill (ni_compose (ni_replicate nc1) nc2) P)",
                    "c3_IHnc1 : eq (ni_fill nc1 (ni_fill nc2 P)) (ni_fill (ni_compose nc1 nc2) P)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try ( simpl ; rewrite _i ; eauto ) .",
                "tactic_sig_no_out_arg": "try ( simpl ; rewrite _i ; eauto ) .",
                "tactic_args": [
                    "c5_goal : eq (ni_fill (ni_compose_l nc1 p) (ni_fill nc2 P))\n  (ni_fill (ni_compose (ni_compose_l nc1 p) nc2) P)",
                    "c3_IHnc1 : eq (ni_fill nc1 (ni_fill nc2 P)) (ni_fill (ni_compose nc1 nc2) P)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try ( simpl ; rewrite _i ; eauto ) .",
                "tactic_sig_no_out_arg": "try ( simpl ; rewrite _i ; eauto ) .",
                "tactic_args": [
                    "c6_goal : eq (ni_fill (ni_compose_r p nc1) (ni_fill nc2 P))\n  (ni_fill (ni_compose (ni_compose_r p nc1) nc2) P)",
                    "c3_IHnc1 : eq (ni_fill nc1 (ni_fill nc2 P)) (ni_fill (ni_compose nc1 nc2) P)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c7_goal : eq (ni_fill ni_hole (ni_fill nc2 P))\n  (ni_fill (ni_compose ni_hole nc2) P)"
                ],
                "tactic_res": [
                    "c8_goal : eq (ni_fill nc2 P) (ni_fill nc2 P)"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c8_goal : eq (ni_fill nc2 P) (ni_fill nc2 P)"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "ni_context_helper",
        "proof": [
            {
                "tactic_sig": "Lemma ni_context_helper : forall x R P Q C , iterate x ni_context_relation R P Q -> iterate x ni_context_relation R ( ni_fill C P ) ( ni_fill C Q ) .",
                "tactic_sig_no_out_arg": "Lemma ni_context_helper : forall x R P Q C , iterate x ni_context_relation R P Q -> iterate x ni_context_relation R ( ni_fill C P ) ( ni_fill C Q ) .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (x : nat) (R : relation) (P Q : process) (C : ni_context)\n  (_ : iterate x ni_context_relation R P Q),\niterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (x : nat) (R : relation) (P Q : process) (C : ni_context)\n  (_ : iterate x ni_context_relation R P Q),\niterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)"
                ],
                "tactic_res": [
                    "c2_goal : iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_x : nat",
                    "c2_R : relation",
                    "c2_P : process",
                    "c2_Q : process",
                    "c2_C : ni_context",
                    "c2_H : iterate x ni_context_relation R P Q"
                ]
            },
            {
                "tactic_sig": "generalize dependent _i .",
                "tactic_sig_no_out_arg": "generalize dependent _i .",
                "tactic_args": [
                    "c2_goal : iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c3_goal : forall (P : process) (_ : iterate x ni_context_relation R P Q),\niterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)"
                ]
            },
            {
                "tactic_sig": "generalize dependent _i .",
                "tactic_sig_no_out_arg": "generalize dependent _i .",
                "tactic_args": [
                    "c3_goal : forall (P : process) (_ : iterate x ni_context_relation R P Q),\niterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c4_goal : forall (Q P : process) (_ : iterate x ni_context_relation R P Q),\niterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c4_goal : forall (Q P : process) (_ : iterate x ni_context_relation R P Q),\niterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_x : nat"
                ],
                "tactic_res": [
                    "c5_goal : forall (Q P : process) (_ : iterate 0 ni_context_relation R P Q),\niterate 0 ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c6_goal : forall (Q P : process) (_ : iterate (S x) ni_context_relation R P Q),\niterate (S x) ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c6_IHx : forall (Q P : process) (_ : iterate x ni_context_relation R P Q),\niterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)"
                ]
            },
            {
                "tactic_sig": "simpl in * .",
                "tactic_sig_no_out_arg": "simpl in * .",
                "tactic_args": [
                    "c5_goal : forall (Q P : process) (_ : iterate 0 ni_context_relation R P Q),\niterate 0 ni_context_relation R (ni_fill C P) (ni_fill C Q)"
                ],
                "tactic_res": [
                    "c7_goal : forall (Q P : process) (_ : ni_context_relation R P Q),\nni_context_relation R (ni_fill C P) (ni_fill C Q)"
                ]
            },
            {
                "tactic_sig": "simpl in * .",
                "tactic_sig_no_out_arg": "simpl in * .",
                "tactic_args": [
                    "c6_goal : forall (Q P : process) (_ : iterate (S x) ni_context_relation R P Q),\niterate (S x) ni_context_relation R (ni_fill C P) (ni_fill C Q)"
                ],
                "tactic_res": [
                    "c8_goal : forall (Q P : process)\n  (_ : r_compose (ni_context_relation R)\n         (iterate x ni_context_relation R) P Q),\nr_compose (ni_context_relation R) (iterate x ni_context_relation R)\n  (ni_fill C P) (ni_fill C Q)"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c7_goal : forall (Q P : process) (_ : ni_context_relation R P Q),\nni_context_relation R (ni_fill C P) (ni_fill C Q)"
                ],
                "tactic_res": [
                    "c9_goal : ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c9_Q : process",
                    "c9_P : process",
                    "c9_H : ni_context_relation R P Q"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ C' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ C' ] .",
                "tactic_args": [
                    "c2_H : iterate x ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c9_H : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (R P' Q') (and (eq P (ni_fill C' P')) (eq Q (ni_fill C' Q')))))",
                    "c9_C' : ni_context"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ P' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P' ] .",
                "tactic_args": [
                    "c2_H : iterate x ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c9_H : ex\n  (fun Q' : process =>\n   and (R P' Q') (and (eq P (ni_fill C' P')) (eq Q (ni_fill C' Q'))))",
                    "c9_P' : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q' ] .",
                "tactic_args": [
                    "c2_H : iterate x ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c9_H : and (R P' Q') (and (eq P (ni_fill C' P')) (eq Q (ni_fill C' Q')))",
                    "c9_Q' : process"
                ]
            },
            {
                "tactic_sig": "exists ( ni_compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( ni_compose _i _i ) .",
                "tactic_args": [
                    "c9_goal : ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c9_C' : ni_context"
                ],
                "tactic_res": [
                    "c10_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (R P' Q')\n        (and (eq (ni_fill C P) (ni_fill (ni_compose C C') P'))\n           (eq (ni_fill C Q) (ni_fill (ni_compose C C') Q')))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c10_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (R P' Q')\n        (and (eq (ni_fill C P) (ni_fill (ni_compose C C') P'))\n           (eq (ni_fill C Q) (ni_fill (ni_compose C C') Q')))))",
                    "c9_P' : process"
                ],
                "tactic_res": [
                    "c11_goal : ex\n  (fun Q' : process =>\n   and (R P' Q')\n     (and (eq (ni_fill C P) (ni_fill (ni_compose C C') P'))\n        (eq (ni_fill C Q) (ni_fill (ni_compose C C') Q'))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c11_goal : ex\n  (fun Q' : process =>\n   and (R P' Q')\n     (and (eq (ni_fill C P) (ni_fill (ni_compose C C') P'))\n        (eq (ni_fill C Q) (ni_fill (ni_compose C C') Q'))))",
                    "c9_Q' : process"
                ],
                "tactic_res": [
                    "c12_goal : and (R P' Q')\n  (and (eq (ni_fill C P) (ni_fill (ni_compose C C') P'))\n     (eq (ni_fill C Q) (ni_fill (ni_compose C C') Q')))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c12_goal : and (R P' Q')\n  (and (eq (ni_fill C P) (ni_fill (ni_compose C C') P'))\n     (eq (ni_fill C Q) (ni_fill (ni_compose C C') Q')))"
                ],
                "tactic_res": [
                    "c13_goal : R P' Q'",
                    "c14_goal : eq (ni_fill C P) (ni_fill (ni_compose C C') P')",
                    "c15_goal : eq (ni_fill C Q) (ni_fill (ni_compose C C') Q')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c13_goal : R P' Q'",
                    "c2_H : iterate x ni_context_relation R P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H : iterate x ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c14_H0 : and (eq P (ni_fill C' P')) (eq Q (ni_fill C' Q'))",
                    "c14_H : R P' Q'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c14_H0 : and (eq P (ni_fill C' P')) (eq Q (ni_fill C' Q'))"
                ],
                "tactic_res": [
                    "c14_H1 : eq Q (ni_fill C' Q')",
                    "c14_H0 : eq P (ni_fill C' P')"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c14_goal : eq (ni_fill C P) (ni_fill (ni_compose C C') P')",
                    "c14_H0 : and (eq P (ni_fill C' P')) (eq Q (ni_fill C' Q'))"
                ],
                "tactic_res": [
                    "c16_goal : eq (ni_fill C (ni_fill C' P')) (ni_fill (ni_compose C C') P')"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c16_goal : eq (ni_fill C (ni_fill C' P')) (ni_fill (ni_compose C C') P')",
                    "_global_ni_compose_fill : forall (nc1 nc2 : ni_context) (P : process),\n       eq (ni_fill nc1 (ni_fill nc2 P)) (ni_fill (ni_compose nc1 nc2) P)"
                ],
                "tactic_res": [
                    "c17_goal : eq (ni_fill (ni_compose C C') P') (ni_fill (ni_compose C C') P')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c17_goal : eq (ni_fill (ni_compose C C') P') (ni_fill (ni_compose C C') P')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H : iterate x ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c15_H0 : and (eq P (ni_fill C' P')) (eq Q (ni_fill C' Q'))",
                    "c15_H : R P' Q'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c14_H0 : and (eq P (ni_fill C' P')) (eq Q (ni_fill C' Q'))"
                ],
                "tactic_res": [
                    "c15_H1 : eq Q (ni_fill C' Q')",
                    "c15_H0 : eq P (ni_fill C' P')"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c15_goal : eq (ni_fill C Q) (ni_fill (ni_compose C C') Q')",
                    "c14_H1 : eq Q (ni_fill C' Q')"
                ],
                "tactic_res": [
                    "c18_goal : eq (ni_fill C (ni_fill C' Q')) (ni_fill (ni_compose C C') Q')"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c18_goal : eq (ni_fill C (ni_fill C' Q')) (ni_fill (ni_compose C C') Q')",
                    "_global_ni_compose_fill : forall (nc1 nc2 : ni_context) (P : process),\n       eq (ni_fill nc1 (ni_fill nc2 P)) (ni_fill (ni_compose nc1 nc2) P)"
                ],
                "tactic_res": [
                    "c19_goal : eq (ni_fill (ni_compose C C') Q') (ni_fill (ni_compose C C') Q')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c19_goal : eq (ni_fill (ni_compose C C') Q') (ni_fill (ni_compose C C') Q')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c8_goal : forall (Q P : process)\n  (_ : r_compose (ni_context_relation R)\n         (iterate x ni_context_relation R) P Q),\nr_compose (ni_context_relation R) (iterate x ni_context_relation R)\n  (ni_fill C P) (ni_fill C Q)"
                ],
                "tactic_res": [
                    "c20_goal : r_compose (ni_context_relation R) (iterate x ni_context_relation R)\n  (ni_fill C P) (ni_fill C Q)",
                    "c20_Q : process",
                    "c20_P : process",
                    "c20_H : r_compose (ni_context_relation R) (iterate x ni_context_relation R) P Q"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H : iterate x ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c20_H : and (ni_context_relation R P x0) (iterate x ni_context_relation R x0 Q)",
                    "c20_x0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H : iterate x ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c20_H0 : iterate x ni_context_relation R x0 Q",
                    "c20_H : ni_context_relation R P x0"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c6_IHx : forall (Q P : process) (_ : iterate x ni_context_relation R P Q),\niterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c20_H0 : iterate x ni_context_relation R x0 Q"
                ],
                "tactic_res": [
                    "c20_H0 : iterate x ni_context_relation R (ni_fill C x0) (ni_fill C Q)"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ C' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ C' ] .",
                "tactic_args": [
                    "c2_H : iterate x ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c20_H : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (R P' Q')\n        (and (eq P (ni_fill C' P')) (eq x0 (ni_fill C' Q')))))",
                    "c20_C' : ni_context"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ P' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P' ] .",
                "tactic_args": [
                    "c2_H : iterate x ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c20_H : ex\n  (fun Q' : process =>\n   and (R P' Q') (and (eq P (ni_fill C' P')) (eq x0 (ni_fill C' Q'))))",
                    "c20_P' : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q' ] .",
                "tactic_args": [
                    "c2_H : iterate x ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c20_H : and (R P' Q') (and (eq P (ni_fill C' P')) (eq x0 (ni_fill C' Q')))",
                    "c20_Q' : process"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c20_goal : r_compose (ni_context_relation R) (iterate x ni_context_relation R)\n  (ni_fill C P) (ni_fill C Q)",
                    "_global_r_compose : forall (_ : relation) (_ : relation) (_ : process) (_ : process), Prop"
                ],
                "tactic_res": [
                    "c21_goal : ex\n  (fun A : process =>\n   and (ni_context_relation R (ni_fill C P) A)\n     (iterate x ni_context_relation R A (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "exists ( ni_fill _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( ni_fill _i _i ) .",
                "tactic_args": [
                    "c21_goal : ex\n  (fun A : process =>\n   and (ni_context_relation R (ni_fill C P) A)\n     (iterate x ni_context_relation R A (ni_fill C Q)))",
                    "c2_C : ni_context",
                    "c20_x0 : process"
                ],
                "tactic_res": [
                    "c22_goal : and (ni_context_relation R (ni_fill C P) (ni_fill C x0))\n  (iterate x ni_context_relation R (ni_fill C x0) (ni_fill C Q))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c22_goal : and (ni_context_relation R (ni_fill C P) (ni_fill C x0))\n  (iterate x ni_context_relation R (ni_fill C x0) (ni_fill C Q))"
                ],
                "tactic_res": [
                    "c23_goal : ni_context_relation R (ni_fill C P) (ni_fill C x0)",
                    "c24_goal : iterate x ni_context_relation R (ni_fill C x0) (ni_fill C Q)"
                ]
            },
            {
                "tactic_sig": "try ( eapply _i ) .",
                "tactic_sig_no_out_arg": "try ( eapply _i ) .",
                "tactic_args": [
                    "c20_H0 : iterate x ni_context_relation R x0 Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "try ( eapply _i ) .",
                "tactic_sig_no_out_arg": "try ( eapply _i ) .",
                "tactic_args": [
                    "c24_goal : iterate x ni_context_relation R (ni_fill C x0) (ni_fill C Q)",
                    "c20_H0 : iterate x ni_context_relation R x0 Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "exists ( ni_compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( ni_compose _i _i ) .",
                "tactic_args": [
                    "c23_goal : ni_context_relation R (ni_fill C P) (ni_fill C x0)",
                    "c2_C : ni_context",
                    "c20_C' : ni_context"
                ],
                "tactic_res": [
                    "c25_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (R P' Q')\n        (and (eq (ni_fill C P) (ni_fill (ni_compose C C') P'))\n           (eq (ni_fill C x0) (ni_fill (ni_compose C C') Q')))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c25_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (R P' Q')\n        (and (eq (ni_fill C P) (ni_fill (ni_compose C C') P'))\n           (eq (ni_fill C x0) (ni_fill (ni_compose C C') Q')))))",
                    "c20_P' : process"
                ],
                "tactic_res": [
                    "c26_goal : ex\n  (fun Q' : process =>\n   and (R P' Q')\n     (and (eq (ni_fill C P) (ni_fill (ni_compose C C') P'))\n        (eq (ni_fill C x0) (ni_fill (ni_compose C C') Q'))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c26_goal : ex\n  (fun Q' : process =>\n   and (R P' Q')\n     (and (eq (ni_fill C P) (ni_fill (ni_compose C C') P'))\n        (eq (ni_fill C x0) (ni_fill (ni_compose C C') Q'))))",
                    "c20_Q' : process"
                ],
                "tactic_res": [
                    "c27_goal : and (R P' Q')\n  (and (eq (ni_fill C P) (ni_fill (ni_compose C C') P'))\n     (eq (ni_fill C x0) (ni_fill (ni_compose C C') Q')))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c27_goal : and (R P' Q')\n  (and (eq (ni_fill C P) (ni_fill (ni_compose C C') P'))\n     (eq (ni_fill C x0) (ni_fill (ni_compose C C') Q')))"
                ],
                "tactic_res": [
                    "c28_goal : R P' Q'",
                    "c29_goal : eq (ni_fill C P) (ni_fill (ni_compose C C') P')",
                    "c30_goal : eq (ni_fill C x0) (ni_fill (ni_compose C C') Q')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c28_goal : R P' Q'",
                    "c2_H : iterate x ni_context_relation R P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H : iterate x ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c29_H1 : and (eq P (ni_fill C' P')) (eq x0 (ni_fill C' Q'))",
                    "c29_H : R P' Q'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c29_H1 : and (eq P (ni_fill C' P')) (eq x0 (ni_fill C' Q'))"
                ],
                "tactic_res": [
                    "c29_H2 : eq x0 (ni_fill C' Q')",
                    "c29_H1 : eq P (ni_fill C' P')"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c29_goal : eq (ni_fill C P) (ni_fill (ni_compose C C') P')",
                    "c29_H1 : and (eq P (ni_fill C' P')) (eq x0 (ni_fill C' Q'))"
                ],
                "tactic_res": [
                    "c31_goal : eq (ni_fill C (ni_fill C' P')) (ni_fill (ni_compose C C') P')"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c31_goal : eq (ni_fill C (ni_fill C' P')) (ni_fill (ni_compose C C') P')",
                    "_global_ni_compose_fill : forall (nc1 nc2 : ni_context) (P : process),\n       eq (ni_fill nc1 (ni_fill nc2 P)) (ni_fill (ni_compose nc1 nc2) P)"
                ],
                "tactic_res": [
                    "c32_goal : eq (ni_fill (ni_compose C C') P') (ni_fill (ni_compose C C') P')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c32_goal : eq (ni_fill (ni_compose C C') P') (ni_fill (ni_compose C C') P')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H : iterate x ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c30_H1 : and (eq P (ni_fill C' P')) (eq x0 (ni_fill C' Q'))",
                    "c30_H : R P' Q'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c29_H1 : and (eq P (ni_fill C' P')) (eq x0 (ni_fill C' Q'))"
                ],
                "tactic_res": [
                    "c30_H2 : eq x0 (ni_fill C' Q')",
                    "c30_H1 : eq P (ni_fill C' P')"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c30_goal : eq (ni_fill C x0) (ni_fill (ni_compose C C') Q')",
                    "c29_H2 : eq x0 (ni_fill C' Q')"
                ],
                "tactic_res": [
                    "c33_goal : eq (ni_fill C (ni_fill C' Q')) (ni_fill (ni_compose C C') Q')"
                ]
            },
            {
                "tactic_sig": "rewrite _i .",
                "tactic_sig_no_out_arg": "rewrite _i .",
                "tactic_args": [
                    "c33_goal : eq (ni_fill C (ni_fill C' Q')) (ni_fill (ni_compose C C') Q')",
                    "_global_ni_compose_fill : forall (nc1 nc2 : ni_context) (P : process),\n       eq (ni_fill nc1 (ni_fill nc2 P)) (ni_fill (ni_compose nc1 nc2) P)"
                ],
                "tactic_res": [
                    "c34_goal : eq (ni_fill (ni_compose C C') Q') (ni_fill (ni_compose C C') Q')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c34_goal : eq (ni_fill (ni_compose C C') Q') (ni_fill (ni_compose C C') Q')"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "ni_context_progresses",
        "proof": [
            {
                "tactic_sig": "Lemma ni_context_progresses : forall P P' Q C R S l , subset R S -> progresses R S -> lts ( ni_fill C P ) l P' -> R P Q -> exists Q' , lts ( ni_fill C Q ) l Q' /\\ closure ni_context_relation S P' Q' .",
                "tactic_sig_no_out_arg": "Lemma ni_context_progresses : forall P P' Q C R S l , subset R S -> progresses R S -> lts ( ni_fill C P ) l P' -> R P Q -> exists Q' , lts ( ni_fill C Q ) l Q' /\\ closure ni_context_relation S P' Q' .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (P P' Q : process) (C : ni_context) (R S : relation) \n  (l : label) (_ : subset R S) (_ : progresses R S)\n  (_ : lts (ni_fill C P) l P') (_ : R P Q),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (P P' Q : process) (C : ni_context) (R S : relation) \n  (l : label) (_ : subset R S) (_ : progresses R S)\n  (_ : lts (ni_fill C P) l P') (_ : R P Q),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c2_goal : ex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))",
                    "c2_P : process",
                    "c2_P' : process",
                    "c2_Q : process",
                    "c2_C : ni_context",
                    "c2_R : relation",
                    "c2_S : relation",
                    "c2_l : label",
                    "c2_H : subset R S",
                    "c2_H0 : progresses R S",
                    "c2_H1 : lts (ni_fill C P) l P'",
                    "c2_H2 : R P Q"
                ]
            },
            {
                "tactic_sig": "generalize dependent _i .",
                "tactic_sig_no_out_arg": "generalize dependent _i .",
                "tactic_args": [
                    "c2_goal : ex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))",
                    "c2_l : label"
                ],
                "tactic_res": [
                    "c3_goal : forall (l : label) (_ : lts (ni_fill C P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))"
                ]
            },
            {
                "tactic_sig": "generalize dependent _i .",
                "tactic_sig_no_out_arg": "generalize dependent _i .",
                "tactic_args": [
                    "c3_goal : forall (l : label) (_ : lts (ni_fill C P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))",
                    "c2_P' : process"
                ],
                "tactic_res": [
                    "c4_goal : forall (P' : process) (l : label) (_ : lts (ni_fill C P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c4_goal : forall (P' : process) (l : label) (_ : lts (ni_fill C P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))",
                    "c2_C : ni_context"
                ],
                "tactic_res": [
                    "c5_goal : forall (P' : process) (l : label)\n  (_ : lts (ni_fill (ni_output c c0 C) P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_output c c0 C) Q) l Q')\n     (closure ni_context_relation S P' Q'))",
                    "c5_IHC : forall (P' : process) (l : label) (_ : lts (ni_fill C P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))",
                    "c5_c0 : channel",
                    "c5_c : channel",
                    "c6_goal : forall (P' : process) (l : label)\n  (_ : lts (ni_fill (ni_replicate C) P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_replicate C) Q) l Q')\n     (closure ni_context_relation S P' Q'))",
                    "c6_IHC : forall (P' : process) (l : label) (_ : lts (ni_fill C P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))",
                    "c7_goal : forall (P' : process) (l : label)\n  (_ : lts (ni_fill (ni_compose_l C p) P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_compose_l C p) Q) l Q')\n     (closure ni_context_relation S P' Q'))",
                    "c7_IHC : forall (P' : process) (l : label) (_ : lts (ni_fill C P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))",
                    "c7_p : process",
                    "c8_goal : forall (P' : process) (l : label)\n  (_ : lts (ni_fill (ni_compose_r p C) P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_compose_r p C) Q) l Q')\n     (closure ni_context_relation S P' Q'))",
                    "c8_IHC : forall (P' : process) (l : label) (_ : lts (ni_fill C P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))",
                    "c8_p : process",
                    "c9_goal : forall (P' : process) (l : label) (_ : lts (ni_fill ni_hole P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill ni_hole Q) l Q')\n     (closure ni_context_relation S P' Q'))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c5_goal : forall (P' : process) (l : label)\n  (_ : lts (ni_fill (ni_output c c0 C) P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_output c c0 C) Q) l Q')\n     (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c10_goal : ex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_output c c0 C) Q) l Q')\n     (closure ni_context_relation S P' Q'))",
                    "c10_P' : process",
                    "c10_l : label",
                    "c10_H1 : lts (ni_fill (ni_output c c0 C) P) l P'"
                ]
            },
            {
                "tactic_sig": "simpl in * .",
                "tactic_sig_no_out_arg": "simpl in * .",
                "tactic_args": [
                    "c10_goal : ex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_output c c0 C) Q) l Q')\n     (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c11_goal : ex\n  (fun Q' : process =>\n   and (lts (output c c0 (ni_fill C Q)) l Q')\n     (closure ni_context_relation S P' Q'))",
                    "c11_H1 : lts (output c c0 (ni_fill C P)) l P'"
                ]
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c11_goal : ex\n  (fun Q' : process =>\n   and (lts (output c c0 (ni_fill C Q)) l Q')\n     (closure ni_context_relation S P' Q'))",
                    "c2_H1 : lts (ni_fill C P) l P'"
                ],
                "tactic_res": [
                    "c12_goal : ex\n  (fun Q' : process =>\n   and (lts (output c c0 (ni_fill C Q)) (send_label c c0) Q')\n     (closure ni_context_relation S (ni_fill C P) Q'))",
                    "c12_H7 : eq (ni_fill C P) P'",
                    "c12_H3 : eq (send_label c c0) l",
                    "c12_H6 : eq P0 (ni_fill C P)",
                    "c12_H5 : eq c' c0",
                    "c12_H4 : eq c1 c",
                    "c12_c' : channel",
                    "c12_c1 : channel",
                    "c12_P0 : process"
                ]
            },
            {
                "tactic_sig": "exists ( ni_fill _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( ni_fill _i _i ) .",
                "tactic_args": [
                    "c12_goal : ex\n  (fun Q' : process =>\n   and (lts (output c c0 (ni_fill C Q)) (send_label c c0) Q')\n     (closure ni_context_relation S (ni_fill C P) Q'))",
                    "c2_C : ni_context",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c13_goal : and (lts (output c c0 (ni_fill C Q)) (send_label c c0) (ni_fill C Q))\n  (closure ni_context_relation S (ni_fill C P) (ni_fill C Q))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c13_goal : and (lts (output c c0 (ni_fill C Q)) (send_label c c0) (ni_fill C Q))\n  (closure ni_context_relation S (ni_fill C P) (ni_fill C Q))"
                ],
                "tactic_res": [
                    "c14_goal : lts (output c c0 (ni_fill C Q)) (send_label c c0) (ni_fill C Q)",
                    "c15_goal : closure ni_context_relation S (ni_fill C P) (ni_fill C Q)"
                ]
            },
            {
                "tactic_sig": "constructor .",
                "tactic_sig_no_out_arg": "constructor .",
                "tactic_args": [
                    "c14_goal : lts (output c c0 (ni_fill C Q)) (send_label c c0) (ni_fill C Q)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "exists 0 .",
                "tactic_sig_no_out_arg": "exists 0 .",
                "tactic_args": [
                    "c15_goal : closure ni_context_relation S (ni_fill C P) (ni_fill C Q)"
                ],
                "tactic_res": [
                    "c16_goal : iterate 0 ni_context_relation S (ni_fill C P) (ni_fill C Q)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c16_goal : iterate 0 ni_context_relation S (ni_fill C P) (ni_fill C Q)"
                ],
                "tactic_res": [
                    "c17_goal : ni_context_relation S (ni_fill C P) (ni_fill C Q)"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c17_goal : ni_context_relation S (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context"
                ],
                "tactic_res": [
                    "c18_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (S P' Q')\n        (and (eq (ni_fill C P) (ni_fill C P'))\n           (eq (ni_fill C Q) (ni_fill C Q')))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c18_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (S P' Q')\n        (and (eq (ni_fill C P) (ni_fill C P'))\n           (eq (ni_fill C Q) (ni_fill C Q')))))",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c19_goal : ex\n  (fun Q' : process =>\n   and (S P Q')\n     (and (eq (ni_fill C P) (ni_fill C P))\n        (eq (ni_fill C Q) (ni_fill C Q'))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c19_goal : ex\n  (fun Q' : process =>\n   and (S P Q')\n     (and (eq (ni_fill C P) (ni_fill C P))\n        (eq (ni_fill C Q) (ni_fill C Q'))))",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c20_goal : and (S P Q)\n  (and (eq (ni_fill C P) (ni_fill C P))\n     (eq (ni_fill C Q) (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c20_goal : and (S P Q)\n  (and (eq (ni_fill C P) (ni_fill C P))\n     (eq (ni_fill C Q) (ni_fill C Q)))"
                ],
                "tactic_res": [
                    "c21_goal : S P Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c21_goal : S P Q",
                    "c2_H : subset R S"
                ],
                "tactic_res": [
                    "c22_goal : R P Q"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c22_goal : R P Q",
                    "c2_H2 : R P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c6_goal : forall (P' : process) (l : label)\n  (_ : lts (ni_fill (ni_replicate C) P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_replicate C) Q) l Q')\n     (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c23_goal : ex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_replicate C) Q) l Q')\n     (closure ni_context_relation S P' Q'))",
                    "c23_P' : process",
                    "c23_l : label",
                    "c23_H1 : lts (ni_fill (ni_replicate C) P) l P'"
                ]
            },
            {
                "tactic_sig": "simpl in * .",
                "tactic_sig_no_out_arg": "simpl in * .",
                "tactic_args": [
                    "c23_goal : ex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_replicate C) Q) l Q')\n     (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c24_goal : ex\n  (fun Q' : process =>\n   and (lts (replicate (ni_fill C Q)) l Q')\n     (closure ni_context_relation S P' Q'))",
                    "c24_H1 : lts (replicate (ni_fill C P)) l P'"
                ]
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c24_goal : ex\n  (fun Q' : process =>\n   and (lts (replicate (ni_fill C Q)) l Q')\n     (closure ni_context_relation S P' Q'))",
                    "c2_H1 : lts (ni_fill C P) l P'"
                ],
                "tactic_res": [
                    "c25_goal : ex\n  (fun Q' : process =>\n   and (lts (replicate (ni_fill C Q)) l Q')\n     (closure ni_context_relation S\n        (compose P'0 (replicate (ni_fill C P))) Q'))",
                    "c25_H6 : eq (compose P'0 (replicate (ni_fill C P))) P'",
                    "c25_H5 : eq a l",
                    "c25_H3 : eq P0 (ni_fill C P)",
                    "c25_H4 : lts (ni_fill C P) l P'0",
                    "c25_P'0 : process",
                    "c25_a : label",
                    "c25_P0 : process",
                    "c26_goal : ex\n  (fun Q' : process =>\n   and (lts (replicate (ni_fill C Q)) tau_label Q')\n     (closure ni_context_relation S\n        (compose (compose P'0 P'') (replicate (ni_fill C P))) Q'))",
                    "c26_H7 : eq (compose (compose P'0 P'') (replicate (ni_fill C P))) P'",
                    "c26_H6 : eq tau_label l",
                    "c26_H3 : eq P0 (ni_fill C P)",
                    "c26_H5 : lts (ni_fill C P) (recv_label c n) P''",
                    "c26_H4 : lts (ni_fill C P) (send_label c n) P'0",
                    "c26_P'' : process",
                    "c26_P'0 : process",
                    "c26_n : channel",
                    "c26_c : channel",
                    "c26_P0 : process"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (P' : process) (l : label) (_ : lts (ni_fill C P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))",
                    "c25_H4 : lts (ni_fill C P) l P'0"
                ],
                "tactic_res": [
                    "c25_H4 : ex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P'0 Q'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q' ] .",
                "tactic_args": [
                    "c25_H4 : lts (ni_fill C P) l P'0"
                ],
                "tactic_res": [
                    "c25_H3 : and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P'0 Q')",
                    "c25_Q' : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c25_H3 : eq P0 (ni_fill C P)"
                ],
                "tactic_res": [
                    "c25_H4 : closure ni_context_relation S P'0 Q'",
                    "c25_H3 : lts (ni_fill C Q) l Q'"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i ( replicate ( ni_fill _i _i ) ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i ( replicate ( ni_fill _i _i ) ) ) .",
                "tactic_args": [
                    "c25_goal : ex\n  (fun Q' : process =>\n   and (lts (replicate (ni_fill C Q)) l Q')\n     (closure ni_context_relation S\n        (compose P'0 (replicate (ni_fill C P))) Q'))",
                    "c25_Q' : process",
                    "c2_C : ni_context",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c27_goal : and\n  (lts (replicate (ni_fill C Q)) l\n     (compose Q' (replicate (ni_fill C Q))))\n  (closure ni_context_relation S\n     (compose P'0 (replicate (ni_fill C P)))\n     (compose Q' (replicate (ni_fill C Q))))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c27_goal : and\n  (lts (replicate (ni_fill C Q)) l\n     (compose Q' (replicate (ni_fill C Q))))\n  (closure ni_context_relation S\n     (compose P'0 (replicate (ni_fill C P)))\n     (compose Q' (replicate (ni_fill C Q))))"
                ],
                "tactic_res": [
                    "c28_goal : lts (replicate (ni_fill C Q)) l (compose Q' (replicate (ni_fill C Q)))",
                    "c29_goal : closure ni_context_relation S (compose P'0 (replicate (ni_fill C P)))\n  (compose Q' (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c28_goal : lts (replicate (ni_fill C Q)) l (compose Q' (replicate (ni_fill C Q)))",
                    "_global_lts_rep_act : forall (P : process) (a : label) (P' : process) (_ : lts P a P'),\n       lts (replicate P) a (compose P' (replicate P))"
                ],
                "tactic_res": [
                    "c30_goal : lts (ni_fill C Q) l Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c30_goal : lts (ni_fill C Q) l Q'",
                    "c25_H3 : eq P0 (ni_fill C P)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c25_H4 : lts (ni_fill C P) l P'0"
                ],
                "tactic_res": [
                    "c29_H4 : iterate x ni_context_relation S P'0 Q'",
                    "c29_x : nat"
                ]
            },
            {
                "tactic_sig": "exists ( 1 + _i ) .",
                "tactic_sig_no_out_arg": "exists ( 1 + _i ) .",
                "tactic_args": [
                    "c29_goal : closure ni_context_relation S (compose P'0 (replicate (ni_fill C P)))\n  (compose Q' (replicate (ni_fill C Q)))",
                    "c29_x : nat"
                ],
                "tactic_res": [
                    "c31_goal : iterate (Init.Nat.add 1 x) ni_context_relation S\n  (compose P'0 (replicate (ni_fill C P)))\n  (compose Q' (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c31_goal : iterate (Init.Nat.add 1 x) ni_context_relation S\n  (compose P'0 (replicate (ni_fill C P)))\n  (compose Q' (replicate (ni_fill C Q)))"
                ],
                "tactic_res": [
                    "c32_goal : r_compose (ni_context_relation S) (iterate x ni_context_relation S)\n  (compose P'0 (replicate (ni_fill C P)))\n  (compose Q' (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i ( replicate ( ni_fill _i _i ) ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i ( replicate ( ni_fill _i _i ) ) ) .",
                "tactic_args": [
                    "c32_goal : r_compose (ni_context_relation S) (iterate x ni_context_relation S)\n  (compose P'0 (replicate (ni_fill C P)))\n  (compose Q' (replicate (ni_fill C Q)))",
                    "c25_P'0 : process",
                    "c2_C : ni_context",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c33_goal : and\n  (ni_context_relation S (compose P'0 (replicate (ni_fill C P)))\n     (compose P'0 (replicate (ni_fill C Q))))\n  (iterate x ni_context_relation S\n     (compose P'0 (replicate (ni_fill C Q)))\n     (compose Q' (replicate (ni_fill C Q))))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c33_goal : and\n  (ni_context_relation S (compose P'0 (replicate (ni_fill C P)))\n     (compose P'0 (replicate (ni_fill C Q))))\n  (iterate x ni_context_relation S\n     (compose P'0 (replicate (ni_fill C Q)))\n     (compose Q' (replicate (ni_fill C Q))))"
                ],
                "tactic_res": [
                    "c34_goal : ni_context_relation S (compose P'0 (replicate (ni_fill C P)))\n  (compose P'0 (replicate (ni_fill C Q)))",
                    "c35_goal : iterate x ni_context_relation S (compose P'0 (replicate (ni_fill C Q)))\n  (compose Q' (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "exists ( ni_compose_r _i ( ni_replicate _i ) ) .",
                "tactic_sig_no_out_arg": "exists ( ni_compose_r _i ( ni_replicate _i ) ) .",
                "tactic_args": [
                    "c34_goal : ni_context_relation S (compose P'0 (replicate (ni_fill C P)))\n  (compose P'0 (replicate (ni_fill C Q)))",
                    "c25_P'0 : process",
                    "c2_C : ni_context"
                ],
                "tactic_res": [
                    "c36_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (S P' Q')\n        (and\n           (eq (compose P'0 (replicate (ni_fill C P)))\n              (ni_fill (ni_compose_r P'0 (ni_replicate C)) P'))\n           (eq (compose P'0 (replicate (ni_fill C Q)))\n              (ni_fill (ni_compose_r P'0 (ni_replicate C)) Q')))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c36_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (S P' Q')\n        (and\n           (eq (compose P'0 (replicate (ni_fill C P)))\n              (ni_fill (ni_compose_r P'0 (ni_replicate C)) P'))\n           (eq (compose P'0 (replicate (ni_fill C Q)))\n              (ni_fill (ni_compose_r P'0 (ni_replicate C)) Q')))))",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c37_goal : ex\n  (fun Q' : process =>\n   and (S P Q')\n     (and\n        (eq (compose P'0 (replicate (ni_fill C P)))\n           (ni_fill (ni_compose_r P'0 (ni_replicate C)) P))\n        (eq (compose P'0 (replicate (ni_fill C Q)))\n           (ni_fill (ni_compose_r P'0 (ni_replicate C)) Q'))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c37_goal : ex\n  (fun Q' : process =>\n   and (S P Q')\n     (and\n        (eq (compose P'0 (replicate (ni_fill C P)))\n           (ni_fill (ni_compose_r P'0 (ni_replicate C)) P))\n        (eq (compose P'0 (replicate (ni_fill C Q)))\n           (ni_fill (ni_compose_r P'0 (ni_replicate C)) Q'))))",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c38_goal : and (S P Q)\n  (and\n     (eq (compose P'0 (replicate (ni_fill C P)))\n        (ni_fill (ni_compose_r P'0 (ni_replicate C)) P))\n     (eq (compose P'0 (replicate (ni_fill C Q)))\n        (ni_fill (ni_compose_r P'0 (ni_replicate C)) Q)))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c38_goal : and (S P Q)\n  (and\n     (eq (compose P'0 (replicate (ni_fill C P)))\n        (ni_fill (ni_compose_r P'0 (ni_replicate C)) P))\n     (eq (compose P'0 (replicate (ni_fill C Q)))\n        (ni_fill (ni_compose_r P'0 (ni_replicate C)) Q)))"
                ],
                "tactic_res": [
                    "c39_goal : S P Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c39_goal : S P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i with ( _i := ( ni_compose_l ni_hole ( replicate ( ni_fill _i _i ) ) ) ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ( ni_compose_l ni_hole ( replicate ( ni_fill _i _i ) ) ) ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c2_C : ni_context",
                    "c2_Q : process",
                    "c25_H4 : lts (ni_fill C P) l P'0"
                ],
                "tactic_res": [
                    "c35_H4 : iterate x ni_context_relation S\n  (ni_fill (ni_compose_l ni_hole (replicate (ni_fill C Q))) P'0)\n  (ni_fill (ni_compose_l ni_hole (replicate (ni_fill C Q))) Q')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c35_goal : iterate x ni_context_relation S (compose P'0 (replicate (ni_fill C Q)))\n  (compose Q' (replicate (ni_fill C Q)))",
                    "c25_H4 : lts (ni_fill C P) l P'0"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (P' : process) (l : label) (_ : lts (ni_fill C P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))",
                    "c25_H4 : lts (ni_fill C P) l P'0"
                ],
                "tactic_res": [
                    "c26_H4 : ex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) (send_label c n) Q')\n     (closure ni_context_relation S P'0 Q'))"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (P' : process) (l : label) (_ : lts (ni_fill C P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))",
                    "c25_H5 : eq a l"
                ],
                "tactic_res": [
                    "c26_H5 : ex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) (recv_label c n) Q')\n     (closure ni_context_relation S P'' Q'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c25_H4 : lts (ni_fill C P) l P'0"
                ],
                "tactic_res": [
                    "c26_H3 : and (lts (ni_fill C Q) (send_label c n) x)\n  (closure ni_context_relation S P'0 x)",
                    "c26_x : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c25_H3 : eq P0 (ni_fill C P)"
                ],
                "tactic_res": [
                    "c26_H4 : closure ni_context_relation S P'0 x",
                    "c26_H3 : lts (ni_fill C Q) (send_label c n) x"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c25_H5 : eq a l"
                ],
                "tactic_res": [
                    "c26_H5 : and (lts (ni_fill C Q) (recv_label c n) x0)\n  (closure ni_context_relation S P'' x0)",
                    "c26_x0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c25_H5 : eq a l"
                ],
                "tactic_res": [
                    "c26_H6 : closure ni_context_relation S P'' x0",
                    "c26_H5 : lts (ni_fill C Q) (recv_label c n) x0"
                ]
            },
            {
                "tactic_sig": "exists ( compose ( compose _i _i ) ( replicate ( ni_fill _i _i ) ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose ( compose _i _i ) ( replicate ( ni_fill _i _i ) ) ) .",
                "tactic_args": [
                    "c26_goal : ex\n  (fun Q' : process =>\n   and (lts (replicate (ni_fill C Q)) tau_label Q')\n     (closure ni_context_relation S\n        (compose (compose P'0 P'') (replicate (ni_fill C P))) Q'))",
                    "c26_x : process",
                    "c26_x0 : process",
                    "c2_C : ni_context",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c40_goal : and\n  (lts (replicate (ni_fill C Q)) tau_label\n     (compose (compose x x0) (replicate (ni_fill C Q))))\n  (closure ni_context_relation S\n     (compose (compose P'0 P'') (replicate (ni_fill C P)))\n     (compose (compose x x0) (replicate (ni_fill C Q))))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c40_goal : and\n  (lts (replicate (ni_fill C Q)) tau_label\n     (compose (compose x x0) (replicate (ni_fill C Q))))\n  (closure ni_context_relation S\n     (compose (compose P'0 P'') (replicate (ni_fill C P)))\n     (compose (compose x x0) (replicate (ni_fill C Q))))"
                ],
                "tactic_res": [
                    "c41_goal : lts (replicate (ni_fill C Q)) tau_label\n  (compose (compose x x0) (replicate (ni_fill C Q)))",
                    "c42_goal : closure ni_context_relation S\n  (compose (compose P'0 P'') (replicate (ni_fill C P)))\n  (compose (compose x x0) (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c41_goal : lts (replicate (ni_fill C Q)) tau_label\n  (compose (compose x x0) (replicate (ni_fill C Q)))",
                    "_global_lts_rep_comm : forall (P : process) (c n : channel) (P' P'' : process)\n         (_ : lts P (send_label c n) P') (_ : lts P (recv_label c n) P''),\n       lts (replicate P) tau_label (compose (compose P' P'') (replicate P))"
                ],
                "tactic_res": [
                    "c43_goal : lts (ni_fill C Q) (send_label ?c ?n) x",
                    "c44_goal : lts (ni_fill C Q) (recv_label ?c ?n) x0"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c43_goal : lts (ni_fill C Q) (send_label ?c ?n) x",
                    "c25_H3 : eq P0 (ni_fill C P)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c44_goal : lts (ni_fill C Q) (recv_label c n) x0",
                    "c25_H5 : eq a l"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ m ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ m ] .",
                "tactic_args": [
                    "c25_H4 : lts (ni_fill C P) l P'0"
                ],
                "tactic_res": [
                    "c42_H4 : iterate m ni_context_relation S P'0 x",
                    "c42_m : nat"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ m'' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ m'' ] .",
                "tactic_args": [
                    "c25_H6 : eq (compose P'0 (replicate (ni_fill C P))) P'"
                ],
                "tactic_res": [
                    "c42_H6 : iterate m'' ni_context_relation S P'' x0",
                    "c42_m'' : nat"
                ]
            },
            {
                "tactic_sig": "exists ( 2 + _i + _i ) .",
                "tactic_sig_no_out_arg": "exists ( 2 + _i + _i ) .",
                "tactic_args": [
                    "c42_goal : closure ni_context_relation S\n  (compose (compose P'0 P'') (replicate (ni_fill C P)))\n  (compose (compose x x0) (replicate (ni_fill C Q)))",
                    "c42_m : nat",
                    "c42_m'' : nat"
                ],
                "tactic_res": [
                    "c45_goal : iterate (Init.Nat.add (Init.Nat.add 2 m) m'') ni_context_relation S\n  (compose (compose P'0 P'') (replicate (ni_fill C P)))\n  (compose (compose x x0) (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c45_goal : iterate (Init.Nat.add (Init.Nat.add 2 m) m'') ni_context_relation S\n  (compose (compose P'0 P'') (replicate (ni_fill C P)))\n  (compose (compose x x0) (replicate (ni_fill C Q)))"
                ],
                "tactic_res": [
                    "c46_goal : r_compose (ni_context_relation S)\n  (r_compose (ni_context_relation S)\n     (iterate (Init.Nat.add m m'') ni_context_relation S))\n  (compose (compose P'0 P'') (replicate (ni_fill C P)))\n  (compose (compose x x0) (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "exists ( compose ( compose _i _i ) ( replicate ( ni_fill _i _i ) ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose ( compose _i _i ) ( replicate ( ni_fill _i _i ) ) ) .",
                "tactic_args": [
                    "c46_goal : r_compose (ni_context_relation S)\n  (r_compose (ni_context_relation S)\n     (iterate (Init.Nat.add m m'') ni_context_relation S))\n  (compose (compose P'0 P'') (replicate (ni_fill C P)))\n  (compose (compose x x0) (replicate (ni_fill C Q)))",
                    "c25_P'0 : process",
                    "c26_P'' : process",
                    "c2_C : ni_context",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c47_goal : and\n  (ni_context_relation S\n     (compose (compose P'0 P'') (replicate (ni_fill C P)))\n     (compose (compose P'0 P'') (replicate (ni_fill C Q))))\n  (r_compose (ni_context_relation S)\n     (iterate (Init.Nat.add m m'') ni_context_relation S)\n     (compose (compose P'0 P'') (replicate (ni_fill C Q)))\n     (compose (compose x x0) (replicate (ni_fill C Q))))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c47_goal : and\n  (ni_context_relation S\n     (compose (compose P'0 P'') (replicate (ni_fill C P)))\n     (compose (compose P'0 P'') (replicate (ni_fill C Q))))\n  (r_compose (ni_context_relation S)\n     (iterate (Init.Nat.add m m'') ni_context_relation S)\n     (compose (compose P'0 P'') (replicate (ni_fill C Q)))\n     (compose (compose x x0) (replicate (ni_fill C Q))))"
                ],
                "tactic_res": [
                    "c48_goal : ni_context_relation S\n  (compose (compose P'0 P'') (replicate (ni_fill C P)))\n  (compose (compose P'0 P'') (replicate (ni_fill C Q)))",
                    "c49_goal : r_compose (ni_context_relation S)\n  (iterate (Init.Nat.add m m'') ni_context_relation S)\n  (compose (compose P'0 P'') (replicate (ni_fill C Q)))\n  (compose (compose x x0) (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "exists ( ni_compose_r ( compose _i _i ) ( ni_replicate _i ) ) .",
                "tactic_sig_no_out_arg": "exists ( ni_compose_r ( compose _i _i ) ( ni_replicate _i ) ) .",
                "tactic_args": [
                    "c48_goal : ni_context_relation S\n  (compose (compose P'0 P'') (replicate (ni_fill C P)))\n  (compose (compose P'0 P'') (replicate (ni_fill C Q)))",
                    "c25_P'0 : process",
                    "c26_P'' : process",
                    "c2_C : ni_context"
                ],
                "tactic_res": [
                    "c50_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (S P' Q')\n        (and\n           (eq (compose (compose P'0 P'') (replicate (ni_fill C P)))\n              (ni_fill\n                 (ni_compose_r (compose P'0 P'') (ni_replicate C)) P'))\n           (eq (compose (compose P'0 P'') (replicate (ni_fill C Q)))\n              (ni_fill\n                 (ni_compose_r (compose P'0 P'') (ni_replicate C)) Q')))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c50_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (S P' Q')\n        (and\n           (eq (compose (compose P'0 P'') (replicate (ni_fill C P)))\n              (ni_fill\n                 (ni_compose_r (compose P'0 P'') (ni_replicate C)) P'))\n           (eq (compose (compose P'0 P'') (replicate (ni_fill C Q)))\n              (ni_fill\n                 (ni_compose_r (compose P'0 P'') (ni_replicate C)) Q')))))",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c51_goal : ex\n  (fun Q' : process =>\n   and (S P Q')\n     (and\n        (eq (compose (compose P'0 P'') (replicate (ni_fill C P)))\n           (ni_fill (ni_compose_r (compose P'0 P'') (ni_replicate C)) P))\n        (eq (compose (compose P'0 P'') (replicate (ni_fill C Q)))\n           (ni_fill (ni_compose_r (compose P'0 P'') (ni_replicate C))\n              Q'))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c51_goal : ex\n  (fun Q' : process =>\n   and (S P Q')\n     (and\n        (eq (compose (compose P'0 P'') (replicate (ni_fill C P)))\n           (ni_fill (ni_compose_r (compose P'0 P'') (ni_replicate C)) P))\n        (eq (compose (compose P'0 P'') (replicate (ni_fill C Q)))\n           (ni_fill (ni_compose_r (compose P'0 P'') (ni_replicate C))\n              Q'))))",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c52_goal : and (S P Q)\n  (and\n     (eq (compose (compose P'0 P'') (replicate (ni_fill C P)))\n        (ni_fill (ni_compose_r (compose P'0 P'') (ni_replicate C)) P))\n     (eq (compose (compose P'0 P'') (replicate (ni_fill C Q)))\n        (ni_fill (ni_compose_r (compose P'0 P'') (ni_replicate C)) Q)))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c52_goal : and (S P Q)\n  (and\n     (eq (compose (compose P'0 P'') (replicate (ni_fill C P)))\n        (ni_fill (ni_compose_r (compose P'0 P'') (ni_replicate C)) P))\n     (eq (compose (compose P'0 P'') (replicate (ni_fill C Q)))\n        (ni_fill (ni_compose_r (compose P'0 P'') (ni_replicate C)) Q)))"
                ],
                "tactic_res": [
                    "c53_goal : S P Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c53_goal : S P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c49_goal : r_compose (ni_context_relation S)\n  (iterate (Init.Nat.add m m'') ni_context_relation S)\n  (compose (compose P'0 P'') (replicate (ni_fill C Q)))\n  (compose (compose x x0) (replicate (ni_fill C Q)))",
                    "_global_iterate_sum : forall (F : forall _ : relation, relation) \n         (R : relation) (P A Q : process) (n m : nat) \n         (_ : iterate n F R P A) (_ : iterate m F R A Q),\n       iterate (Datatypes.S (Init.Nat.add n m)) F R P Q"
                ],
                "tactic_res": [
                    "c54_goal : iterate m ni_context_relation S\n  (compose (compose P'0 P'') (replicate (ni_fill C Q))) \n  ?A",
                    "c55_goal : iterate m'' ni_context_relation S ?A\n  (compose (compose x x0) (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "apply _i with ( _i := ( ni_compose_l ( ni_compose_l ni_hole _i ) ( replicate ( ni_fill _i _i ) ) ) ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ( ni_compose_l ( ni_compose_l ni_hole _i ) ( replicate ( ni_fill _i _i ) ) ) ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c26_P'' : process",
                    "c2_C : ni_context",
                    "c2_Q : process",
                    "c25_H4 : lts (ni_fill C P) l P'0"
                ],
                "tactic_res": [
                    "c54_H4 : iterate m ni_context_relation S\n  (ni_fill\n     (ni_compose_l (ni_compose_l ni_hole P'') (replicate (ni_fill C Q)))\n     P'0)\n  (ni_fill\n     (ni_compose_l (ni_compose_l ni_hole P'') (replicate (ni_fill C Q)))\n     x)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c54_goal : iterate m ni_context_relation S\n  (compose (compose P'0 P'') (replicate (ni_fill C Q))) \n  ?A",
                    "c25_H4 : lts (ni_fill C P) l P'0"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c55_goal : iterate m'' ni_context_relation S\n  (ni_fill\n     (ni_compose_l (ni_compose_l ni_hole P'') (replicate (ni_fill C Q)))\n     x) (compose (compose x x0) (replicate (ni_fill C Q)))"
                ],
                "tactic_res": [
                    "c56_goal : iterate m'' ni_context_relation S\n  (compose (compose x P'') (replicate (ni_fill C Q)))\n  (compose (compose x x0) (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "apply _i with ( _i := ( ni_compose_l ( ni_compose_r _i ni_hole ) ( replicate ( ni_fill _i _i ) ) ) ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ( ni_compose_l ( ni_compose_r _i ni_hole ) ( replicate ( ni_fill _i _i ) ) ) ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c26_x : process",
                    "c2_C : ni_context",
                    "c2_Q : process",
                    "c25_H6 : eq (compose P'0 (replicate (ni_fill C P))) P'"
                ],
                "tactic_res": [
                    "c56_H6 : iterate m'' ni_context_relation S\n  (ni_fill\n     (ni_compose_l (ni_compose_r x ni_hole) (replicate (ni_fill C Q)))\n     P'')\n  (ni_fill\n     (ni_compose_l (ni_compose_r x ni_hole) (replicate (ni_fill C Q)))\n     x0)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c56_goal : iterate m'' ni_context_relation S\n  (compose (compose x P'') (replicate (ni_fill C Q)))\n  (compose (compose x x0) (replicate (ni_fill C Q)))",
                    "c25_H6 : eq (compose P'0 (replicate (ni_fill C P))) P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c7_goal : forall (P' : process) (l : label)\n  (_ : lts (ni_fill (ni_compose_l C p) P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_compose_l C p) Q) l Q')\n     (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c57_goal : ex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_compose_l C p) Q) l Q')\n     (closure ni_context_relation S P' Q'))",
                    "c57_P' : process",
                    "c57_l : label",
                    "c57_H1 : lts (ni_fill (ni_compose_l C p) P) l P'"
                ]
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c57_goal : ex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_compose_l C p) Q) l Q')\n     (closure ni_context_relation S P' Q'))",
                    "c2_H1 : lts (ni_fill C P) l P'"
                ],
                "tactic_res": [
                    "c58_goal : ex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_compose_l C p) Q) l Q')\n     (closure ni_context_relation S (compose P'0 p) Q'))",
                    "c58_H6 : eq (compose P'0 p) P'",
                    "c58_H4 : eq l0 l",
                    "c58_H5 : eq Q0 p",
                    "c58_H3 : eq P0 (ni_fill C P)",
                    "c58_H7 : lts (ni_fill C P) l P'0",
                    "c58_l0 : label",
                    "c58_Q0 : process",
                    "c58_P'0 : process",
                    "c58_P0 : process",
                    "c59_goal : ex\n  (fun Q'0 : process =>\n   and (lts (ni_fill (ni_compose_l C p) Q) l Q'0)\n     (closure ni_context_relation S (compose (ni_fill C P) Q') Q'0))",
                    "c59_H6 : eq (compose (ni_fill C P) Q') P'",
                    "c59_H4 : eq l0 l",
                    "c59_H5 : eq Q0 p",
                    "c59_H3 : eq P0 (ni_fill C P)",
                    "c59_H7 : lts p l Q'",
                    "c59_l0 : label",
                    "c59_Q' : process",
                    "c59_Q0 : process",
                    "c59_P0 : process",
                    "c60_goal : ex\n  (fun Q'0 : process =>\n   and (lts (ni_fill (ni_compose_l C p) Q) tau_label Q'0)\n     (closure ni_context_relation S (compose P'0 Q') Q'0))",
                    "c60_H7 : eq (compose P'0 Q') P'",
                    "c60_H6 : eq tau_label l",
                    "c60_H4 : eq Q0 p",
                    "c60_H3 : eq P0 (ni_fill C P)",
                    "c60_H8 : lts p (recv_label c n) Q'",
                    "c60_H5 : lts (ni_fill C P) (send_label c n) P'0",
                    "c60_n : channel",
                    "c60_c : channel",
                    "c60_Q' : process",
                    "c60_Q0 : process",
                    "c60_P'0 : process",
                    "c60_P0 : process",
                    "c61_goal : ex\n  (fun Q'0 : process =>\n   and (lts (ni_fill (ni_compose_l C p) Q) tau_label Q'0)\n     (closure ni_context_relation S (compose P'0 Q') Q'0))",
                    "c61_H7 : eq (compose P'0 Q') P'",
                    "c61_H6 : eq tau_label l",
                    "c61_H4 : eq Q0 p",
                    "c61_H3 : eq P0 (ni_fill C P)",
                    "c61_H8 : lts p (send_label c n) Q'",
                    "c61_H5 : lts (ni_fill C P) (recv_label c n) P'0",
                    "c61_n : channel",
                    "c61_c : channel",
                    "c61_Q' : process",
                    "c61_Q0 : process",
                    "c61_P'0 : process",
                    "c61_P0 : process"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (P' : process) (l : label) (_ : lts (ni_fill C P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))",
                    "c58_H7 : lts (ni_fill C P) l P'0"
                ],
                "tactic_res": [
                    "c58_H7 : ex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P'0 Q'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c58_H7 : lts (ni_fill C P) l P'0"
                ],
                "tactic_res": [
                    "c58_H3 : and (lts (ni_fill C Q) l x) (closure ni_context_relation S P'0 x)",
                    "c58_x : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c58_H3 : eq P0 (ni_fill C P)"
                ],
                "tactic_res": [
                    "c58_H4 : closure ni_context_relation S P'0 x",
                    "c58_H3 : lts (ni_fill C Q) l x"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c58_goal : ex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_compose_l C p) Q) l Q')\n     (closure ni_context_relation S (compose P'0 p) Q'))",
                    "c58_x : process",
                    "c7_p : process"
                ],
                "tactic_res": [
                    "c62_goal : and (lts (ni_fill (ni_compose_l C p) Q) l (compose x p))\n  (closure ni_context_relation S (compose P'0 p) (compose x p))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c62_goal : and (lts (ni_fill (ni_compose_l C p) Q) l (compose x p))\n  (closure ni_context_relation S (compose P'0 p) (compose x p))"
                ],
                "tactic_res": [
                    "c63_goal : lts (ni_fill (ni_compose_l C p) Q) l (compose x p)",
                    "c64_goal : closure ni_context_relation S (compose P'0 p) (compose x p)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c63_goal : lts (ni_fill (ni_compose_l C p) Q) l (compose x p)"
                ],
                "tactic_res": [
                    "c65_goal : lts (compose (ni_fill C Q) p) l (compose x p)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c65_goal : lts (compose (ni_fill C Q) p) l (compose x p)",
                    "_global_lts_comp_left : forall (P P' Q : process) (l : label) (_ : lts P l P'),\n       lts (compose P Q) l (compose P' Q)"
                ],
                "tactic_res": [
                    "c66_goal : lts (ni_fill C Q) l x"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c66_goal : lts (ni_fill C Q) l x",
                    "c58_H3 : eq P0 (ni_fill C P)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c58_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c64_H4 : iterate x0 ni_context_relation S P'0 x",
                    "c64_x0 : nat"
                ]
            },
            {
                "tactic_sig": "exists ( _i ) .",
                "tactic_sig_no_out_arg": "exists ( _i ) .",
                "tactic_args": [
                    "c64_goal : closure ni_context_relation S (compose P'0 p) (compose x p)",
                    "c64_x0 : nat"
                ],
                "tactic_res": [
                    "c67_goal : iterate x0 ni_context_relation S (compose P'0 p) (compose x p)"
                ]
            },
            {
                "tactic_sig": "apply _i with ( _i := ( ni_compose_l ni_hole _i ) ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ( ni_compose_l ni_hole _i ) ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c7_p : process",
                    "c58_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c67_H4 : iterate x0 ni_context_relation S (ni_fill (ni_compose_l ni_hole p) P'0)\n  (ni_fill (ni_compose_l ni_hole p) x)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c67_goal : iterate x0 ni_context_relation S (compose P'0 p) (compose x p)",
                    "c58_H4 : eq l0 l"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl in * .",
                "tactic_sig_no_out_arg": "simpl in * .",
                "tactic_args": [
                    "c59_goal : ex\n  (fun Q'0 : process =>\n   and (lts (ni_fill (ni_compose_l C p) Q) l Q'0)\n     (closure ni_context_relation S (compose (ni_fill C P) Q') Q'0))"
                ],
                "tactic_res": [
                    "c68_goal : ex\n  (fun Q'0 : process =>\n   and (lts (compose (ni_fill C Q) p) l Q'0)\n     (closure ni_context_relation S (compose (ni_fill C P) Q') Q'0))",
                    "c68_H1 : lts (compose (ni_fill C P) p) l (compose (ni_fill C P) Q')"
                ]
            },
            {
                "tactic_sig": "exists ( compose ( ni_fill _i _i ) _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose ( ni_fill _i _i ) _i ) .",
                "tactic_args": [
                    "c68_goal : ex\n  (fun Q'0 : process =>\n   and (lts (compose (ni_fill C Q) p) l Q'0)\n     (closure ni_context_relation S (compose (ni_fill C P) Q') Q'0))",
                    "c2_C : ni_context",
                    "c2_Q : process",
                    "c59_Q' : process"
                ],
                "tactic_res": [
                    "c69_goal : and (lts (compose (ni_fill C Q) p) l (compose (ni_fill C Q) Q'))\n  (closure ni_context_relation S (compose (ni_fill C P) Q')\n     (compose (ni_fill C Q) Q'))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c69_goal : and (lts (compose (ni_fill C Q) p) l (compose (ni_fill C Q) Q'))\n  (closure ni_context_relation S (compose (ni_fill C P) Q')\n     (compose (ni_fill C Q) Q'))"
                ],
                "tactic_res": [
                    "c70_goal : lts (compose (ni_fill C Q) p) l (compose (ni_fill C Q) Q')",
                    "c71_goal : closure ni_context_relation S (compose (ni_fill C P) Q')\n  (compose (ni_fill C Q) Q')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c70_goal : lts (compose (ni_fill C Q) p) l (compose (ni_fill C Q) Q')",
                    "_global_lts_comp_right : forall (P Q Q' : process) (l : label) (_ : lts Q l Q'),\n       lts (compose P Q) l (compose P Q')"
                ],
                "tactic_res": [
                    "c72_goal : lts p l Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c72_goal : lts p l Q'",
                    "c58_H7 : lts (ni_fill C P) l P'0"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "exists 0 .",
                "tactic_sig_no_out_arg": "exists 0 .",
                "tactic_args": [
                    "c71_goal : closure ni_context_relation S (compose (ni_fill C P) Q')\n  (compose (ni_fill C Q) Q')"
                ],
                "tactic_res": [
                    "c73_goal : iterate 0 ni_context_relation S (compose (ni_fill C P) Q')\n  (compose (ni_fill C Q) Q')"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c73_goal : iterate 0 ni_context_relation S (compose (ni_fill C P) Q')\n  (compose (ni_fill C Q) Q')"
                ],
                "tactic_res": [
                    "c74_goal : ni_context_relation S (compose (ni_fill C P) Q')\n  (compose (ni_fill C Q) Q')"
                ]
            },
            {
                "tactic_sig": "exists ( ni_compose_l _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( ni_compose_l _i _i ) .",
                "tactic_args": [
                    "c74_goal : ni_context_relation S (compose (ni_fill C P) Q')\n  (compose (ni_fill C Q) Q')",
                    "c2_C : ni_context",
                    "c59_Q' : process"
                ],
                "tactic_res": [
                    "c75_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q'0 : process =>\n      and (S P' Q'0)\n        (and\n           (eq (compose (ni_fill C P) Q')\n              (ni_fill (ni_compose_l C Q') P'))\n           (eq (compose (ni_fill C Q) Q')\n              (ni_fill (ni_compose_l C Q') Q'0)))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c75_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q'0 : process =>\n      and (S P' Q'0)\n        (and\n           (eq (compose (ni_fill C P) Q')\n              (ni_fill (ni_compose_l C Q') P'))\n           (eq (compose (ni_fill C Q) Q')\n              (ni_fill (ni_compose_l C Q') Q'0)))))",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c76_goal : ex\n  (fun Q'0 : process =>\n   and (S P Q'0)\n     (and\n        (eq (compose (ni_fill C P) Q') (ni_fill (ni_compose_l C Q') P))\n        (eq (compose (ni_fill C Q) Q')\n           (ni_fill (ni_compose_l C Q') Q'0))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c76_goal : ex\n  (fun Q'0 : process =>\n   and (S P Q'0)\n     (and\n        (eq (compose (ni_fill C P) Q') (ni_fill (ni_compose_l C Q') P))\n        (eq (compose (ni_fill C Q) Q')\n           (ni_fill (ni_compose_l C Q') Q'0))))",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c77_goal : and (S P Q)\n  (and (eq (compose (ni_fill C P) Q') (ni_fill (ni_compose_l C Q') P))\n     (eq (compose (ni_fill C Q) Q') (ni_fill (ni_compose_l C Q') Q)))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c77_goal : and (S P Q)\n  (and (eq (compose (ni_fill C P) Q') (ni_fill (ni_compose_l C Q') P))\n     (eq (compose (ni_fill C Q) Q') (ni_fill (ni_compose_l C Q') Q)))"
                ],
                "tactic_res": [
                    "c78_goal : S P Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c78_goal : S P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (P' : process) (l : label) (_ : lts (ni_fill C P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))",
                    "c58_H5 : eq Q0 p"
                ],
                "tactic_res": [
                    "c60_H5 : ex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) (send_label c n) Q')\n     (closure ni_context_relation S P'0 Q'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q0 ] .",
                "tactic_args": [
                    "c58_H5 : eq Q0 p"
                ],
                "tactic_res": [
                    "c60_H3 : and (lts (ni_fill C Q) (send_label c n) Q0)\n  (closure ni_context_relation S P'0 Q0)",
                    "c60_Q0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c58_H3 : eq P0 (ni_fill C P)"
                ],
                "tactic_res": [
                    "c60_H4 : closure ni_context_relation S P'0 Q0",
                    "c60_H3 : lts (ni_fill C Q) (send_label c n) Q0"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c60_goal : ex\n  (fun Q'0 : process =>\n   and (lts (ni_fill (ni_compose_l C p) Q) tau_label Q'0)\n     (closure ni_context_relation S (compose P'0 Q') Q'0))"
                ],
                "tactic_res": [
                    "c79_goal : ex\n  (fun Q'0 : process =>\n   and (lts (compose (ni_fill C Q) p) tau_label Q'0)\n     (closure ni_context_relation S (compose P'0 Q') Q'0))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c79_goal : ex\n  (fun Q'0 : process =>\n   and (lts (compose (ni_fill C Q) p) tau_label Q'0)\n     (closure ni_context_relation S (compose P'0 Q') Q'0))",
                    "c58_Q0 : process",
                    "c59_Q' : process"
                ],
                "tactic_res": [
                    "c80_goal : and (lts (compose (ni_fill C Q) p) tau_label (compose Q0 Q'))\n  (closure ni_context_relation S (compose P'0 Q') (compose Q0 Q'))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c80_goal : and (lts (compose (ni_fill C Q) p) tau_label (compose Q0 Q'))\n  (closure ni_context_relation S (compose P'0 Q') (compose Q0 Q'))"
                ],
                "tactic_res": [
                    "c81_goal : lts (compose (ni_fill C Q) p) tau_label (compose Q0 Q')",
                    "c82_goal : closure ni_context_relation S (compose P'0 Q') (compose Q0 Q')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c81_goal : lts (compose (ni_fill C Q) p) tau_label (compose Q0 Q')",
                    "_global_lts_comm_left : forall (P P' Q Q' : process) (c n : channel)\n         (_ : lts P (send_label c n) P') (_ : lts Q (recv_label c n) Q'),\n       lts (compose P Q) tau_label (compose P' Q')"
                ],
                "tactic_res": [
                    "c83_goal : lts (ni_fill C Q) (send_label ?c ?n) Q0",
                    "c84_goal : lts p (recv_label ?c ?n) Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c83_goal : lts (ni_fill C Q) (send_label ?c ?n) Q0",
                    "c58_H3 : eq P0 (ni_fill C P)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c84_goal : lts p (recv_label c n) Q'",
                    "c60_H8 : lts p (recv_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c58_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c82_H4 : iterate x ni_context_relation S P'0 Q0",
                    "c82_x : nat"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c82_goal : closure ni_context_relation S (compose P'0 Q') (compose Q0 Q')",
                    "c58_x : process"
                ],
                "tactic_res": [
                    "c85_goal : iterate x ni_context_relation S (compose P'0 Q') (compose Q0 Q')"
                ]
            },
            {
                "tactic_sig": "apply _i with ( _i := ni_compose_l ni_hole _i ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ni_compose_l ni_hole _i ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c59_Q' : process",
                    "c58_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c85_H4 : iterate x ni_context_relation S (ni_fill (ni_compose_l ni_hole Q') P'0)\n  (ni_fill (ni_compose_l ni_hole Q') Q0)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c85_goal : iterate x ni_context_relation S (compose P'0 Q') (compose Q0 Q')",
                    "c58_H4 : eq l0 l"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (P' : process) (l : label) (_ : lts (ni_fill C P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))",
                    "c58_H5 : eq Q0 p"
                ],
                "tactic_res": [
                    "c61_H5 : ex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) (recv_label c n) Q')\n     (closure ni_context_relation S P'0 Q'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q0 ] .",
                "tactic_args": [
                    "c58_H5 : eq Q0 p"
                ],
                "tactic_res": [
                    "c61_H3 : and (lts (ni_fill C Q) (recv_label c n) Q0)\n  (closure ni_context_relation S P'0 Q0)",
                    "c61_Q0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c58_H3 : eq P0 (ni_fill C P)"
                ],
                "tactic_res": [
                    "c61_H4 : closure ni_context_relation S P'0 Q0",
                    "c61_H3 : lts (ni_fill C Q) (recv_label c n) Q0"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c61_goal : ex\n  (fun Q'0 : process =>\n   and (lts (ni_fill (ni_compose_l C p) Q) tau_label Q'0)\n     (closure ni_context_relation S (compose P'0 Q') Q'0))"
                ],
                "tactic_res": [
                    "c86_goal : ex\n  (fun Q'0 : process =>\n   and (lts (compose (ni_fill C Q) p) tau_label Q'0)\n     (closure ni_context_relation S (compose P'0 Q') Q'0))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c86_goal : ex\n  (fun Q'0 : process =>\n   and (lts (compose (ni_fill C Q) p) tau_label Q'0)\n     (closure ni_context_relation S (compose P'0 Q') Q'0))",
                    "c58_Q0 : process",
                    "c59_Q' : process"
                ],
                "tactic_res": [
                    "c87_goal : and (lts (compose (ni_fill C Q) p) tau_label (compose Q0 Q'))\n  (closure ni_context_relation S (compose P'0 Q') (compose Q0 Q'))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c87_goal : and (lts (compose (ni_fill C Q) p) tau_label (compose Q0 Q'))\n  (closure ni_context_relation S (compose P'0 Q') (compose Q0 Q'))"
                ],
                "tactic_res": [
                    "c88_goal : lts (compose (ni_fill C Q) p) tau_label (compose Q0 Q')",
                    "c89_goal : closure ni_context_relation S (compose P'0 Q') (compose Q0 Q')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c88_goal : lts (compose (ni_fill C Q) p) tau_label (compose Q0 Q')",
                    "_global_lts_comm_right : forall (P P' Q Q' : process) (c n : channel)\n         (_ : lts P (recv_label c n) P') (_ : lts Q (send_label c n) Q'),\n       lts (compose P Q) tau_label (compose P' Q')"
                ],
                "tactic_res": [
                    "c90_goal : lts (ni_fill C Q) (recv_label ?c ?n) Q0",
                    "c91_goal : lts p (send_label ?c ?n) Q'"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c90_goal : lts (ni_fill C Q) (recv_label ?c ?n) Q0"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c91_goal : lts p (send_label c n) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ n' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ n' ] .",
                "tactic_args": [
                    "c58_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c89_H4 : iterate n' ni_context_relation S P'0 Q0",
                    "c89_n' : nat"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c89_goal : closure ni_context_relation S (compose P'0 Q') (compose Q0 Q')",
                    "c89_n' : nat"
                ],
                "tactic_res": [
                    "c92_goal : iterate n' ni_context_relation S (compose P'0 Q') (compose Q0 Q')"
                ]
            },
            {
                "tactic_sig": "apply _i with ( _i := ni_compose_l ni_hole _i ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ni_compose_l ni_hole _i ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c59_Q' : process",
                    "c58_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c92_H4 : iterate n' ni_context_relation S\n  (ni_fill (ni_compose_l ni_hole Q') P'0)\n  (ni_fill (ni_compose_l ni_hole Q') Q0)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c92_goal : iterate n' ni_context_relation S (compose P'0 Q') (compose Q0 Q')",
                    "c58_H4 : eq l0 l"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c8_goal : forall (P' : process) (l : label)\n  (_ : lts (ni_fill (ni_compose_r p C) P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_compose_r p C) Q) l Q')\n     (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c93_goal : ex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_compose_r p C) Q) l Q')\n     (closure ni_context_relation S P' Q'))",
                    "c93_P' : process",
                    "c93_l : label",
                    "c93_H1 : lts (ni_fill (ni_compose_r p C) P) l P'"
                ]
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c93_goal : ex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_compose_r p C) Q) l Q')\n     (closure ni_context_relation S P' Q'))",
                    "c2_H1 : lts (ni_fill C P) l P'"
                ],
                "tactic_res": [
                    "c94_goal : ex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_compose_r p C) Q) l Q')\n     (closure ni_context_relation S (compose P'0 (ni_fill C P)) Q'))",
                    "c94_H6 : eq (compose P'0 (ni_fill C P)) P'",
                    "c94_H4 : eq l0 l",
                    "c94_H5 : eq Q0 (ni_fill C P)",
                    "c94_H3 : eq P0 p",
                    "c94_H7 : lts p l P'0",
                    "c94_l0 : label",
                    "c94_Q0 : process",
                    "c94_P'0 : process",
                    "c94_P0 : process",
                    "c95_goal : ex\n  (fun Q'0 : process =>\n   and (lts (ni_fill (ni_compose_r p C) Q) l Q'0)\n     (closure ni_context_relation S (compose p Q') Q'0))",
                    "c95_H6 : eq (compose p Q') P'",
                    "c95_H4 : eq l0 l",
                    "c95_H5 : eq Q0 (ni_fill C P)",
                    "c95_H3 : eq P0 p",
                    "c95_H7 : lts (ni_fill C P) l Q'",
                    "c95_l0 : label",
                    "c95_Q' : process",
                    "c95_Q0 : process",
                    "c95_P0 : process",
                    "c96_goal : ex\n  (fun Q'0 : process =>\n   and (lts (ni_fill (ni_compose_r p C) Q) tau_label Q'0)\n     (closure ni_context_relation S (compose P'0 Q') Q'0))",
                    "c96_H7 : eq (compose P'0 Q') P'",
                    "c96_H6 : eq tau_label l",
                    "c96_H4 : eq Q0 (ni_fill C P)",
                    "c96_H3 : eq P0 p",
                    "c96_H8 : lts (ni_fill C P) (recv_label c n) Q'",
                    "c96_H5 : lts p (send_label c n) P'0",
                    "c96_n : channel",
                    "c96_c : channel",
                    "c96_Q' : process",
                    "c96_Q0 : process",
                    "c96_P'0 : process",
                    "c96_P0 : process",
                    "c97_goal : ex\n  (fun Q'0 : process =>\n   and (lts (ni_fill (ni_compose_r p C) Q) tau_label Q'0)\n     (closure ni_context_relation S (compose P'0 Q') Q'0))",
                    "c97_H7 : eq (compose P'0 Q') P'",
                    "c97_H6 : eq tau_label l",
                    "c97_H4 : eq Q0 (ni_fill C P)",
                    "c97_H3 : eq P0 p",
                    "c97_H8 : lts (ni_fill C P) (send_label c n) Q'",
                    "c97_H5 : lts p (recv_label c n) P'0",
                    "c97_n : channel",
                    "c97_c : channel",
                    "c97_Q' : process",
                    "c97_Q0 : process",
                    "c97_P'0 : process",
                    "c97_P0 : process"
                ]
            },
            {
                "tactic_sig": "simpl in * .",
                "tactic_sig_no_out_arg": "simpl in * .",
                "tactic_args": [
                    "c94_goal : ex\n  (fun Q' : process =>\n   and (lts (ni_fill (ni_compose_r p C) Q) l Q')\n     (closure ni_context_relation S (compose P'0 (ni_fill C P)) Q'))"
                ],
                "tactic_res": [
                    "c98_goal : ex\n  (fun Q' : process =>\n   and (lts (compose p (ni_fill C Q)) l Q')\n     (closure ni_context_relation S (compose P'0 (ni_fill C P)) Q'))",
                    "c98_H1 : lts (compose p (ni_fill C P)) l (compose P'0 (ni_fill C P))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i ( ni_fill _i _i ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i ( ni_fill _i _i ) ) .",
                "tactic_args": [
                    "c98_goal : ex\n  (fun Q' : process =>\n   and (lts (compose p (ni_fill C Q)) l Q')\n     (closure ni_context_relation S (compose P'0 (ni_fill C P)) Q'))",
                    "c94_P'0 : process",
                    "c2_C : ni_context",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c99_goal : and (lts (compose p (ni_fill C Q)) l (compose P'0 (ni_fill C Q)))\n  (closure ni_context_relation S (compose P'0 (ni_fill C P))\n     (compose P'0 (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c99_goal : and (lts (compose p (ni_fill C Q)) l (compose P'0 (ni_fill C Q)))\n  (closure ni_context_relation S (compose P'0 (ni_fill C P))\n     (compose P'0 (ni_fill C Q)))"
                ],
                "tactic_res": [
                    "c100_goal : lts (compose p (ni_fill C Q)) l (compose P'0 (ni_fill C Q))",
                    "c101_goal : closure ni_context_relation S (compose P'0 (ni_fill C P))\n  (compose P'0 (ni_fill C Q))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c100_goal : lts (compose p (ni_fill C Q)) l (compose P'0 (ni_fill C Q))",
                    "_global_lts_comp_left : forall (P P' Q : process) (l : label) (_ : lts P l P'),\n       lts (compose P Q) l (compose P' Q)"
                ],
                "tactic_res": [
                    "c102_goal : lts p l P'0"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c102_goal : lts p l P'0",
                    "c94_H7 : lts p l P'0"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "exists 0 .",
                "tactic_sig_no_out_arg": "exists 0 .",
                "tactic_args": [
                    "c101_goal : closure ni_context_relation S (compose P'0 (ni_fill C P))\n  (compose P'0 (ni_fill C Q))"
                ],
                "tactic_res": [
                    "c103_goal : iterate 0 ni_context_relation S (compose P'0 (ni_fill C P))\n  (compose P'0 (ni_fill C Q))"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c103_goal : iterate 0 ni_context_relation S (compose P'0 (ni_fill C P))\n  (compose P'0 (ni_fill C Q))"
                ],
                "tactic_res": [
                    "c104_goal : ni_context_relation S (compose P'0 (ni_fill C P))\n  (compose P'0 (ni_fill C Q))"
                ]
            },
            {
                "tactic_sig": "exists ( ni_compose_r _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( ni_compose_r _i _i ) .",
                "tactic_args": [
                    "c104_goal : ni_context_relation S (compose P'0 (ni_fill C P))\n  (compose P'0 (ni_fill C Q))",
                    "c94_P'0 : process",
                    "c2_C : ni_context"
                ],
                "tactic_res": [
                    "c105_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (S P' Q')\n        (and\n           (eq (compose P'0 (ni_fill C P))\n              (ni_fill (ni_compose_r P'0 C) P'))\n           (eq (compose P'0 (ni_fill C Q))\n              (ni_fill (ni_compose_r P'0 C) Q')))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c105_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (S P' Q')\n        (and\n           (eq (compose P'0 (ni_fill C P))\n              (ni_fill (ni_compose_r P'0 C) P'))\n           (eq (compose P'0 (ni_fill C Q))\n              (ni_fill (ni_compose_r P'0 C) Q')))))",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c106_goal : ex\n  (fun Q' : process =>\n   and (S P Q')\n     (and\n        (eq (compose P'0 (ni_fill C P))\n           (ni_fill (ni_compose_r P'0 C) P))\n        (eq (compose P'0 (ni_fill C Q))\n           (ni_fill (ni_compose_r P'0 C) Q'))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c106_goal : ex\n  (fun Q' : process =>\n   and (S P Q')\n     (and\n        (eq (compose P'0 (ni_fill C P))\n           (ni_fill (ni_compose_r P'0 C) P))\n        (eq (compose P'0 (ni_fill C Q))\n           (ni_fill (ni_compose_r P'0 C) Q'))))",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c107_goal : and (S P Q)\n  (and\n     (eq (compose P'0 (ni_fill C P)) (ni_fill (ni_compose_r P'0 C) P))\n     (eq (compose P'0 (ni_fill C Q)) (ni_fill (ni_compose_r P'0 C) Q)))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c107_goal : and (S P Q)\n  (and\n     (eq (compose P'0 (ni_fill C P)) (ni_fill (ni_compose_r P'0 C) P))\n     (eq (compose P'0 (ni_fill C Q)) (ni_fill (ni_compose_r P'0 C) Q)))"
                ],
                "tactic_res": [
                    "c108_goal : S P Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c108_goal : S P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (P' : process) (l : label) (_ : lts (ni_fill C P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))",
                    "c94_H7 : lts p l P'0"
                ],
                "tactic_res": [
                    "c95_H7 : ex\n  (fun Q'0 : process =>\n   and (lts (ni_fill C Q) l Q'0) (closure ni_context_relation S Q' Q'0))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c94_H7 : lts p l P'0"
                ],
                "tactic_res": [
                    "c95_H3 : and (lts (ni_fill C Q) l x) (closure ni_context_relation S Q' x)",
                    "c95_x : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c94_H3 : eq P0 p"
                ],
                "tactic_res": [
                    "c95_H4 : closure ni_context_relation S Q' x",
                    "c95_H3 : lts (ni_fill C Q) l x"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c95_goal : ex\n  (fun Q'0 : process =>\n   and (lts (ni_fill (ni_compose_r p C) Q) l Q'0)\n     (closure ni_context_relation S (compose p Q') Q'0))",
                    "c7_p : process",
                    "c95_x : process"
                ],
                "tactic_res": [
                    "c109_goal : and (lts (ni_fill (ni_compose_r p C) Q) l (compose p x))\n  (closure ni_context_relation S (compose p Q') (compose p x))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c109_goal : and (lts (ni_fill (ni_compose_r p C) Q) l (compose p x))\n  (closure ni_context_relation S (compose p Q') (compose p x))"
                ],
                "tactic_res": [
                    "c110_goal : lts (ni_fill (ni_compose_r p C) Q) l (compose p x)",
                    "c111_goal : closure ni_context_relation S (compose p Q') (compose p x)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c110_goal : lts (ni_fill (ni_compose_r p C) Q) l (compose p x)"
                ],
                "tactic_res": [
                    "c112_goal : lts (compose p (ni_fill C Q)) l (compose p x)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c112_goal : lts (compose p (ni_fill C Q)) l (compose p x)",
                    "_global_lts_comp_right : forall (P Q Q' : process) (l : label) (_ : lts Q l Q'),\n       lts (compose P Q) l (compose P Q')"
                ],
                "tactic_res": [
                    "c113_goal : lts (ni_fill C Q) l x"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c113_goal : lts (ni_fill C Q) l x",
                    "c94_H3 : eq P0 p"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c94_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c111_H4 : iterate x0 ni_context_relation S Q' x",
                    "c111_x0 : nat"
                ]
            },
            {
                "tactic_sig": "exists ( _i ) .",
                "tactic_sig_no_out_arg": "exists ( _i ) .",
                "tactic_args": [
                    "c111_goal : closure ni_context_relation S (compose p Q') (compose p x)",
                    "c111_x0 : nat"
                ],
                "tactic_res": [
                    "c114_goal : iterate x0 ni_context_relation S (compose p Q') (compose p x)"
                ]
            },
            {
                "tactic_sig": "apply _i with ( _i := ( ni_compose_r _i ni_hole ) ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ( ni_compose_r _i ni_hole ) ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c7_p : process",
                    "c94_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c114_H4 : iterate x0 ni_context_relation S (ni_fill (ni_compose_r p ni_hole) Q')\n  (ni_fill (ni_compose_r p ni_hole) x)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c114_goal : iterate x0 ni_context_relation S (compose p Q') (compose p x)",
                    "c94_H4 : eq l0 l"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (P' : process) (l : label) (_ : lts (ni_fill C P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))",
                    "c96_H8 : lts (ni_fill C P) (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c96_H8 : ex\n  (fun Q'0 : process =>\n   and (lts (ni_fill C Q) (recv_label c n) Q'0)\n     (closure ni_context_relation S Q' Q'0))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q0 ] .",
                "tactic_args": [
                    "c96_H8 : lts (ni_fill C P) (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c96_H3 : and (lts (ni_fill C Q) (recv_label c n) Q0)\n  (closure ni_context_relation S Q' Q0)",
                    "c96_Q0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c94_H3 : eq P0 p"
                ],
                "tactic_res": [
                    "c96_H4 : closure ni_context_relation S Q' Q0",
                    "c96_H3 : lts (ni_fill C Q) (recv_label c n) Q0"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c96_goal : ex\n  (fun Q'0 : process =>\n   and (lts (ni_fill (ni_compose_r p C) Q) tau_label Q'0)\n     (closure ni_context_relation S (compose P'0 Q') Q'0))"
                ],
                "tactic_res": [
                    "c115_goal : ex\n  (fun Q'0 : process =>\n   and (lts (compose p (ni_fill C Q)) tau_label Q'0)\n     (closure ni_context_relation S (compose P'0 Q') Q'0))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c115_goal : ex\n  (fun Q'0 : process =>\n   and (lts (compose p (ni_fill C Q)) tau_label Q'0)\n     (closure ni_context_relation S (compose P'0 Q') Q'0))",
                    "c94_P'0 : process",
                    "c94_Q0 : process"
                ],
                "tactic_res": [
                    "c116_goal : and (lts (compose p (ni_fill C Q)) tau_label (compose P'0 Q0))\n  (closure ni_context_relation S (compose P'0 Q') (compose P'0 Q0))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c116_goal : and (lts (compose p (ni_fill C Q)) tau_label (compose P'0 Q0))\n  (closure ni_context_relation S (compose P'0 Q') (compose P'0 Q0))"
                ],
                "tactic_res": [
                    "c117_goal : lts (compose p (ni_fill C Q)) tau_label (compose P'0 Q0)",
                    "c118_goal : closure ni_context_relation S (compose P'0 Q') (compose P'0 Q0)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c117_goal : lts (compose p (ni_fill C Q)) tau_label (compose P'0 Q0)",
                    "_global_lts_comm_left : forall (P P' Q Q' : process) (c n : channel)\n         (_ : lts P (send_label c n) P') (_ : lts Q (recv_label c n) Q'),\n       lts (compose P Q) tau_label (compose P' Q')"
                ],
                "tactic_res": [
                    "c119_goal : lts p (send_label ?c ?n) P'0",
                    "c120_goal : lts (ni_fill C Q) (recv_label ?c ?n) Q0"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c119_goal : lts p (send_label ?c ?n) P'0",
                    "c94_H5 : eq Q0 (ni_fill C P)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c120_goal : lts (ni_fill C Q) (recv_label c n) Q0",
                    "c94_H3 : eq P0 p"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c94_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c118_H4 : iterate x ni_context_relation S Q' Q0",
                    "c118_x : nat"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c118_goal : closure ni_context_relation S (compose P'0 Q') (compose P'0 Q0)",
                    "c95_x : process"
                ],
                "tactic_res": [
                    "c121_goal : iterate x ni_context_relation S (compose P'0 Q') (compose P'0 Q0)"
                ]
            },
            {
                "tactic_sig": "apply _i with ( _i := ni_compose_r _i ni_hole ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ni_compose_r _i ni_hole ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c94_P'0 : process",
                    "c94_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c121_H4 : iterate x ni_context_relation S (ni_fill (ni_compose_r P'0 ni_hole) Q')\n  (ni_fill (ni_compose_r P'0 ni_hole) Q0)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c121_goal : iterate x ni_context_relation S (compose P'0 Q') (compose P'0 Q0)",
                    "c94_H4 : eq l0 l"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (P' : process) (l : label) (_ : lts (ni_fill C P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))",
                    "c96_H8 : lts (ni_fill C P) (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c97_H8 : ex\n  (fun Q'0 : process =>\n   and (lts (ni_fill C Q) (send_label c n) Q'0)\n     (closure ni_context_relation S Q' Q'0))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q0 ] .",
                "tactic_args": [
                    "c96_H8 : lts (ni_fill C P) (recv_label c n) Q'"
                ],
                "tactic_res": [
                    "c97_H3 : and (lts (ni_fill C Q) (send_label c n) Q0)\n  (closure ni_context_relation S Q' Q0)",
                    "c97_Q0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c94_H3 : eq P0 p"
                ],
                "tactic_res": [
                    "c97_H4 : closure ni_context_relation S Q' Q0",
                    "c97_H3 : lts (ni_fill C Q) (send_label c n) Q0"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c97_goal : ex\n  (fun Q'0 : process =>\n   and (lts (ni_fill (ni_compose_r p C) Q) tau_label Q'0)\n     (closure ni_context_relation S (compose P'0 Q') Q'0))"
                ],
                "tactic_res": [
                    "c122_goal : ex\n  (fun Q'0 : process =>\n   and (lts (compose p (ni_fill C Q)) tau_label Q'0)\n     (closure ni_context_relation S (compose P'0 Q') Q'0))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c122_goal : ex\n  (fun Q'0 : process =>\n   and (lts (compose p (ni_fill C Q)) tau_label Q'0)\n     (closure ni_context_relation S (compose P'0 Q') Q'0))",
                    "c94_P'0 : process",
                    "c94_Q0 : process"
                ],
                "tactic_res": [
                    "c123_goal : and (lts (compose p (ni_fill C Q)) tau_label (compose P'0 Q0))\n  (closure ni_context_relation S (compose P'0 Q') (compose P'0 Q0))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c123_goal : and (lts (compose p (ni_fill C Q)) tau_label (compose P'0 Q0))\n  (closure ni_context_relation S (compose P'0 Q') (compose P'0 Q0))"
                ],
                "tactic_res": [
                    "c124_goal : lts (compose p (ni_fill C Q)) tau_label (compose P'0 Q0)",
                    "c125_goal : closure ni_context_relation S (compose P'0 Q') (compose P'0 Q0)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c124_goal : lts (compose p (ni_fill C Q)) tau_label (compose P'0 Q0)",
                    "_global_lts_comm_right : forall (P P' Q Q' : process) (c n : channel)\n         (_ : lts P (recv_label c n) P') (_ : lts Q (send_label c n) Q'),\n       lts (compose P Q) tau_label (compose P' Q')"
                ],
                "tactic_res": [
                    "c126_goal : lts p (recv_label ?c ?n) P'0",
                    "c127_goal : lts (ni_fill C Q) (send_label ?c ?n) Q0"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c126_goal : lts p (recv_label ?c ?n) P'0"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c127_goal : lts (ni_fill C Q) (send_label c n) Q0"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ n' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ n' ] .",
                "tactic_args": [
                    "c94_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c125_H4 : iterate n' ni_context_relation S Q' Q0",
                    "c125_n' : nat"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c125_goal : closure ni_context_relation S (compose P'0 Q') (compose P'0 Q0)",
                    "c125_n' : nat"
                ],
                "tactic_res": [
                    "c128_goal : iterate n' ni_context_relation S (compose P'0 Q') (compose P'0 Q0)"
                ]
            },
            {
                "tactic_sig": "apply _i with ( _i := ni_compose_r _i ni_hole ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ni_compose_r _i ni_hole ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c94_P'0 : process",
                    "c94_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c128_H4 : iterate n' ni_context_relation S\n  (ni_fill (ni_compose_r P'0 ni_hole) Q')\n  (ni_fill (ni_compose_r P'0 ni_hole) Q0)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c128_goal : iterate n' ni_context_relation S (compose P'0 Q') (compose P'0 Q0)",
                    "c94_H4 : eq l0 l"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c9_goal : forall (P' : process) (l : label) (_ : lts (ni_fill ni_hole P) l P'),\nex\n  (fun Q' : process =>\n   and (lts (ni_fill ni_hole Q) l Q')\n     (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c129_goal : ex\n  (fun Q' : process =>\n   and (lts (ni_fill ni_hole Q) l Q')\n     (closure ni_context_relation S P' Q'))",
                    "c129_P' : process",
                    "c129_l : label",
                    "c129_H1 : lts (ni_fill ni_hole P) l P'"
                ]
            },
            {
                "tactic_sig": "simpl in * .",
                "tactic_sig_no_out_arg": "simpl in * .",
                "tactic_args": [
                    "c129_goal : ex\n  (fun Q' : process =>\n   and (lts (ni_fill ni_hole Q) l Q')\n     (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c130_goal : ex\n  (fun Q' : process =>\n   and (lts Q l Q') (closure ni_context_relation S P' Q'))",
                    "c130_H1 : lts P l P'"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c130_goal : ex\n  (fun Q' : process =>\n   and (lts Q l Q') (closure ni_context_relation S P' Q'))",
                    "c2_H0 : progresses R S",
                    "c2_H1 : lts (ni_fill C P) l P'"
                ],
                "tactic_res": [
                    "c131_goal : ex\n  (fun Q' : process =>\n   and (lts Q l Q') (closure ni_context_relation S P' Q'))",
                    "c131_H1 : ex (fun Q' : process => and (lts ?Q l Q') (S P' Q'))",
                    "c132_goal : R P ?Q",
                    "c132_H3 : forall (P Q : process) (l : label) (P' : process) \n  (_ : lts P l P') (_ : R P Q),\nex (fun Q' : process => and (lts Q l Q') (S P' Q'))"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c132_goal : R P ?Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ Q' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q' ] .",
                "tactic_args": [
                    "c2_H1 : lts (ni_fill C P) l P'"
                ],
                "tactic_res": [
                    "c131_H1 : and (lts Q l Q') (S P' Q')",
                    "c131_Q' : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c131_goal : ex\n  (fun Q' : process =>\n   and (lts Q l Q') (closure ni_context_relation S P' Q'))",
                    "c131_Q' : process"
                ],
                "tactic_res": [
                    "c133_goal : and (lts Q l Q') (closure ni_context_relation S P' Q')"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c133_goal : and (lts Q l Q') (closure ni_context_relation S P' Q')"
                ],
                "tactic_res": [
                    "c134_goal : lts Q l Q'",
                    "c135_goal : closure ni_context_relation S P' Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c134_goal : lts Q l Q'",
                    "c2_H1 : lts (ni_fill C P) l P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "exists 0 .",
                "tactic_sig_no_out_arg": "exists 0 .",
                "tactic_args": [
                    "c135_goal : closure ni_context_relation S P' Q'"
                ],
                "tactic_res": [
                    "c136_goal : iterate 0 ni_context_relation S P' Q'"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c136_goal : iterate 0 ni_context_relation S P' Q'"
                ],
                "tactic_res": [
                    "c137_goal : ni_context_relation S P' Q'"
                ]
            },
            {
                "tactic_sig": "exists ni_hole .",
                "tactic_sig_no_out_arg": "exists ni_hole .",
                "tactic_args": [
                    "c137_goal : ni_context_relation S P' Q'"
                ],
                "tactic_res": [
                    "c138_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q'0 : process =>\n      and (S P'0 Q'0)\n        (and (eq P' (ni_fill ni_hole P'0))\n           (eq Q' (ni_fill ni_hole Q'0)))))"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c138_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q'0 : process =>\n      and (S P'0 Q'0)\n        (and (eq P' (ni_fill ni_hole P'0))\n           (eq Q' (ni_fill ni_hole Q'0)))))"
                ],
                "tactic_res": [
                    "c139_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q'0 : process =>\n      and (S P'0 Q'0) (and (eq P' P'0) (eq Q' Q'0))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c139_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q'0 : process =>\n      and (S P'0 Q'0) (and (eq P' P'0) (eq Q' Q'0))))",
                    "c2_P' : process"
                ],
                "tactic_res": [
                    "c140_goal : ex (fun Q'0 : process => and (S P' Q'0) (and (eq P' P') (eq Q' Q'0)))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c140_goal : ex (fun Q'0 : process => and (S P' Q'0) (and (eq P' P') (eq Q' Q'0)))",
                    "c131_Q' : process"
                ],
                "tactic_res": [
                    "c141_goal : and (S P' Q') (and (eq P' P') (eq Q' Q'))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c141_goal : and (S P' Q') (and (eq P' P') (eq Q' Q'))"
                ],
                "tactic_res": [
                    "c142_goal : S P' Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c142_goal : S P' Q'",
                    "c2_H1 : lts (ni_fill C P) l P'"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "ni_context_progresses'",
        "proof": [
            {
                "tactic_sig": "Lemma ni_context_progresses' : forall P Q' Q C R S l , subset R S -> progresses R S -> lts ( ni_fill C Q ) l Q' -> R P Q -> exists P' , lts ( ni_fill C P ) l P' /\\ closure ni_context_relation S P' Q' .",
                "tactic_sig_no_out_arg": "Lemma ni_context_progresses' : forall P Q' Q C R S l , subset R S -> progresses R S -> lts ( ni_fill C Q ) l Q' -> R P Q -> exists P' , lts ( ni_fill C P ) l P' /\\ closure ni_context_relation S P' Q' .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : forall (P Q' Q : process) (C : ni_context) (R S : relation) \n  (l : label) (_ : subset R S) (_ : progresses R S)\n  (_ : lts (ni_fill C Q) l Q') (_ : R P Q),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c1_goal : forall (P Q' Q : process) (C : ni_context) (R S : relation) \n  (l : label) (_ : subset R S) (_ : progresses R S)\n  (_ : lts (ni_fill C Q) l Q') (_ : R P Q),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c2_goal : ex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))",
                    "c2_P : process",
                    "c2_Q' : process",
                    "c2_Q : process",
                    "c2_C : ni_context",
                    "c2_R : relation",
                    "c2_S : relation",
                    "c2_l : label",
                    "c2_H : subset R S",
                    "c2_H0 : progresses R S",
                    "c2_H1 : lts (ni_fill C Q) l Q'",
                    "c2_H2 : R P Q"
                ]
            },
            {
                "tactic_sig": "generalize dependent _i .",
                "tactic_sig_no_out_arg": "generalize dependent _i .",
                "tactic_args": [
                    "c2_goal : ex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))",
                    "c2_l : label"
                ],
                "tactic_res": [
                    "c3_goal : forall (l : label) (_ : lts (ni_fill C Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))"
                ]
            },
            {
                "tactic_sig": "generalize dependent _i .",
                "tactic_sig_no_out_arg": "generalize dependent _i .",
                "tactic_args": [
                    "c3_goal : forall (l : label) (_ : lts (ni_fill C Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))",
                    "c2_Q' : process"
                ],
                "tactic_res": [
                    "c4_goal : forall (Q' : process) (l : label) (_ : lts (ni_fill C Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))"
                ]
            },
            {
                "tactic_sig": "induction _i .",
                "tactic_sig_no_out_arg": "induction _i .",
                "tactic_args": [
                    "c4_goal : forall (Q' : process) (l : label) (_ : lts (ni_fill C Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))",
                    "c2_C : ni_context"
                ],
                "tactic_res": [
                    "c5_goal : forall (Q' : process) (l : label)\n  (_ : lts (ni_fill (ni_output c c0 C) Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_output c c0 C) P) l P')\n     (closure ni_context_relation S P' Q'))",
                    "c5_IHC : forall (Q' : process) (l : label) (_ : lts (ni_fill C Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))",
                    "c5_c0 : channel",
                    "c5_c : channel",
                    "c6_goal : forall (Q' : process) (l : label)\n  (_ : lts (ni_fill (ni_replicate C) Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_replicate C) P) l P')\n     (closure ni_context_relation S P' Q'))",
                    "c6_IHC : forall (Q' : process) (l : label) (_ : lts (ni_fill C Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))",
                    "c7_goal : forall (Q' : process) (l : label)\n  (_ : lts (ni_fill (ni_compose_l C p) Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_compose_l C p) P) l P')\n     (closure ni_context_relation S P' Q'))",
                    "c7_IHC : forall (Q' : process) (l : label) (_ : lts (ni_fill C Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))",
                    "c7_p : process",
                    "c8_goal : forall (Q' : process) (l : label)\n  (_ : lts (ni_fill (ni_compose_r p C) Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_compose_r p C) P) l P')\n     (closure ni_context_relation S P' Q'))",
                    "c8_IHC : forall (Q' : process) (l : label) (_ : lts (ni_fill C Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))",
                    "c8_p : process",
                    "c9_goal : forall (Q' : process) (l : label) (_ : lts (ni_fill ni_hole Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill ni_hole P) l P')\n     (closure ni_context_relation S P' Q'))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c5_goal : forall (Q' : process) (l : label)\n  (_ : lts (ni_fill (ni_output c c0 C) Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_output c c0 C) P) l P')\n     (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c10_goal : ex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_output c c0 C) P) l P')\n     (closure ni_context_relation S P' Q'))",
                    "c10_Q' : process",
                    "c10_l : label",
                    "c10_H1 : lts (ni_fill (ni_output c c0 C) Q) l Q'"
                ]
            },
            {
                "tactic_sig": "simpl in * .",
                "tactic_sig_no_out_arg": "simpl in * .",
                "tactic_args": [
                    "c10_goal : ex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_output c c0 C) P) l P')\n     (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c11_goal : ex\n  (fun P' : process =>\n   and (lts (output c c0 (ni_fill C P)) l P')\n     (closure ni_context_relation S P' Q'))",
                    "c11_H1 : lts (output c c0 (ni_fill C Q)) l Q'"
                ]
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c11_goal : ex\n  (fun P' : process =>\n   and (lts (output c c0 (ni_fill C P)) l P')\n     (closure ni_context_relation S P' Q'))",
                    "c2_H1 : lts (ni_fill C Q) l Q'"
                ],
                "tactic_res": [
                    "c12_goal : ex\n  (fun P' : process =>\n   and (lts (output c c0 (ni_fill C P)) (send_label c c0) P')\n     (closure ni_context_relation S P' (ni_fill C Q)))",
                    "c12_H7 : eq (ni_fill C Q) Q'",
                    "c12_H3 : eq (send_label c c0) l",
                    "c12_H6 : eq P0 (ni_fill C Q)",
                    "c12_H5 : eq c' c0",
                    "c12_H4 : eq c1 c",
                    "c12_c' : channel",
                    "c12_c1 : channel",
                    "c12_P0 : process"
                ]
            },
            {
                "tactic_sig": "exists ( ni_fill _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( ni_fill _i _i ) .",
                "tactic_args": [
                    "c12_goal : ex\n  (fun P' : process =>\n   and (lts (output c c0 (ni_fill C P)) (send_label c c0) P')\n     (closure ni_context_relation S P' (ni_fill C Q)))",
                    "c2_C : ni_context",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c13_goal : and (lts (output c c0 (ni_fill C P)) (send_label c c0) (ni_fill C P))\n  (closure ni_context_relation S (ni_fill C P) (ni_fill C Q))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c13_goal : and (lts (output c c0 (ni_fill C P)) (send_label c c0) (ni_fill C P))\n  (closure ni_context_relation S (ni_fill C P) (ni_fill C Q))"
                ],
                "tactic_res": [
                    "c14_goal : lts (output c c0 (ni_fill C P)) (send_label c c0) (ni_fill C P)",
                    "c15_goal : closure ni_context_relation S (ni_fill C P) (ni_fill C Q)"
                ]
            },
            {
                "tactic_sig": "constructor .",
                "tactic_sig_no_out_arg": "constructor .",
                "tactic_args": [
                    "c14_goal : lts (output c c0 (ni_fill C P)) (send_label c c0) (ni_fill C P)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "exists 0 .",
                "tactic_sig_no_out_arg": "exists 0 .",
                "tactic_args": [
                    "c15_goal : closure ni_context_relation S (ni_fill C P) (ni_fill C Q)"
                ],
                "tactic_res": [
                    "c16_goal : iterate 0 ni_context_relation S (ni_fill C P) (ni_fill C Q)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c16_goal : iterate 0 ni_context_relation S (ni_fill C P) (ni_fill C Q)"
                ],
                "tactic_res": [
                    "c17_goal : ni_context_relation S (ni_fill C P) (ni_fill C Q)"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c17_goal : ni_context_relation S (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context"
                ],
                "tactic_res": [
                    "c18_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (S P' Q')\n        (and (eq (ni_fill C P) (ni_fill C P'))\n           (eq (ni_fill C Q) (ni_fill C Q')))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c18_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (S P' Q')\n        (and (eq (ni_fill C P) (ni_fill C P'))\n           (eq (ni_fill C Q) (ni_fill C Q')))))",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c19_goal : ex\n  (fun Q' : process =>\n   and (S P Q')\n     (and (eq (ni_fill C P) (ni_fill C P))\n        (eq (ni_fill C Q) (ni_fill C Q'))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c19_goal : ex\n  (fun Q' : process =>\n   and (S P Q')\n     (and (eq (ni_fill C P) (ni_fill C P))\n        (eq (ni_fill C Q) (ni_fill C Q'))))",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c20_goal : and (S P Q)\n  (and (eq (ni_fill C P) (ni_fill C P))\n     (eq (ni_fill C Q) (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c20_goal : and (S P Q)\n  (and (eq (ni_fill C P) (ni_fill C P))\n     (eq (ni_fill C Q) (ni_fill C Q)))"
                ],
                "tactic_res": [
                    "c21_goal : S P Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c21_goal : S P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c6_goal : forall (Q' : process) (l : label)\n  (_ : lts (ni_fill (ni_replicate C) Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_replicate C) P) l P')\n     (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c22_goal : ex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_replicate C) P) l P')\n     (closure ni_context_relation S P' Q'))",
                    "c22_Q' : process",
                    "c22_l : label",
                    "c22_H1 : lts (ni_fill (ni_replicate C) Q) l Q'"
                ]
            },
            {
                "tactic_sig": "simpl in * .",
                "tactic_sig_no_out_arg": "simpl in * .",
                "tactic_args": [
                    "c22_goal : ex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_replicate C) P) l P')\n     (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c23_goal : ex\n  (fun P' : process =>\n   and (lts (replicate (ni_fill C P)) l P')\n     (closure ni_context_relation S P' Q'))",
                    "c23_H1 : lts (replicate (ni_fill C Q)) l Q'"
                ]
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c23_goal : ex\n  (fun P' : process =>\n   and (lts (replicate (ni_fill C P)) l P')\n     (closure ni_context_relation S P' Q'))",
                    "c2_H1 : lts (ni_fill C Q) l Q'"
                ],
                "tactic_res": [
                    "c24_goal : ex\n  (fun P'0 : process =>\n   and (lts (replicate (ni_fill C P)) l P'0)\n     (closure ni_context_relation S P'0\n        (compose P' (replicate (ni_fill C Q)))))",
                    "c24_H6 : eq (compose P' (replicate (ni_fill C Q))) Q'",
                    "c24_H5 : eq a l",
                    "c24_H3 : eq P0 (ni_fill C Q)",
                    "c24_H4 : lts (ni_fill C Q) l P'",
                    "c24_P' : process",
                    "c24_a : label",
                    "c24_P0 : process",
                    "c25_goal : ex\n  (fun P'0 : process =>\n   and (lts (replicate (ni_fill C P)) tau_label P'0)\n     (closure ni_context_relation S P'0\n        (compose (compose P' P'') (replicate (ni_fill C Q)))))",
                    "c25_H7 : eq (compose (compose P' P'') (replicate (ni_fill C Q))) Q'",
                    "c25_H6 : eq tau_label l",
                    "c25_H3 : eq P0 (ni_fill C Q)",
                    "c25_H5 : lts (ni_fill C Q) (recv_label c n) P''",
                    "c25_H4 : lts (ni_fill C Q) (send_label c n) P'",
                    "c25_P'' : process",
                    "c25_P' : process",
                    "c25_n : channel",
                    "c25_c : channel",
                    "c25_P0 : process"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (Q' : process) (l : label) (_ : lts (ni_fill C Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))",
                    "c24_H4 : lts (ni_fill C Q) l P'"
                ],
                "tactic_res": [
                    "c24_H4 : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill C P) l P'0) (closure ni_context_relation S P'0 P'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q' ] .",
                "tactic_args": [
                    "c24_H4 : lts (ni_fill C Q) l P'"
                ],
                "tactic_res": [
                    "c24_H3 : and (lts (ni_fill C P) l Q') (closure ni_context_relation S Q' P')",
                    "c24_Q' : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c24_H3 : eq P0 (ni_fill C Q)"
                ],
                "tactic_res": [
                    "c24_H4 : closure ni_context_relation S Q' P'",
                    "c24_H3 : lts (ni_fill C P) l Q'"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i ( replicate ( ni_fill _i _i ) ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i ( replicate ( ni_fill _i _i ) ) ) .",
                "tactic_args": [
                    "c24_goal : ex\n  (fun P'0 : process =>\n   and (lts (replicate (ni_fill C P)) l P'0)\n     (closure ni_context_relation S P'0\n        (compose P' (replicate (ni_fill C Q)))))",
                    "c2_Q' : process",
                    "c2_C : ni_context",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c26_goal : and\n  (lts (replicate (ni_fill C P)) l\n     (compose Q' (replicate (ni_fill C P))))\n  (closure ni_context_relation S (compose Q' (replicate (ni_fill C P)))\n     (compose P' (replicate (ni_fill C Q))))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c26_goal : and\n  (lts (replicate (ni_fill C P)) l\n     (compose Q' (replicate (ni_fill C P))))\n  (closure ni_context_relation S (compose Q' (replicate (ni_fill C P)))\n     (compose P' (replicate (ni_fill C Q))))"
                ],
                "tactic_res": [
                    "c27_goal : lts (replicate (ni_fill C P)) l (compose Q' (replicate (ni_fill C P)))",
                    "c28_goal : closure ni_context_relation S (compose Q' (replicate (ni_fill C P)))\n  (compose P' (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c27_goal : lts (replicate (ni_fill C P)) l (compose Q' (replicate (ni_fill C P)))",
                    "_global_lts_rep_act : forall (P : process) (a : label) (P' : process) (_ : lts P a P'),\n       lts (replicate P) a (compose P' (replicate P))"
                ],
                "tactic_res": [
                    "c29_goal : lts (ni_fill C P) l Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c29_goal : lts (ni_fill C P) l Q'",
                    "c24_H3 : eq P0 (ni_fill C Q)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c24_H4 : lts (ni_fill C Q) l P'"
                ],
                "tactic_res": [
                    "c28_H4 : iterate x ni_context_relation S Q' P'",
                    "c28_x : nat"
                ]
            },
            {
                "tactic_sig": "exists ( 1 + _i ) .",
                "tactic_sig_no_out_arg": "exists ( 1 + _i ) .",
                "tactic_args": [
                    "c28_goal : closure ni_context_relation S (compose Q' (replicate (ni_fill C P)))\n  (compose P' (replicate (ni_fill C Q)))",
                    "c28_x : nat"
                ],
                "tactic_res": [
                    "c30_goal : iterate (Init.Nat.add 1 x) ni_context_relation S\n  (compose Q' (replicate (ni_fill C P)))\n  (compose P' (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c30_goal : iterate (Init.Nat.add 1 x) ni_context_relation S\n  (compose Q' (replicate (ni_fill C P)))\n  (compose P' (replicate (ni_fill C Q)))"
                ],
                "tactic_res": [
                    "c31_goal : r_compose (ni_context_relation S) (iterate x ni_context_relation S)\n  (compose Q' (replicate (ni_fill C P)))\n  (compose P' (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i ( replicate ( ni_fill _i _i ) ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i ( replicate ( ni_fill _i _i ) ) ) .",
                "tactic_args": [
                    "c31_goal : r_compose (ni_context_relation S) (iterate x ni_context_relation S)\n  (compose Q' (replicate (ni_fill C P)))\n  (compose P' (replicate (ni_fill C Q)))",
                    "c2_Q' : process",
                    "c2_C : ni_context",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c32_goal : and\n  (ni_context_relation S (compose Q' (replicate (ni_fill C P)))\n     (compose Q' (replicate (ni_fill C Q))))\n  (iterate x ni_context_relation S\n     (compose Q' (replicate (ni_fill C Q)))\n     (compose P' (replicate (ni_fill C Q))))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c32_goal : and\n  (ni_context_relation S (compose Q' (replicate (ni_fill C P)))\n     (compose Q' (replicate (ni_fill C Q))))\n  (iterate x ni_context_relation S\n     (compose Q' (replicate (ni_fill C Q)))\n     (compose P' (replicate (ni_fill C Q))))"
                ],
                "tactic_res": [
                    "c33_goal : ni_context_relation S (compose Q' (replicate (ni_fill C P)))\n  (compose Q' (replicate (ni_fill C Q)))",
                    "c34_goal : iterate x ni_context_relation S (compose Q' (replicate (ni_fill C Q)))\n  (compose P' (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "exists ( ni_compose_r _i ( ni_replicate _i ) ) .",
                "tactic_sig_no_out_arg": "exists ( ni_compose_r _i ( ni_replicate _i ) ) .",
                "tactic_args": [
                    "c33_goal : ni_context_relation S (compose Q' (replicate (ni_fill C P)))\n  (compose Q' (replicate (ni_fill C Q)))",
                    "c2_Q' : process",
                    "c2_C : ni_context"
                ],
                "tactic_res": [
                    "c35_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q'0 : process =>\n      and (S P' Q'0)\n        (and\n           (eq (compose Q' (replicate (ni_fill C P)))\n              (ni_fill (ni_compose_r Q' (ni_replicate C)) P'))\n           (eq (compose Q' (replicate (ni_fill C Q)))\n              (ni_fill (ni_compose_r Q' (ni_replicate C)) Q'0)))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c35_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q'0 : process =>\n      and (S P' Q'0)\n        (and\n           (eq (compose Q' (replicate (ni_fill C P)))\n              (ni_fill (ni_compose_r Q' (ni_replicate C)) P'))\n           (eq (compose Q' (replicate (ni_fill C Q)))\n              (ni_fill (ni_compose_r Q' (ni_replicate C)) Q'0)))))",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c36_goal : ex\n  (fun Q'0 : process =>\n   and (S P Q'0)\n     (and\n        (eq (compose Q' (replicate (ni_fill C P)))\n           (ni_fill (ni_compose_r Q' (ni_replicate C)) P))\n        (eq (compose Q' (replicate (ni_fill C Q)))\n           (ni_fill (ni_compose_r Q' (ni_replicate C)) Q'0))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c36_goal : ex\n  (fun Q'0 : process =>\n   and (S P Q'0)\n     (and\n        (eq (compose Q' (replicate (ni_fill C P)))\n           (ni_fill (ni_compose_r Q' (ni_replicate C)) P))\n        (eq (compose Q' (replicate (ni_fill C Q)))\n           (ni_fill (ni_compose_r Q' (ni_replicate C)) Q'0))))",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c37_goal : and (S P Q)\n  (and\n     (eq (compose Q' (replicate (ni_fill C P)))\n        (ni_fill (ni_compose_r Q' (ni_replicate C)) P))\n     (eq (compose Q' (replicate (ni_fill C Q)))\n        (ni_fill (ni_compose_r Q' (ni_replicate C)) Q)))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c37_goal : and (S P Q)\n  (and\n     (eq (compose Q' (replicate (ni_fill C P)))\n        (ni_fill (ni_compose_r Q' (ni_replicate C)) P))\n     (eq (compose Q' (replicate (ni_fill C Q)))\n        (ni_fill (ni_compose_r Q' (ni_replicate C)) Q)))"
                ],
                "tactic_res": [
                    "c38_goal : S P Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c38_goal : S P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i with ( _i := ( ni_compose_l ni_hole ( replicate ( ni_fill _i _i ) ) ) ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ( ni_compose_l ni_hole ( replicate ( ni_fill _i _i ) ) ) ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c2_C : ni_context",
                    "c2_Q : process",
                    "c24_H4 : lts (ni_fill C Q) l P'"
                ],
                "tactic_res": [
                    "c34_H4 : iterate x ni_context_relation S\n  (ni_fill (ni_compose_l ni_hole (replicate (ni_fill C Q))) Q')\n  (ni_fill (ni_compose_l ni_hole (replicate (ni_fill C Q))) P')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c34_goal : iterate x ni_context_relation S (compose Q' (replicate (ni_fill C Q)))\n  (compose P' (replicate (ni_fill C Q)))",
                    "c24_H4 : lts (ni_fill C Q) l P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (Q' : process) (l : label) (_ : lts (ni_fill C Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))",
                    "c24_H4 : lts (ni_fill C Q) l P'"
                ],
                "tactic_res": [
                    "c25_H4 : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill C P) (send_label c n) P'0)\n     (closure ni_context_relation S P'0 P'))"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (Q' : process) (l : label) (_ : lts (ni_fill C Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))",
                    "c24_H5 : eq a l"
                ],
                "tactic_res": [
                    "c25_H5 : ex\n  (fun P' : process =>\n   and (lts (ni_fill C P) (recv_label c n) P')\n     (closure ni_context_relation S P' P''))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c24_H4 : lts (ni_fill C Q) l P'"
                ],
                "tactic_res": [
                    "c25_H3 : and (lts (ni_fill C P) (send_label c n) x)\n  (closure ni_context_relation S x P')",
                    "c25_x : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c24_H3 : eq P0 (ni_fill C Q)"
                ],
                "tactic_res": [
                    "c25_H4 : closure ni_context_relation S x P'",
                    "c25_H3 : lts (ni_fill C P) (send_label c n) x"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c24_H5 : eq a l"
                ],
                "tactic_res": [
                    "c25_H5 : and (lts (ni_fill C P) (recv_label c n) x0)\n  (closure ni_context_relation S x0 P'')",
                    "c25_x0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c24_H5 : eq a l"
                ],
                "tactic_res": [
                    "c25_H6 : closure ni_context_relation S x0 P''",
                    "c25_H5 : lts (ni_fill C P) (recv_label c n) x0"
                ]
            },
            {
                "tactic_sig": "exists ( compose ( compose _i _i ) ( replicate ( ni_fill _i _i ) ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose ( compose _i _i ) ( replicate ( ni_fill _i _i ) ) ) .",
                "tactic_args": [
                    "c25_goal : ex\n  (fun P'0 : process =>\n   and (lts (replicate (ni_fill C P)) tau_label P'0)\n     (closure ni_context_relation S P'0\n        (compose (compose P' P'') (replicate (ni_fill C Q)))))",
                    "c25_x : process",
                    "c25_x0 : process",
                    "c2_C : ni_context",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c39_goal : and\n  (lts (replicate (ni_fill C P)) tau_label\n     (compose (compose x x0) (replicate (ni_fill C P))))\n  (closure ni_context_relation S\n     (compose (compose x x0) (replicate (ni_fill C P)))\n     (compose (compose P' P'') (replicate (ni_fill C Q))))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c39_goal : and\n  (lts (replicate (ni_fill C P)) tau_label\n     (compose (compose x x0) (replicate (ni_fill C P))))\n  (closure ni_context_relation S\n     (compose (compose x x0) (replicate (ni_fill C P)))\n     (compose (compose P' P'') (replicate (ni_fill C Q))))"
                ],
                "tactic_res": [
                    "c40_goal : lts (replicate (ni_fill C P)) tau_label\n  (compose (compose x x0) (replicate (ni_fill C P)))",
                    "c41_goal : closure ni_context_relation S\n  (compose (compose x x0) (replicate (ni_fill C P)))\n  (compose (compose P' P'') (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c40_goal : lts (replicate (ni_fill C P)) tau_label\n  (compose (compose x x0) (replicate (ni_fill C P)))",
                    "_global_lts_rep_comm : forall (P : process) (c n : channel) (P' P'' : process)\n         (_ : lts P (send_label c n) P') (_ : lts P (recv_label c n) P''),\n       lts (replicate P) tau_label (compose (compose P' P'') (replicate P))"
                ],
                "tactic_res": [
                    "c42_goal : lts (ni_fill C P) (send_label ?c ?n) x",
                    "c43_goal : lts (ni_fill C P) (recv_label ?c ?n) x0"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c42_goal : lts (ni_fill C P) (send_label ?c ?n) x",
                    "c24_H3 : eq P0 (ni_fill C Q)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c43_goal : lts (ni_fill C P) (recv_label c n) x0",
                    "c24_H5 : eq a l"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ m ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ m ] .",
                "tactic_args": [
                    "c24_H4 : lts (ni_fill C Q) l P'"
                ],
                "tactic_res": [
                    "c41_H4 : iterate m ni_context_relation S x P'",
                    "c41_m : nat"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ m'' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ m'' ] .",
                "tactic_args": [
                    "c24_H6 : eq (compose P' (replicate (ni_fill C Q))) Q'"
                ],
                "tactic_res": [
                    "c41_H6 : iterate m'' ni_context_relation S x0 P''",
                    "c41_m'' : nat"
                ]
            },
            {
                "tactic_sig": "exists ( 2 + _i + _i ) .",
                "tactic_sig_no_out_arg": "exists ( 2 + _i + _i ) .",
                "tactic_args": [
                    "c41_goal : closure ni_context_relation S\n  (compose (compose x x0) (replicate (ni_fill C P)))\n  (compose (compose P' P'') (replicate (ni_fill C Q)))",
                    "c41_m : nat",
                    "c41_m'' : nat"
                ],
                "tactic_res": [
                    "c44_goal : iterate (Init.Nat.add (Init.Nat.add 2 m) m'') ni_context_relation S\n  (compose (compose x x0) (replicate (ni_fill C P)))\n  (compose (compose P' P'') (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c44_goal : iterate (Init.Nat.add (Init.Nat.add 2 m) m'') ni_context_relation S\n  (compose (compose x x0) (replicate (ni_fill C P)))\n  (compose (compose P' P'') (replicate (ni_fill C Q)))"
                ],
                "tactic_res": [
                    "c45_goal : r_compose (ni_context_relation S)\n  (r_compose (ni_context_relation S)\n     (iterate (Init.Nat.add m m'') ni_context_relation S))\n  (compose (compose x x0) (replicate (ni_fill C P)))\n  (compose (compose P' P'') (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "exists ( compose ( compose _i _i ) ( replicate ( ni_fill _i _i ) ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose ( compose _i _i ) ( replicate ( ni_fill _i _i ) ) ) .",
                "tactic_args": [
                    "c45_goal : r_compose (ni_context_relation S)\n  (r_compose (ni_context_relation S)\n     (iterate (Init.Nat.add m m'') ni_context_relation S))\n  (compose (compose x x0) (replicate (ni_fill C P)))\n  (compose (compose P' P'') (replicate (ni_fill C Q)))",
                    "c25_x : process",
                    "c25_x0 : process",
                    "c2_C : ni_context",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c46_goal : and\n  (ni_context_relation S\n     (compose (compose x x0) (replicate (ni_fill C P)))\n     (compose (compose x x0) (replicate (ni_fill C Q))))\n  (r_compose (ni_context_relation S)\n     (iterate (Init.Nat.add m m'') ni_context_relation S)\n     (compose (compose x x0) (replicate (ni_fill C Q)))\n     (compose (compose P' P'') (replicate (ni_fill C Q))))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c46_goal : and\n  (ni_context_relation S\n     (compose (compose x x0) (replicate (ni_fill C P)))\n     (compose (compose x x0) (replicate (ni_fill C Q))))\n  (r_compose (ni_context_relation S)\n     (iterate (Init.Nat.add m m'') ni_context_relation S)\n     (compose (compose x x0) (replicate (ni_fill C Q)))\n     (compose (compose P' P'') (replicate (ni_fill C Q))))"
                ],
                "tactic_res": [
                    "c47_goal : ni_context_relation S\n  (compose (compose x x0) (replicate (ni_fill C P)))\n  (compose (compose x x0) (replicate (ni_fill C Q)))",
                    "c48_goal : r_compose (ni_context_relation S)\n  (iterate (Init.Nat.add m m'') ni_context_relation S)\n  (compose (compose x x0) (replicate (ni_fill C Q)))\n  (compose (compose P' P'') (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "exists ( ni_compose_r ( compose _i _i ) ( ni_replicate _i ) ) .",
                "tactic_sig_no_out_arg": "exists ( ni_compose_r ( compose _i _i ) ( ni_replicate _i ) ) .",
                "tactic_args": [
                    "c47_goal : ni_context_relation S\n  (compose (compose x x0) (replicate (ni_fill C P)))\n  (compose (compose x x0) (replicate (ni_fill C Q)))",
                    "c25_x : process",
                    "c25_x0 : process",
                    "c2_C : ni_context"
                ],
                "tactic_res": [
                    "c49_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (S P' Q')\n        (and\n           (eq (compose (compose x x0) (replicate (ni_fill C P)))\n              (ni_fill (ni_compose_r (compose x x0) (ni_replicate C))\n                 P'))\n           (eq (compose (compose x x0) (replicate (ni_fill C Q)))\n              (ni_fill (ni_compose_r (compose x x0) (ni_replicate C))\n                 Q')))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c49_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (S P' Q')\n        (and\n           (eq (compose (compose x x0) (replicate (ni_fill C P)))\n              (ni_fill (ni_compose_r (compose x x0) (ni_replicate C))\n                 P'))\n           (eq (compose (compose x x0) (replicate (ni_fill C Q)))\n              (ni_fill (ni_compose_r (compose x x0) (ni_replicate C))\n                 Q')))))",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c50_goal : ex\n  (fun Q' : process =>\n   and (S P Q')\n     (and\n        (eq (compose (compose x x0) (replicate (ni_fill C P)))\n           (ni_fill (ni_compose_r (compose x x0) (ni_replicate C)) P))\n        (eq (compose (compose x x0) (replicate (ni_fill C Q)))\n           (ni_fill (ni_compose_r (compose x x0) (ni_replicate C)) Q'))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c50_goal : ex\n  (fun Q' : process =>\n   and (S P Q')\n     (and\n        (eq (compose (compose x x0) (replicate (ni_fill C P)))\n           (ni_fill (ni_compose_r (compose x x0) (ni_replicate C)) P))\n        (eq (compose (compose x x0) (replicate (ni_fill C Q)))\n           (ni_fill (ni_compose_r (compose x x0) (ni_replicate C)) Q'))))",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c51_goal : and (S P Q)\n  (and\n     (eq (compose (compose x x0) (replicate (ni_fill C P)))\n        (ni_fill (ni_compose_r (compose x x0) (ni_replicate C)) P))\n     (eq (compose (compose x x0) (replicate (ni_fill C Q)))\n        (ni_fill (ni_compose_r (compose x x0) (ni_replicate C)) Q)))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c51_goal : and (S P Q)\n  (and\n     (eq (compose (compose x x0) (replicate (ni_fill C P)))\n        (ni_fill (ni_compose_r (compose x x0) (ni_replicate C)) P))\n     (eq (compose (compose x x0) (replicate (ni_fill C Q)))\n        (ni_fill (ni_compose_r (compose x x0) (ni_replicate C)) Q)))"
                ],
                "tactic_res": [
                    "c52_goal : S P Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c52_goal : S P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c48_goal : r_compose (ni_context_relation S)\n  (iterate (Init.Nat.add m m'') ni_context_relation S)\n  (compose (compose x x0) (replicate (ni_fill C Q)))\n  (compose (compose P' P'') (replicate (ni_fill C Q)))",
                    "_global_iterate_sum : forall (F : forall _ : relation, relation) \n         (R : relation) (P A Q : process) (n m : nat) \n         (_ : iterate n F R P A) (_ : iterate m F R A Q),\n       iterate (Datatypes.S (Init.Nat.add n m)) F R P Q"
                ],
                "tactic_res": [
                    "c53_goal : iterate m ni_context_relation S\n  (compose (compose x x0) (replicate (ni_fill C Q))) \n  ?A",
                    "c54_goal : iterate m'' ni_context_relation S ?A\n  (compose (compose P' P'') (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "apply _i with ( _i := ( ni_compose_l ( ni_compose_l ni_hole _i ) ( replicate ( ni_fill _i _i ) ) ) ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ( ni_compose_l ( ni_compose_l ni_hole _i ) ( replicate ( ni_fill _i _i ) ) ) ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c25_x0 : process",
                    "c2_C : ni_context",
                    "c2_Q : process",
                    "c24_H4 : lts (ni_fill C Q) l P'"
                ],
                "tactic_res": [
                    "c53_H4 : iterate m ni_context_relation S\n  (ni_fill\n     (ni_compose_l (ni_compose_l ni_hole x0) (replicate (ni_fill C Q)))\n     x)\n  (ni_fill\n     (ni_compose_l (ni_compose_l ni_hole x0) (replicate (ni_fill C Q)))\n     P')"
                ]
            },
            {
                "tactic_sig": "simpl in _i .",
                "tactic_sig_no_out_arg": "simpl in _i .",
                "tactic_args": [
                    "c24_H4 : lts (ni_fill C Q) l P'"
                ],
                "tactic_res": [
                    "c53_H4 : iterate m ni_context_relation S\n  (compose (compose x x0) (replicate (ni_fill C Q)))\n  (compose (compose P' x0) (replicate (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c53_goal : iterate m ni_context_relation S\n  (compose (compose x x0) (replicate (ni_fill C Q))) \n  ?A",
                    "c24_H4 : lts (ni_fill C Q) l P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "apply _i with ( _i := ( ni_compose_l ( ni_compose_r _i ni_hole ) ( replicate ( ni_fill _i _i ) ) ) ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ( ni_compose_l ( ni_compose_r _i ni_hole ) ( replicate ( ni_fill _i _i ) ) ) ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c24_P' : process",
                    "c2_C : ni_context",
                    "c2_Q : process",
                    "c24_H6 : eq (compose P' (replicate (ni_fill C Q))) Q'"
                ],
                "tactic_res": [
                    "c54_H6 : iterate m'' ni_context_relation S\n  (ni_fill\n     (ni_compose_l (ni_compose_r P' ni_hole) (replicate (ni_fill C Q)))\n     x0)\n  (ni_fill\n     (ni_compose_l (ni_compose_r P' ni_hole) (replicate (ni_fill C Q)))\n     P'')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c54_goal : iterate m'' ni_context_relation S\n  (compose (compose P' x0) (replicate (ni_fill C Q)))\n  (compose (compose P' P'') (replicate (ni_fill C Q)))",
                    "c24_H6 : eq (compose P' (replicate (ni_fill C Q))) Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c7_goal : forall (Q' : process) (l : label)\n  (_ : lts (ni_fill (ni_compose_l C p) Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_compose_l C p) P) l P')\n     (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c55_goal : ex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_compose_l C p) P) l P')\n     (closure ni_context_relation S P' Q'))",
                    "c55_Q' : process",
                    "c55_l : label",
                    "c55_H1 : lts (ni_fill (ni_compose_l C p) Q) l Q'"
                ]
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c55_goal : ex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_compose_l C p) P) l P')\n     (closure ni_context_relation S P' Q'))",
                    "c2_H1 : lts (ni_fill C Q) l Q'"
                ],
                "tactic_res": [
                    "c56_goal : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill (ni_compose_l C p) P) l P'0)\n     (closure ni_context_relation S P'0 (compose P' p)))",
                    "c56_H6 : eq (compose P' p) Q'",
                    "c56_H4 : eq l0 l",
                    "c56_H5 : eq Q0 p",
                    "c56_H3 : eq P0 (ni_fill C Q)",
                    "c56_H7 : lts (ni_fill C Q) l P'",
                    "c56_l0 : label",
                    "c56_Q0 : process",
                    "c56_P' : process",
                    "c56_P0 : process",
                    "c57_goal : ex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_compose_l C p) P) l P')\n     (closure ni_context_relation S P' (compose (ni_fill C Q) Q'0)))",
                    "c57_H6 : eq (compose (ni_fill C Q) Q'0) Q'",
                    "c57_H4 : eq l0 l",
                    "c57_H5 : eq Q0 p",
                    "c57_H3 : eq P0 (ni_fill C Q)",
                    "c57_H7 : lts p l Q'0",
                    "c57_l0 : label",
                    "c57_Q'0 : process",
                    "c57_Q0 : process",
                    "c57_P0 : process",
                    "c58_goal : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill (ni_compose_l C p) P) tau_label P'0)\n     (closure ni_context_relation S P'0 (compose P' Q'0)))",
                    "c58_H7 : eq (compose P' Q'0) Q'",
                    "c58_H6 : eq tau_label l",
                    "c58_H4 : eq Q0 p",
                    "c58_H3 : eq P0 (ni_fill C Q)",
                    "c58_H8 : lts p (recv_label c n) Q'0",
                    "c58_H5 : lts (ni_fill C Q) (send_label c n) P'",
                    "c58_n : channel",
                    "c58_c : channel",
                    "c58_Q'0 : process",
                    "c58_Q0 : process",
                    "c58_P' : process",
                    "c58_P0 : process",
                    "c59_goal : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill (ni_compose_l C p) P) tau_label P'0)\n     (closure ni_context_relation S P'0 (compose P' Q'0)))",
                    "c59_H7 : eq (compose P' Q'0) Q'",
                    "c59_H6 : eq tau_label l",
                    "c59_H4 : eq Q0 p",
                    "c59_H3 : eq P0 (ni_fill C Q)",
                    "c59_H8 : lts p (send_label c n) Q'0",
                    "c59_H5 : lts (ni_fill C Q) (recv_label c n) P'",
                    "c59_n : channel",
                    "c59_c : channel",
                    "c59_Q'0 : process",
                    "c59_Q0 : process",
                    "c59_P' : process",
                    "c59_P0 : process"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (Q' : process) (l : label) (_ : lts (ni_fill C Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))",
                    "c56_H7 : lts (ni_fill C Q) l P'"
                ],
                "tactic_res": [
                    "c56_H7 : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill C P) l P'0) (closure ni_context_relation S P'0 P'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c56_H7 : lts (ni_fill C Q) l P'"
                ],
                "tactic_res": [
                    "c56_H3 : and (lts (ni_fill C P) l x) (closure ni_context_relation S x P')",
                    "c56_x : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c56_H3 : eq P0 (ni_fill C Q)"
                ],
                "tactic_res": [
                    "c56_H4 : closure ni_context_relation S x P'",
                    "c56_H3 : lts (ni_fill C P) l x"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c56_goal : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill (ni_compose_l C p) P) l P'0)\n     (closure ni_context_relation S P'0 (compose P' p)))",
                    "c56_x : process",
                    "c7_p : process"
                ],
                "tactic_res": [
                    "c60_goal : and (lts (ni_fill (ni_compose_l C p) P) l (compose x p))\n  (closure ni_context_relation S (compose x p) (compose P' p))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c60_goal : and (lts (ni_fill (ni_compose_l C p) P) l (compose x p))\n  (closure ni_context_relation S (compose x p) (compose P' p))"
                ],
                "tactic_res": [
                    "c61_goal : lts (ni_fill (ni_compose_l C p) P) l (compose x p)",
                    "c62_goal : closure ni_context_relation S (compose x p) (compose P' p)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c61_goal : lts (ni_fill (ni_compose_l C p) P) l (compose x p)"
                ],
                "tactic_res": [
                    "c63_goal : lts (compose (ni_fill C P) p) l (compose x p)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c63_goal : lts (compose (ni_fill C P) p) l (compose x p)",
                    "_global_lts_comp_left : forall (P P' Q : process) (l : label) (_ : lts P l P'),\n       lts (compose P Q) l (compose P' Q)"
                ],
                "tactic_res": [
                    "c64_goal : lts (ni_fill C P) l x"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c64_goal : lts (ni_fill C P) l x",
                    "c56_H3 : eq P0 (ni_fill C Q)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c56_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c62_H4 : iterate x0 ni_context_relation S x P'",
                    "c62_x0 : nat"
                ]
            },
            {
                "tactic_sig": "exists ( _i ) .",
                "tactic_sig_no_out_arg": "exists ( _i ) .",
                "tactic_args": [
                    "c62_goal : closure ni_context_relation S (compose x p) (compose P' p)",
                    "c62_x0 : nat"
                ],
                "tactic_res": [
                    "c65_goal : iterate x0 ni_context_relation S (compose x p) (compose P' p)"
                ]
            },
            {
                "tactic_sig": "apply _i with ( _i := ( ni_compose_l ni_hole _i ) ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ( ni_compose_l ni_hole _i ) ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c7_p : process",
                    "c56_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c65_H4 : iterate x0 ni_context_relation S (ni_fill (ni_compose_l ni_hole p) x)\n  (ni_fill (ni_compose_l ni_hole p) P')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c65_goal : iterate x0 ni_context_relation S (compose x p) (compose P' p)",
                    "c56_H4 : eq l0 l"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "simpl in * .",
                "tactic_sig_no_out_arg": "simpl in * .",
                "tactic_args": [
                    "c57_goal : ex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_compose_l C p) P) l P')\n     (closure ni_context_relation S P' (compose (ni_fill C Q) Q'0)))"
                ],
                "tactic_res": [
                    "c66_goal : ex\n  (fun P' : process =>\n   and (lts (compose (ni_fill C P) p) l P')\n     (closure ni_context_relation S P' (compose (ni_fill C Q) Q'0)))",
                    "c66_H1 : lts (compose (ni_fill C Q) p) l (compose (ni_fill C Q) Q'0)"
                ]
            },
            {
                "tactic_sig": "exists ( compose ( ni_fill _i _i ) _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose ( ni_fill _i _i ) _i ) .",
                "tactic_args": [
                    "c66_goal : ex\n  (fun P' : process =>\n   and (lts (compose (ni_fill C P) p) l P')\n     (closure ni_context_relation S P' (compose (ni_fill C Q) Q'0)))",
                    "c2_C : ni_context",
                    "c2_P : process",
                    "c57_Q'0 : process"
                ],
                "tactic_res": [
                    "c67_goal : and (lts (compose (ni_fill C P) p) l (compose (ni_fill C P) Q'0))\n  (closure ni_context_relation S (compose (ni_fill C P) Q'0)\n     (compose (ni_fill C Q) Q'0))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c67_goal : and (lts (compose (ni_fill C P) p) l (compose (ni_fill C P) Q'0))\n  (closure ni_context_relation S (compose (ni_fill C P) Q'0)\n     (compose (ni_fill C Q) Q'0))"
                ],
                "tactic_res": [
                    "c68_goal : lts (compose (ni_fill C P) p) l (compose (ni_fill C P) Q'0)",
                    "c69_goal : closure ni_context_relation S (compose (ni_fill C P) Q'0)\n  (compose (ni_fill C Q) Q'0)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c68_goal : lts (compose (ni_fill C P) p) l (compose (ni_fill C P) Q'0)",
                    "_global_lts_comp_right : forall (P Q Q' : process) (l : label) (_ : lts Q l Q'),\n       lts (compose P Q) l (compose P Q')"
                ],
                "tactic_res": [
                    "c70_goal : lts p l Q'0"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c70_goal : lts p l Q'0",
                    "c56_H7 : lts (ni_fill C Q) l P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "exists 0 .",
                "tactic_sig_no_out_arg": "exists 0 .",
                "tactic_args": [
                    "c69_goal : closure ni_context_relation S (compose (ni_fill C P) Q'0)\n  (compose (ni_fill C Q) Q'0)"
                ],
                "tactic_res": [
                    "c71_goal : iterate 0 ni_context_relation S (compose (ni_fill C P) Q'0)\n  (compose (ni_fill C Q) Q'0)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c71_goal : iterate 0 ni_context_relation S (compose (ni_fill C P) Q'0)\n  (compose (ni_fill C Q) Q'0)"
                ],
                "tactic_res": [
                    "c72_goal : ni_context_relation S (compose (ni_fill C P) Q'0)\n  (compose (ni_fill C Q) Q'0)"
                ]
            },
            {
                "tactic_sig": "exists ( ni_compose_l _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( ni_compose_l _i _i ) .",
                "tactic_args": [
                    "c72_goal : ni_context_relation S (compose (ni_fill C P) Q'0)\n  (compose (ni_fill C Q) Q'0)",
                    "c2_C : ni_context",
                    "c57_Q'0 : process"
                ],
                "tactic_res": [
                    "c73_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (S P' Q')\n        (and\n           (eq (compose (ni_fill C P) Q'0)\n              (ni_fill (ni_compose_l C Q'0) P'))\n           (eq (compose (ni_fill C Q) Q'0)\n              (ni_fill (ni_compose_l C Q'0) Q')))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c73_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (S P' Q')\n        (and\n           (eq (compose (ni_fill C P) Q'0)\n              (ni_fill (ni_compose_l C Q'0) P'))\n           (eq (compose (ni_fill C Q) Q'0)\n              (ni_fill (ni_compose_l C Q'0) Q')))))",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c74_goal : ex\n  (fun Q' : process =>\n   and (S P Q')\n     (and\n        (eq (compose (ni_fill C P) Q'0)\n           (ni_fill (ni_compose_l C Q'0) P))\n        (eq (compose (ni_fill C Q) Q'0)\n           (ni_fill (ni_compose_l C Q'0) Q'))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c74_goal : ex\n  (fun Q' : process =>\n   and (S P Q')\n     (and\n        (eq (compose (ni_fill C P) Q'0)\n           (ni_fill (ni_compose_l C Q'0) P))\n        (eq (compose (ni_fill C Q) Q'0)\n           (ni_fill (ni_compose_l C Q'0) Q'))))",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c75_goal : and (S P Q)\n  (and\n     (eq (compose (ni_fill C P) Q'0) (ni_fill (ni_compose_l C Q'0) P))\n     (eq (compose (ni_fill C Q) Q'0) (ni_fill (ni_compose_l C Q'0) Q)))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c75_goal : and (S P Q)\n  (and\n     (eq (compose (ni_fill C P) Q'0) (ni_fill (ni_compose_l C Q'0) P))\n     (eq (compose (ni_fill C Q) Q'0) (ni_fill (ni_compose_l C Q'0) Q)))"
                ],
                "tactic_res": [
                    "c76_goal : S P Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c76_goal : S P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (Q' : process) (l : label) (_ : lts (ni_fill C Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))",
                    "c56_H5 : eq Q0 p"
                ],
                "tactic_res": [
                    "c58_H5 : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill C P) (send_label c n) P'0)\n     (closure ni_context_relation S P'0 P'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q0 ] .",
                "tactic_args": [
                    "c56_H5 : eq Q0 p"
                ],
                "tactic_res": [
                    "c58_H3 : and (lts (ni_fill C P) (send_label c n) Q0)\n  (closure ni_context_relation S Q0 P')",
                    "c58_Q0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c56_H3 : eq P0 (ni_fill C Q)"
                ],
                "tactic_res": [
                    "c58_H4 : closure ni_context_relation S Q0 P'",
                    "c58_H3 : lts (ni_fill C P) (send_label c n) Q0"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c58_goal : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill (ni_compose_l C p) P) tau_label P'0)\n     (closure ni_context_relation S P'0 (compose P' Q'0)))"
                ],
                "tactic_res": [
                    "c77_goal : ex\n  (fun P'0 : process =>\n   and (lts (compose (ni_fill C P) p) tau_label P'0)\n     (closure ni_context_relation S P'0 (compose P' Q'0)))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c77_goal : ex\n  (fun P'0 : process =>\n   and (lts (compose (ni_fill C P) p) tau_label P'0)\n     (closure ni_context_relation S P'0 (compose P' Q'0)))",
                    "c56_Q0 : process",
                    "c57_Q'0 : process"
                ],
                "tactic_res": [
                    "c78_goal : and (lts (compose (ni_fill C P) p) tau_label (compose Q0 Q'0))\n  (closure ni_context_relation S (compose Q0 Q'0) (compose P' Q'0))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c78_goal : and (lts (compose (ni_fill C P) p) tau_label (compose Q0 Q'0))\n  (closure ni_context_relation S (compose Q0 Q'0) (compose P' Q'0))"
                ],
                "tactic_res": [
                    "c79_goal : lts (compose (ni_fill C P) p) tau_label (compose Q0 Q'0)",
                    "c80_goal : closure ni_context_relation S (compose Q0 Q'0) (compose P' Q'0)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c79_goal : lts (compose (ni_fill C P) p) tau_label (compose Q0 Q'0)",
                    "_global_lts_comm_left : forall (P P' Q Q' : process) (c n : channel)\n         (_ : lts P (send_label c n) P') (_ : lts Q (recv_label c n) Q'),\n       lts (compose P Q) tau_label (compose P' Q')"
                ],
                "tactic_res": [
                    "c81_goal : lts (ni_fill C P) (send_label ?c ?n) Q0",
                    "c82_goal : lts p (recv_label ?c ?n) Q'0"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c81_goal : lts (ni_fill C P) (send_label ?c ?n) Q0",
                    "c56_H3 : eq P0 (ni_fill C Q)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c82_goal : lts p (recv_label c n) Q'0",
                    "c58_H8 : lts p (recv_label c n) Q'0"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c56_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c80_H4 : iterate x ni_context_relation S Q0 P'",
                    "c80_x : nat"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c80_goal : closure ni_context_relation S (compose Q0 Q'0) (compose P' Q'0)",
                    "c56_x : process"
                ],
                "tactic_res": [
                    "c83_goal : iterate x ni_context_relation S (compose Q0 Q'0) (compose P' Q'0)"
                ]
            },
            {
                "tactic_sig": "apply _i with ( _i := ni_compose_l ni_hole _i ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ni_compose_l ni_hole _i ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c57_Q'0 : process",
                    "c56_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c83_H4 : iterate x ni_context_relation S (ni_fill (ni_compose_l ni_hole Q'0) Q0)\n  (ni_fill (ni_compose_l ni_hole Q'0) P')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c83_goal : iterate x ni_context_relation S (compose Q0 Q'0) (compose P' Q'0)",
                    "c56_H4 : eq l0 l"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (Q' : process) (l : label) (_ : lts (ni_fill C Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))",
                    "c56_H5 : eq Q0 p"
                ],
                "tactic_res": [
                    "c59_H5 : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill C P) (recv_label c n) P'0)\n     (closure ni_context_relation S P'0 P'))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q0 ] .",
                "tactic_args": [
                    "c56_H5 : eq Q0 p"
                ],
                "tactic_res": [
                    "c59_H3 : and (lts (ni_fill C P) (recv_label c n) Q0)\n  (closure ni_context_relation S Q0 P')",
                    "c59_Q0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c56_H3 : eq P0 (ni_fill C Q)"
                ],
                "tactic_res": [
                    "c59_H4 : closure ni_context_relation S Q0 P'",
                    "c59_H3 : lts (ni_fill C P) (recv_label c n) Q0"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c59_goal : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill (ni_compose_l C p) P) tau_label P'0)\n     (closure ni_context_relation S P'0 (compose P' Q'0)))"
                ],
                "tactic_res": [
                    "c84_goal : ex\n  (fun P'0 : process =>\n   and (lts (compose (ni_fill C P) p) tau_label P'0)\n     (closure ni_context_relation S P'0 (compose P' Q'0)))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c84_goal : ex\n  (fun P'0 : process =>\n   and (lts (compose (ni_fill C P) p) tau_label P'0)\n     (closure ni_context_relation S P'0 (compose P' Q'0)))",
                    "c56_Q0 : process",
                    "c57_Q'0 : process"
                ],
                "tactic_res": [
                    "c85_goal : and (lts (compose (ni_fill C P) p) tau_label (compose Q0 Q'0))\n  (closure ni_context_relation S (compose Q0 Q'0) (compose P' Q'0))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c85_goal : and (lts (compose (ni_fill C P) p) tau_label (compose Q0 Q'0))\n  (closure ni_context_relation S (compose Q0 Q'0) (compose P' Q'0))"
                ],
                "tactic_res": [
                    "c86_goal : lts (compose (ni_fill C P) p) tau_label (compose Q0 Q'0)",
                    "c87_goal : closure ni_context_relation S (compose Q0 Q'0) (compose P' Q'0)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c86_goal : lts (compose (ni_fill C P) p) tau_label (compose Q0 Q'0)",
                    "_global_lts_comm_right : forall (P P' Q Q' : process) (c n : channel)\n         (_ : lts P (recv_label c n) P') (_ : lts Q (send_label c n) Q'),\n       lts (compose P Q) tau_label (compose P' Q')"
                ],
                "tactic_res": [
                    "c88_goal : lts (ni_fill C P) (recv_label ?c ?n) Q0",
                    "c89_goal : lts p (send_label ?c ?n) Q'0"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c88_goal : lts (ni_fill C P) (recv_label ?c ?n) Q0"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c89_goal : lts p (send_label c n) Q'0"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ n' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ n' ] .",
                "tactic_args": [
                    "c56_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c87_H4 : iterate n' ni_context_relation S Q0 P'",
                    "c87_n' : nat"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c87_goal : closure ni_context_relation S (compose Q0 Q'0) (compose P' Q'0)",
                    "c87_n' : nat"
                ],
                "tactic_res": [
                    "c90_goal : iterate n' ni_context_relation S (compose Q0 Q'0) (compose P' Q'0)"
                ]
            },
            {
                "tactic_sig": "apply _i with ( _i := ni_compose_l ni_hole _i ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ni_compose_l ni_hole _i ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c57_Q'0 : process",
                    "c56_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c90_H4 : iterate n' ni_context_relation S\n  (ni_fill (ni_compose_l ni_hole Q'0) Q0)\n  (ni_fill (ni_compose_l ni_hole Q'0) P')"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c90_goal : iterate n' ni_context_relation S (compose Q0 Q'0) (compose P' Q'0)",
                    "c56_H4 : eq l0 l"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c8_goal : forall (Q' : process) (l : label)\n  (_ : lts (ni_fill (ni_compose_r p C) Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_compose_r p C) P) l P')\n     (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c91_goal : ex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_compose_r p C) P) l P')\n     (closure ni_context_relation S P' Q'))",
                    "c91_Q' : process",
                    "c91_l : label",
                    "c91_H1 : lts (ni_fill (ni_compose_r p C) Q) l Q'"
                ]
            },
            {
                "tactic_sig": "inversion _i .",
                "tactic_sig_no_out_arg": "inversion _i .",
                "tactic_args": [
                    "c91_goal : ex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_compose_r p C) P) l P')\n     (closure ni_context_relation S P' Q'))",
                    "c2_H1 : lts (ni_fill C Q) l Q'"
                ],
                "tactic_res": [
                    "c92_goal : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill (ni_compose_r p C) P) l P'0)\n     (closure ni_context_relation S P'0 (compose P' (ni_fill C Q))))",
                    "c92_H6 : eq (compose P' (ni_fill C Q)) Q'",
                    "c92_H4 : eq l0 l",
                    "c92_H5 : eq Q0 (ni_fill C Q)",
                    "c92_H3 : eq P0 p",
                    "c92_H7 : lts p l P'",
                    "c92_l0 : label",
                    "c92_Q0 : process",
                    "c92_P' : process",
                    "c92_P0 : process",
                    "c93_goal : ex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_compose_r p C) P) l P')\n     (closure ni_context_relation S P' (compose p Q'0)))",
                    "c93_H6 : eq (compose p Q'0) Q'",
                    "c93_H4 : eq l0 l",
                    "c93_H5 : eq Q0 (ni_fill C Q)",
                    "c93_H3 : eq P0 p",
                    "c93_H7 : lts (ni_fill C Q) l Q'0",
                    "c93_l0 : label",
                    "c93_Q'0 : process",
                    "c93_Q0 : process",
                    "c93_P0 : process",
                    "c94_goal : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill (ni_compose_r p C) P) tau_label P'0)\n     (closure ni_context_relation S P'0 (compose P' Q'0)))",
                    "c94_H7 : eq (compose P' Q'0) Q'",
                    "c94_H6 : eq tau_label l",
                    "c94_H4 : eq Q0 (ni_fill C Q)",
                    "c94_H3 : eq P0 p",
                    "c94_H8 : lts (ni_fill C Q) (recv_label c n) Q'0",
                    "c94_H5 : lts p (send_label c n) P'",
                    "c94_n : channel",
                    "c94_c : channel",
                    "c94_Q'0 : process",
                    "c94_Q0 : process",
                    "c94_P' : process",
                    "c94_P0 : process",
                    "c95_goal : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill (ni_compose_r p C) P) tau_label P'0)\n     (closure ni_context_relation S P'0 (compose P' Q'0)))",
                    "c95_H7 : eq (compose P' Q'0) Q'",
                    "c95_H6 : eq tau_label l",
                    "c95_H4 : eq Q0 (ni_fill C Q)",
                    "c95_H3 : eq P0 p",
                    "c95_H8 : lts (ni_fill C Q) (send_label c n) Q'0",
                    "c95_H5 : lts p (recv_label c n) P'",
                    "c95_n : channel",
                    "c95_c : channel",
                    "c95_Q'0 : process",
                    "c95_Q0 : process",
                    "c95_P' : process",
                    "c95_P0 : process"
                ]
            },
            {
                "tactic_sig": "simpl in * .",
                "tactic_sig_no_out_arg": "simpl in * .",
                "tactic_args": [
                    "c92_goal : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill (ni_compose_r p C) P) l P'0)\n     (closure ni_context_relation S P'0 (compose P' (ni_fill C Q))))"
                ],
                "tactic_res": [
                    "c96_goal : ex\n  (fun P'0 : process =>\n   and (lts (compose p (ni_fill C P)) l P'0)\n     (closure ni_context_relation S P'0 (compose P' (ni_fill C Q))))",
                    "c96_H1 : lts (compose p (ni_fill C Q)) l (compose P' (ni_fill C Q))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i ( ni_fill _i _i ) ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i ( ni_fill _i _i ) ) .",
                "tactic_args": [
                    "c96_goal : ex\n  (fun P'0 : process =>\n   and (lts (compose p (ni_fill C P)) l P'0)\n     (closure ni_context_relation S P'0 (compose P' (ni_fill C Q))))",
                    "c92_P' : process",
                    "c2_C : ni_context",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c97_goal : and (lts (compose p (ni_fill C P)) l (compose P' (ni_fill C P)))\n  (closure ni_context_relation S (compose P' (ni_fill C P))\n     (compose P' (ni_fill C Q)))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c97_goal : and (lts (compose p (ni_fill C P)) l (compose P' (ni_fill C P)))\n  (closure ni_context_relation S (compose P' (ni_fill C P))\n     (compose P' (ni_fill C Q)))"
                ],
                "tactic_res": [
                    "c98_goal : lts (compose p (ni_fill C P)) l (compose P' (ni_fill C P))",
                    "c99_goal : closure ni_context_relation S (compose P' (ni_fill C P))\n  (compose P' (ni_fill C Q))"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c98_goal : lts (compose p (ni_fill C P)) l (compose P' (ni_fill C P))",
                    "_global_lts_comp_left : forall (P P' Q : process) (l : label) (_ : lts P l P'),\n       lts (compose P Q) l (compose P' Q)"
                ],
                "tactic_res": [
                    "c100_goal : lts p l P'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c100_goal : lts p l P'",
                    "c92_H7 : lts p l P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "exists 0 .",
                "tactic_sig_no_out_arg": "exists 0 .",
                "tactic_args": [
                    "c99_goal : closure ni_context_relation S (compose P' (ni_fill C P))\n  (compose P' (ni_fill C Q))"
                ],
                "tactic_res": [
                    "c101_goal : iterate 0 ni_context_relation S (compose P' (ni_fill C P))\n  (compose P' (ni_fill C Q))"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c101_goal : iterate 0 ni_context_relation S (compose P' (ni_fill C P))\n  (compose P' (ni_fill C Q))"
                ],
                "tactic_res": [
                    "c102_goal : ni_context_relation S (compose P' (ni_fill C P))\n  (compose P' (ni_fill C Q))"
                ]
            },
            {
                "tactic_sig": "exists ( ni_compose_r _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( ni_compose_r _i _i ) .",
                "tactic_args": [
                    "c102_goal : ni_context_relation S (compose P' (ni_fill C P))\n  (compose P' (ni_fill C Q))",
                    "c92_P' : process",
                    "c2_C : ni_context"
                ],
                "tactic_res": [
                    "c103_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q' : process =>\n      and (S P'0 Q')\n        (and\n           (eq (compose P' (ni_fill C P))\n              (ni_fill (ni_compose_r P' C) P'0))\n           (eq (compose P' (ni_fill C Q))\n              (ni_fill (ni_compose_r P' C) Q')))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c103_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q' : process =>\n      and (S P'0 Q')\n        (and\n           (eq (compose P' (ni_fill C P))\n              (ni_fill (ni_compose_r P' C) P'0))\n           (eq (compose P' (ni_fill C Q))\n              (ni_fill (ni_compose_r P' C) Q')))))",
                    "c2_P : process"
                ],
                "tactic_res": [
                    "c104_goal : ex\n  (fun Q' : process =>\n   and (S P Q')\n     (and\n        (eq (compose P' (ni_fill C P)) (ni_fill (ni_compose_r P' C) P))\n        (eq (compose P' (ni_fill C Q)) (ni_fill (ni_compose_r P' C) Q'))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c104_goal : ex\n  (fun Q' : process =>\n   and (S P Q')\n     (and\n        (eq (compose P' (ni_fill C P)) (ni_fill (ni_compose_r P' C) P))\n        (eq (compose P' (ni_fill C Q)) (ni_fill (ni_compose_r P' C) Q'))))",
                    "c2_Q : process"
                ],
                "tactic_res": [
                    "c105_goal : and (S P Q)\n  (and (eq (compose P' (ni_fill C P)) (ni_fill (ni_compose_r P' C) P))\n     (eq (compose P' (ni_fill C Q)) (ni_fill (ni_compose_r P' C) Q)))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c105_goal : and (S P Q)\n  (and (eq (compose P' (ni_fill C P)) (ni_fill (ni_compose_r P' C) P))\n     (eq (compose P' (ni_fill C Q)) (ni_fill (ni_compose_r P' C) Q)))"
                ],
                "tactic_res": [
                    "c106_goal : S P Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c106_goal : S P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (Q' : process) (l : label) (_ : lts (ni_fill C Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))",
                    "c92_H7 : lts p l P'"
                ],
                "tactic_res": [
                    "c93_H7 : ex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'0))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c92_H7 : lts p l P'"
                ],
                "tactic_res": [
                    "c93_H3 : and (lts (ni_fill C P) l x) (closure ni_context_relation S x Q'0)",
                    "c93_x : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c92_H3 : eq P0 p"
                ],
                "tactic_res": [
                    "c93_H4 : closure ni_context_relation S x Q'0",
                    "c93_H3 : lts (ni_fill C P) l x"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c93_goal : ex\n  (fun P' : process =>\n   and (lts (ni_fill (ni_compose_r p C) P) l P')\n     (closure ni_context_relation S P' (compose p Q'0)))",
                    "c7_p : process",
                    "c93_x : process"
                ],
                "tactic_res": [
                    "c107_goal : and (lts (ni_fill (ni_compose_r p C) P) l (compose p x))\n  (closure ni_context_relation S (compose p x) (compose p Q'0))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c107_goal : and (lts (ni_fill (ni_compose_r p C) P) l (compose p x))\n  (closure ni_context_relation S (compose p x) (compose p Q'0))"
                ],
                "tactic_res": [
                    "c108_goal : lts (ni_fill (ni_compose_r p C) P) l (compose p x)",
                    "c109_goal : closure ni_context_relation S (compose p x) (compose p Q'0)"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c108_goal : lts (ni_fill (ni_compose_r p C) P) l (compose p x)"
                ],
                "tactic_res": [
                    "c110_goal : lts (compose p (ni_fill C P)) l (compose p x)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c110_goal : lts (compose p (ni_fill C P)) l (compose p x)",
                    "_global_lts_comp_right : forall (P Q Q' : process) (l : label) (_ : lts Q l Q'),\n       lts (compose P Q) l (compose P Q')"
                ],
                "tactic_res": [
                    "c111_goal : lts (ni_fill C P) l x"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c111_goal : lts (ni_fill C P) l x",
                    "c92_H3 : eq P0 p"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c92_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c109_H4 : iterate x0 ni_context_relation S x Q'0",
                    "c109_x0 : nat"
                ]
            },
            {
                "tactic_sig": "exists ( _i ) .",
                "tactic_sig_no_out_arg": "exists ( _i ) .",
                "tactic_args": [
                    "c109_goal : closure ni_context_relation S (compose p x) (compose p Q'0)",
                    "c109_x0 : nat"
                ],
                "tactic_res": [
                    "c112_goal : iterate x0 ni_context_relation S (compose p x) (compose p Q'0)"
                ]
            },
            {
                "tactic_sig": "apply _i with ( _i := ( ni_compose_r _i ni_hole ) ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ( ni_compose_r _i ni_hole ) ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c7_p : process",
                    "c92_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c112_H4 : iterate x0 ni_context_relation S (ni_fill (ni_compose_r p ni_hole) x)\n  (ni_fill (ni_compose_r p ni_hole) Q'0)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c112_goal : iterate x0 ni_context_relation S (compose p x) (compose p Q'0)",
                    "c92_H4 : eq l0 l"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (Q' : process) (l : label) (_ : lts (ni_fill C Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))",
                    "c94_H8 : lts (ni_fill C Q) (recv_label c n) Q'0"
                ],
                "tactic_res": [
                    "c94_H8 : ex\n  (fun P' : process =>\n   and (lts (ni_fill C P) (recv_label c n) P')\n     (closure ni_context_relation S P' Q'0))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q0 ] .",
                "tactic_args": [
                    "c94_H8 : lts (ni_fill C Q) (recv_label c n) Q'0"
                ],
                "tactic_res": [
                    "c94_H3 : and (lts (ni_fill C P) (recv_label c n) Q0)\n  (closure ni_context_relation S Q0 Q'0)",
                    "c94_Q0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c92_H3 : eq P0 p"
                ],
                "tactic_res": [
                    "c94_H4 : closure ni_context_relation S Q0 Q'0",
                    "c94_H3 : lts (ni_fill C P) (recv_label c n) Q0"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c94_goal : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill (ni_compose_r p C) P) tau_label P'0)\n     (closure ni_context_relation S P'0 (compose P' Q'0)))"
                ],
                "tactic_res": [
                    "c113_goal : ex\n  (fun P'0 : process =>\n   and (lts (compose p (ni_fill C P)) tau_label P'0)\n     (closure ni_context_relation S P'0 (compose P' Q'0)))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c113_goal : ex\n  (fun P'0 : process =>\n   and (lts (compose p (ni_fill C P)) tau_label P'0)\n     (closure ni_context_relation S P'0 (compose P' Q'0)))",
                    "c92_P' : process",
                    "c92_Q0 : process"
                ],
                "tactic_res": [
                    "c114_goal : and (lts (compose p (ni_fill C P)) tau_label (compose P' Q0))\n  (closure ni_context_relation S (compose P' Q0) (compose P' Q'0))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c114_goal : and (lts (compose p (ni_fill C P)) tau_label (compose P' Q0))\n  (closure ni_context_relation S (compose P' Q0) (compose P' Q'0))"
                ],
                "tactic_res": [
                    "c115_goal : lts (compose p (ni_fill C P)) tau_label (compose P' Q0)",
                    "c116_goal : closure ni_context_relation S (compose P' Q0) (compose P' Q'0)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c115_goal : lts (compose p (ni_fill C P)) tau_label (compose P' Q0)",
                    "_global_lts_comm_left : forall (P P' Q Q' : process) (c n : channel)\n         (_ : lts P (send_label c n) P') (_ : lts Q (recv_label c n) Q'),\n       lts (compose P Q) tau_label (compose P' Q')"
                ],
                "tactic_res": [
                    "c117_goal : lts p (send_label ?c ?n) P'",
                    "c118_goal : lts (ni_fill C P) (recv_label ?c ?n) Q0"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c117_goal : lts p (send_label ?c ?n) P'",
                    "c92_H5 : eq Q0 (ni_fill C Q)"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c118_goal : lts (ni_fill C P) (recv_label c n) Q0",
                    "c92_H3 : eq P0 p"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c92_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c116_H4 : iterate x ni_context_relation S Q0 Q'0",
                    "c116_x : nat"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c116_goal : closure ni_context_relation S (compose P' Q0) (compose P' Q'0)",
                    "c93_x : process"
                ],
                "tactic_res": [
                    "c119_goal : iterate x ni_context_relation S (compose P' Q0) (compose P' Q'0)"
                ]
            },
            {
                "tactic_sig": "apply _i with ( _i := ni_compose_r _i ni_hole ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ni_compose_r _i ni_hole ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c92_P' : process",
                    "c92_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c119_H4 : iterate x ni_context_relation S (ni_fill (ni_compose_r P' ni_hole) Q0)\n  (ni_fill (ni_compose_r P' ni_hole) Q'0)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c119_goal : iterate x ni_context_relation S (compose P' Q0) (compose P' Q'0)",
                    "c92_H4 : eq l0 l"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c5_IHC : forall (Q' : process) (l : label) (_ : lts (ni_fill C Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))",
                    "c94_H8 : lts (ni_fill C Q) (recv_label c n) Q'0"
                ],
                "tactic_res": [
                    "c95_H8 : ex\n  (fun P' : process =>\n   and (lts (ni_fill C P) (send_label c n) P')\n     (closure ni_context_relation S P' Q'0))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q0 ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q0 ] .",
                "tactic_args": [
                    "c94_H8 : lts (ni_fill C Q) (recv_label c n) Q'0"
                ],
                "tactic_res": [
                    "c95_H3 : and (lts (ni_fill C P) (send_label c n) Q0)\n  (closure ni_context_relation S Q0 Q'0)",
                    "c95_Q0 : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c92_H3 : eq P0 p"
                ],
                "tactic_res": [
                    "c95_H4 : closure ni_context_relation S Q0 Q'0",
                    "c95_H3 : lts (ni_fill C P) (send_label c n) Q0"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c95_goal : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill (ni_compose_r p C) P) tau_label P'0)\n     (closure ni_context_relation S P'0 (compose P' Q'0)))"
                ],
                "tactic_res": [
                    "c120_goal : ex\n  (fun P'0 : process =>\n   and (lts (compose p (ni_fill C P)) tau_label P'0)\n     (closure ni_context_relation S P'0 (compose P' Q'0)))"
                ]
            },
            {
                "tactic_sig": "exists ( compose _i _i ) .",
                "tactic_sig_no_out_arg": "exists ( compose _i _i ) .",
                "tactic_args": [
                    "c120_goal : ex\n  (fun P'0 : process =>\n   and (lts (compose p (ni_fill C P)) tau_label P'0)\n     (closure ni_context_relation S P'0 (compose P' Q'0)))",
                    "c92_P' : process",
                    "c92_Q0 : process"
                ],
                "tactic_res": [
                    "c121_goal : and (lts (compose p (ni_fill C P)) tau_label (compose P' Q0))\n  (closure ni_context_relation S (compose P' Q0) (compose P' Q'0))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c121_goal : and (lts (compose p (ni_fill C P)) tau_label (compose P' Q0))\n  (closure ni_context_relation S (compose P' Q0) (compose P' Q'0))"
                ],
                "tactic_res": [
                    "c122_goal : lts (compose p (ni_fill C P)) tau_label (compose P' Q0)",
                    "c123_goal : closure ni_context_relation S (compose P' Q0) (compose P' Q'0)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c122_goal : lts (compose p (ni_fill C P)) tau_label (compose P' Q0)",
                    "_global_lts_comm_right : forall (P P' Q Q' : process) (c n : channel)\n         (_ : lts P (recv_label c n) P') (_ : lts Q (send_label c n) Q'),\n       lts (compose P Q) tau_label (compose P' Q')"
                ],
                "tactic_res": [
                    "c124_goal : lts p (recv_label ?c ?n) P'",
                    "c125_goal : lts (ni_fill C P) (send_label ?c ?n) Q0"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c124_goal : lts p (recv_label ?c ?n) P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c125_goal : lts (ni_fill C P) (send_label c n) Q0"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ n' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ n' ] .",
                "tactic_args": [
                    "c92_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c123_H4 : iterate n' ni_context_relation S Q0 Q'0",
                    "c123_n' : nat"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c123_goal : closure ni_context_relation S (compose P' Q0) (compose P' Q'0)",
                    "c123_n' : nat"
                ],
                "tactic_res": [
                    "c126_goal : iterate n' ni_context_relation S (compose P' Q0) (compose P' Q'0)"
                ]
            },
            {
                "tactic_sig": "apply _i with ( _i := ni_compose_r _i ni_hole ) in _i .",
                "tactic_sig_no_out_arg": "apply _i with ( _i := ni_compose_r _i ni_hole ) in _i .",
                "tactic_args": [
                    "_global_ni_context_helper : forall (x : nat) (R : relation) (P Q : process) \n         (C : ni_context) (_ : iterate x ni_context_relation R P Q),\n       iterate x ni_context_relation R (ni_fill C P) (ni_fill C Q)",
                    "c2_C : ni_context",
                    "c92_P' : process",
                    "c92_H4 : eq l0 l"
                ],
                "tactic_res": [
                    "c126_H4 : iterate n' ni_context_relation S (ni_fill (ni_compose_r P' ni_hole) Q0)\n  (ni_fill (ni_compose_r P' ni_hole) Q'0)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c126_goal : iterate n' ni_context_relation S (compose P' Q0) (compose P' Q'0)",
                    "c92_H4 : eq l0 l"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c9_goal : forall (Q' : process) (l : label) (_ : lts (ni_fill ni_hole Q) l Q'),\nex\n  (fun P' : process =>\n   and (lts (ni_fill ni_hole P) l P')\n     (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c127_goal : ex\n  (fun P' : process =>\n   and (lts (ni_fill ni_hole P) l P')\n     (closure ni_context_relation S P' Q'))",
                    "c127_Q' : process",
                    "c127_l : label",
                    "c127_H1 : lts (ni_fill ni_hole Q) l Q'"
                ]
            },
            {
                "tactic_sig": "simpl in * .",
                "tactic_sig_no_out_arg": "simpl in * .",
                "tactic_args": [
                    "c127_goal : ex\n  (fun P' : process =>\n   and (lts (ni_fill ni_hole P) l P')\n     (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c128_goal : ex\n  (fun P' : process =>\n   and (lts P l P') (closure ni_context_relation S P' Q'))",
                    "c128_H1 : lts Q l Q'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c2_H0 : progresses R S"
                ],
                "tactic_res": [
                    "c128_H3 : forall (P Q : process) (l : label) (P' : process) \n  (_ : lts P l P') (_ : R P Q),\nex (fun Q' : process => and (lts Q l Q') (S P' Q'))",
                    "c128_H0 : forall (P Q : process) (l : label) (Q' : process) \n  (_ : lts Q l Q') (_ : R P Q),\nex (fun P' : process => and (lts P l P') (S P' Q'))"
                ]
            },
            {
                "tactic_sig": "eapply _i in _i .",
                "tactic_sig_no_out_arg": "eapply _i in _i .",
                "tactic_args": [
                    "c128_goal : ex\n  (fun P' : process =>\n   and (lts P l P') (closure ni_context_relation S P' Q'))",
                    "c2_H0 : progresses R S",
                    "c2_H1 : lts (ni_fill C Q) l Q'"
                ],
                "tactic_res": [
                    "c129_goal : ex\n  (fun P' : process =>\n   and (lts P l P') (closure ni_context_relation S P' Q'))",
                    "c129_H1 : ex (fun P' : process => and (lts ?P l P') (S P' Q'))",
                    "c130_goal : R ?P Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c130_goal : R ?P Q"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "destruct _i as [ P' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P' ] .",
                "tactic_args": [
                    "c2_H1 : lts (ni_fill C Q) l Q'"
                ],
                "tactic_res": [
                    "c129_H1 : and (lts P l P') (S P' Q')",
                    "c129_P' : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c129_goal : ex\n  (fun P' : process =>\n   and (lts P l P') (closure ni_context_relation S P' Q'))",
                    "c129_P' : process"
                ],
                "tactic_res": [
                    "c131_goal : and (lts P l P') (closure ni_context_relation S P' Q')"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c131_goal : and (lts P l P') (closure ni_context_relation S P' Q')"
                ],
                "tactic_res": [
                    "c132_goal : lts P l P'",
                    "c133_goal : closure ni_context_relation S P' Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c132_goal : lts P l P'",
                    "c2_H1 : lts (ni_fill C Q) l Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "exists 0 .",
                "tactic_sig_no_out_arg": "exists 0 .",
                "tactic_args": [
                    "c133_goal : closure ni_context_relation S P' Q'"
                ],
                "tactic_res": [
                    "c134_goal : iterate 0 ni_context_relation S P' Q'"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c134_goal : iterate 0 ni_context_relation S P' Q'"
                ],
                "tactic_res": [
                    "c135_goal : ni_context_relation S P' Q'"
                ]
            },
            {
                "tactic_sig": "exists ni_hole .",
                "tactic_sig_no_out_arg": "exists ni_hole .",
                "tactic_args": [
                    "c135_goal : ni_context_relation S P' Q'"
                ],
                "tactic_res": [
                    "c136_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q'0 : process =>\n      and (S P'0 Q'0)\n        (and (eq P' (ni_fill ni_hole P'0))\n           (eq Q' (ni_fill ni_hole Q'0)))))"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c136_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q'0 : process =>\n      and (S P'0 Q'0)\n        (and (eq P' (ni_fill ni_hole P'0))\n           (eq Q' (ni_fill ni_hole Q'0)))))"
                ],
                "tactic_res": [
                    "c137_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q'0 : process =>\n      and (S P'0 Q'0) (and (eq P' P'0) (eq Q' Q'0))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c137_goal : ex\n  (fun P'0 : process =>\n   ex\n     (fun Q'0 : process =>\n      and (S P'0 Q'0) (and (eq P' P'0) (eq Q' Q'0))))",
                    "c129_P' : process"
                ],
                "tactic_res": [
                    "c138_goal : ex (fun Q'0 : process => and (S P' Q'0) (and (eq P' P') (eq Q' Q'0)))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c138_goal : ex (fun Q'0 : process => and (S P' Q'0) (and (eq P' P') (eq Q' Q'0)))",
                    "c2_Q' : process"
                ],
                "tactic_res": [
                    "c139_goal : and (S P' Q') (and (eq P' P') (eq Q' Q'))"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c139_goal : and (S P' Q') (and (eq P' P') (eq Q' Q'))"
                ],
                "tactic_res": [
                    "c140_goal : S P' Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c140_goal : S P' Q'",
                    "c2_H1 : lts (ni_fill C Q) l Q'"
                ],
                "tactic_res": []
            }
        ]
    },
    {
        "lemma_name": "strongly_safe_ni_context",
        "proof": [
            {
                "tactic_sig": "Theorem strongly_safe_ni_context : strongly_safe ( closure ni_context_relation ) .",
                "tactic_sig_no_out_arg": "Theorem strongly_safe_ni_context : strongly_safe ( closure ni_context_relation ) .",
                "tactic_args": [
                    "c0_goal : "
                ],
                "tactic_res": [
                    "c1_goal : strongly_safe (closure ni_context_relation)"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c1_goal : strongly_safe (closure ni_context_relation)",
                    "_global_closure_safe : forall (F : forall _ : relation, relation)\n         (_ : forall (f : relation) (_ : symmetric f), symmetric (F f))\n         (_ : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\n              and (subset (F R) (closure F S))\n                (progresses (F R) (closure F S))), \n       strongly_safe (closure F)"
                ],
                "tactic_res": [
                    "c2_goal : forall (f : relation) (_ : symmetric f),\nsymmetric (ni_context_relation f)",
                    "c3_goal : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (ni_context_relation R) (closure ni_context_relation S))\n  (progresses (ni_context_relation R) (closure ni_context_relation S))"
                ]
            },
            {
                "tactic_sig": "intros _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c2_goal : forall (f : relation) (_ : symmetric f),\nsymmetric (ni_context_relation f)"
                ],
                "tactic_res": [
                    "c4_goal : symmetric (ni_context_relation f)",
                    "c4_f : relation",
                    "c4_H : symmetric f"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c4_goal : symmetric (ni_context_relation f)",
                    "_global_symmetric : forall _ : relation, Prop"
                ],
                "tactic_res": [
                    "c5_goal : forall (P Q : process) (_ : ni_context_relation f P Q),\nni_context_relation f Q P"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c5_goal : forall (P Q : process) (_ : ni_context_relation f P Q),\nni_context_relation f Q P"
                ],
                "tactic_res": [
                    "c6_goal : ni_context_relation f Q P",
                    "c6_P : process",
                    "c6_Q : process",
                    "c6_H0 : ni_context_relation f P Q"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c6_goal : ni_context_relation f Q P",
                    "_global_ni_context_relation : forall _ : relation, relation"
                ],
                "tactic_res": [
                    "c7_goal : ex\n  (fun C : ni_context =>\n   ex\n     (fun P' : process =>\n      ex\n        (fun Q' : process =>\n         and (f P' Q')\n           (and (eq Q (ni_fill C P')) (eq P (ni_fill C Q'))))))"
                ]
            },
            {
                "tactic_sig": "unfold _i in _i .",
                "tactic_sig_no_out_arg": "unfold _i in _i .",
                "tactic_args": [
                    "_global_ni_context_relation : forall _ : relation, relation",
                    "c6_H0 : ni_context_relation f P Q"
                ],
                "tactic_res": [
                    "c7_H0 : ex\n  (fun C : ni_context =>\n   ex\n     (fun P' : process =>\n      ex\n        (fun Q' : process =>\n         and (f P' Q')\n           (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q'))))))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ C ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ C ] .",
                "tactic_args": [
                    "c6_H0 : ni_context_relation f P Q"
                ],
                "tactic_res": [
                    "c7_H0 : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (f P' Q') (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q')))))",
                    "c7_C : ni_context"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ P' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P' ] .",
                "tactic_args": [
                    "c6_H0 : ni_context_relation f P Q"
                ],
                "tactic_res": [
                    "c7_H0 : ex\n  (fun Q' : process =>\n   and (f P' Q') (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q'))))",
                    "c7_P' : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q' ] .",
                "tactic_args": [
                    "c6_H0 : ni_context_relation f P Q"
                ],
                "tactic_res": [
                    "c7_H0 : and (f P' Q') (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q')))",
                    "c7_Q' : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c7_goal : ex\n  (fun C : ni_context =>\n   ex\n     (fun P' : process =>\n      ex\n        (fun Q' : process =>\n         and (f P' Q')\n           (and (eq Q (ni_fill C P')) (eq P (ni_fill C Q'))))))",
                    "c7_C : ni_context"
                ],
                "tactic_res": [
                    "c8_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (f P' Q') (and (eq Q (ni_fill C P')) (eq P (ni_fill C Q')))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c8_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (f P' Q') (and (eq Q (ni_fill C P')) (eq P (ni_fill C Q')))))",
                    "c7_Q' : process"
                ],
                "tactic_res": [
                    "c9_goal : ex\n  (fun Q'0 : process =>\n   and (f Q' Q'0) (and (eq Q (ni_fill C Q')) (eq P (ni_fill C Q'0))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c9_goal : ex\n  (fun Q'0 : process =>\n   and (f Q' Q'0) (and (eq Q (ni_fill C Q')) (eq P (ni_fill C Q'0))))",
                    "c7_P' : process"
                ],
                "tactic_res": [
                    "c10_goal : and (f Q' P') (and (eq Q (ni_fill C Q')) (eq P (ni_fill C P')))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c6_H0 : ni_context_relation f P Q"
                ],
                "tactic_res": [
                    "c10_H1 : and (eq P (ni_fill C P')) (eq Q (ni_fill C Q'))",
                    "c10_H0 : f P' Q'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c10_H1 : and (eq P (ni_fill C P')) (eq Q (ni_fill C Q'))"
                ],
                "tactic_res": [
                    "c10_H2 : eq Q (ni_fill C Q')",
                    "c10_H1 : eq P (ni_fill C P')"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c10_goal : and (f Q' P') (and (eq Q (ni_fill C Q')) (eq P (ni_fill C P')))"
                ],
                "tactic_res": [
                    "c11_goal : f Q' P'",
                    "c12_goal : eq Q (ni_fill C Q')",
                    "c13_goal : eq P (ni_fill C P')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c11_goal : f Q' P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c12_goal : eq Q (ni_fill C Q')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c13_goal : eq P (ni_fill C P')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c3_goal : forall (R S : relation) (_ : subset R S) (_ : progresses R S),\nand (subset (ni_context_relation R) (closure ni_context_relation S))\n  (progresses (ni_context_relation R) (closure ni_context_relation S))"
                ],
                "tactic_res": [
                    "c14_goal : and (subset (ni_context_relation R) (closure ni_context_relation S))\n  (progresses (ni_context_relation R) (closure ni_context_relation S))",
                    "c14_R : relation",
                    "c14_S : relation",
                    "c14_H : subset R S",
                    "c14_H0 : progresses R S"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c14_goal : and (subset (ni_context_relation R) (closure ni_context_relation S))\n  (progresses (ni_context_relation R) (closure ni_context_relation S))"
                ],
                "tactic_res": [
                    "c15_goal : subset (ni_context_relation R) (closure ni_context_relation S)",
                    "c16_goal : progresses (ni_context_relation R) (closure ni_context_relation S)"
                ]
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c15_goal : subset (ni_context_relation R) (closure ni_context_relation S)",
                    "_global_subset : forall (_ : relation) (_ : relation), Prop"
                ],
                "tactic_res": [
                    "c17_goal : forall (P Q : process) (_ : ni_context_relation R P Q),\nclosure ni_context_relation S P Q"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c17_goal : forall (P Q : process) (_ : ni_context_relation R P Q),\nclosure ni_context_relation S P Q"
                ],
                "tactic_res": [
                    "c18_goal : closure ni_context_relation S P Q",
                    "c18_P : process",
                    "c18_Q : process",
                    "c18_H1 : ni_context_relation R P Q"
                ]
            },
            {
                "tactic_sig": "exists 0 .",
                "tactic_sig_no_out_arg": "exists 0 .",
                "tactic_args": [
                    "c18_goal : closure ni_context_relation S P Q"
                ],
                "tactic_res": [
                    "c19_goal : iterate 0 ni_context_relation S P Q"
                ]
            },
            {
                "tactic_sig": "simpl .",
                "tactic_sig_no_out_arg": "simpl .",
                "tactic_args": [
                    "c19_goal : iterate 0 ni_context_relation S P Q"
                ],
                "tactic_res": [
                    "c20_goal : ni_context_relation S P Q"
                ]
            },
            {
                "tactic_sig": "unfold _i in * .",
                "tactic_sig_no_out_arg": "unfold _i in * .",
                "tactic_args": [
                    "c20_goal : ni_context_relation S P Q",
                    "_global_ni_context_relation : forall _ : relation, relation"
                ],
                "tactic_res": [
                    "c21_goal : ex\n  (fun C : ni_context =>\n   ex\n     (fun P' : process =>\n      ex\n        (fun Q' : process =>\n         and (S P' Q')\n           (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q'))))))",
                    "c21_H1 : ex\n  (fun C : ni_context =>\n   ex\n     (fun P' : process =>\n      ex\n        (fun Q' : process =>\n         and (R P' Q')\n           (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q'))))))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ C ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ C ] .",
                "tactic_args": [
                    "c18_H1 : ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c21_H1 : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (R P' Q') (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q')))))",
                    "c21_C : ni_context"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ P' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P' ] .",
                "tactic_args": [
                    "c18_H1 : ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c21_H1 : ex\n  (fun Q' : process =>\n   and (R P' Q') (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q'))))",
                    "c21_P' : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q' ] .",
                "tactic_args": [
                    "c18_H1 : ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c21_H1 : and (R P' Q') (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q')))",
                    "c21_Q' : process"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c21_goal : ex\n  (fun C : ni_context =>\n   ex\n     (fun P' : process =>\n      ex\n        (fun Q' : process =>\n         and (S P' Q')\n           (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q'))))))",
                    "c21_C : ni_context"
                ],
                "tactic_res": [
                    "c22_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (S P' Q') (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q')))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c22_goal : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (S P' Q') (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q')))))",
                    "c21_P' : process"
                ],
                "tactic_res": [
                    "c23_goal : ex\n  (fun Q' : process =>\n   and (S P' Q') (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q'))))"
                ]
            },
            {
                "tactic_sig": "exists _i .",
                "tactic_sig_no_out_arg": "exists _i .",
                "tactic_args": [
                    "c23_goal : ex\n  (fun Q' : process =>\n   and (S P' Q') (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q'))))",
                    "c21_Q' : process"
                ],
                "tactic_res": [
                    "c24_goal : and (S P' Q') (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q')))"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c18_H1 : ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c24_H2 : and (eq P (ni_fill C P')) (eq Q (ni_fill C Q'))",
                    "c24_H1 : R P' Q'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c24_H2 : and (eq P (ni_fill C P')) (eq Q (ni_fill C Q'))"
                ],
                "tactic_res": [
                    "c24_H3 : eq Q (ni_fill C Q')",
                    "c24_H2 : eq P (ni_fill C P')"
                ]
            },
            {
                "tactic_sig": "repeat split .",
                "tactic_sig_no_out_arg": "repeat split .",
                "tactic_args": [
                    "c24_goal : and (S P' Q') (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q')))"
                ],
                "tactic_res": [
                    "c25_goal : S P' Q'",
                    "c26_goal : eq P (ni_fill C P')",
                    "c27_goal : eq Q (ni_fill C Q')"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c25_goal : S P' Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c26_goal : eq P (ni_fill C P')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c27_goal : eq Q (ni_fill C Q')"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "unfold _i .",
                "tactic_sig_no_out_arg": "unfold _i .",
                "tactic_args": [
                    "c16_goal : progresses (ni_context_relation R) (closure ni_context_relation S)",
                    "_global_progresses : forall (_ : relation) (_ : forall (_ : process) (_ : process), Prop),\n       Prop"
                ],
                "tactic_res": [
                    "c28_goal : and\n  (forall (P Q : process) (l : label) (Q' : process) \n     (_ : lts Q l Q') (_ : ni_context_relation R P Q),\n   ex\n     (fun P' : process =>\n      and (lts P l P') (closure ni_context_relation S P' Q')))\n  (forall (P Q : process) (l : label) (P' : process) \n     (_ : lts P l P') (_ : ni_context_relation R P Q),\n   ex\n     (fun Q' : process =>\n      and (lts Q l Q') (closure ni_context_relation S P' Q')))"
                ]
            },
            {
                "tactic_sig": "split .",
                "tactic_sig_no_out_arg": "split .",
                "tactic_args": [
                    "c28_goal : and\n  (forall (P Q : process) (l : label) (Q' : process) \n     (_ : lts Q l Q') (_ : ni_context_relation R P Q),\n   ex\n     (fun P' : process =>\n      and (lts P l P') (closure ni_context_relation S P' Q')))\n  (forall (P Q : process) (l : label) (P' : process) \n     (_ : lts P l P') (_ : ni_context_relation R P Q),\n   ex\n     (fun Q' : process =>\n      and (lts Q l Q') (closure ni_context_relation S P' Q')))"
                ],
                "tactic_res": [
                    "c29_goal : forall (P Q : process) (l : label) (Q' : process) \n  (_ : lts Q l Q') (_ : ni_context_relation R P Q),\nex\n  (fun P' : process =>\n   and (lts P l P') (closure ni_context_relation S P' Q'))",
                    "c30_goal : forall (P Q : process) (l : label) (P' : process) \n  (_ : lts P l P') (_ : ni_context_relation R P Q),\nex\n  (fun Q' : process =>\n   and (lts Q l Q') (closure ni_context_relation S P' Q'))"
                ]
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c29_goal : forall (P Q : process) (l : label) (Q' : process) \n  (_ : lts Q l Q') (_ : ni_context_relation R P Q),\nex\n  (fun P' : process =>\n   and (lts P l P') (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c31_goal : ex\n  (fun P' : process =>\n   and (lts P l P') (closure ni_context_relation S P' Q'))",
                    "c31_P : process",
                    "c31_Q : process",
                    "c31_l : label",
                    "c31_Q' : process",
                    "c31_H1 : lts Q l Q'",
                    "c31_H2 : ni_context_relation R P Q"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ C ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ C ] .",
                "tactic_args": [
                    "c31_H2 : ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c31_H2 : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (R P' Q') (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q')))))",
                    "c31_C : ni_context"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ P' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P' ] .",
                "tactic_args": [
                    "c31_H2 : ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c31_H2 : ex\n  (fun Q' : process =>\n   and (R P' Q') (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q'))))",
                    "c31_P' : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q_fill ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q_fill ] .",
                "tactic_args": [
                    "c31_H2 : ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c31_H2 : and (R P' Q_fill) (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q_fill)))",
                    "c31_Q_fill : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c31_H2 : ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c31_H3 : and (eq P (ni_fill C P')) (eq Q (ni_fill C Q_fill))",
                    "c31_H2 : R P' Q_fill"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c31_H3 : and (eq P (ni_fill C P')) (eq Q (ni_fill C Q_fill))"
                ],
                "tactic_res": [
                    "c31_H4 : eq Q (ni_fill C Q_fill)",
                    "c31_H3 : eq P (ni_fill C P')"
                ]
            },
            {
                "tactic_sig": "subst .",
                "tactic_sig_no_out_arg": "subst .",
                "tactic_args": [
                    "c31_goal : ex\n  (fun P' : process =>\n   and (lts P l P') (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c32_goal : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill C P') l P'0)\n     (closure ni_context_relation S P'0 Q'))",
                    "c32_H1 : lts (ni_fill C Q_fill) l Q'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c32_goal : ex\n  (fun P'0 : process =>\n   and (lts (ni_fill C P') l P'0)\n     (closure ni_context_relation S P'0 Q'))",
                    "_global_ni_context_progresses' : forall (P Q' Q : process) (C : ni_context) \n         (R S : relation) (l : label) (_ : subset R S) \n         (_ : progresses R S) (_ : lts (ni_fill C Q) l Q') \n         (_ : R P Q),\n       ex\n         (fun P' : process =>\n          and (lts (ni_fill C P) l P') (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c33_goal : subset ?R S",
                    "c34_goal : progresses ?R S",
                    "c35_goal : lts (ni_fill C ?Q) l Q'",
                    "c36_goal : ?R P' ?Q"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c33_goal : subset ?R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c34_goal : progresses R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c35_goal : lts (ni_fill C ?Q) l Q'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c36_goal : R P' Q_fill"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "intros _o _o _o _o _o _o .",
                "tactic_sig_no_out_arg": "intros .",
                "tactic_args": [
                    "c30_goal : forall (P Q : process) (l : label) (P' : process) \n  (_ : lts P l P') (_ : ni_context_relation R P Q),\nex\n  (fun Q' : process =>\n   and (lts Q l Q') (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c37_goal : ex\n  (fun Q' : process =>\n   and (lts Q l Q') (closure ni_context_relation S P' Q'))",
                    "c37_P : process",
                    "c37_Q : process",
                    "c37_l : label",
                    "c37_P' : process",
                    "c37_H1 : lts P l P'",
                    "c37_H2 : ni_context_relation R P Q"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ C ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ C ] .",
                "tactic_args": [
                    "c37_H2 : ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c37_H2 : ex\n  (fun P' : process =>\n   ex\n     (fun Q' : process =>\n      and (R P' Q') (and (eq P (ni_fill C P')) (eq Q (ni_fill C Q')))))",
                    "c37_C : ni_context"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ P_fill ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ P_fill ] .",
                "tactic_args": [
                    "c37_H2 : ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c37_H2 : ex\n  (fun Q' : process =>\n   and (R P_fill Q')\n     (and (eq P (ni_fill C P_fill)) (eq Q (ni_fill C Q'))))",
                    "c37_P_fill : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [ Q' ] .",
                "tactic_sig_no_out_arg": "destruct _i as [ Q' ] .",
                "tactic_args": [
                    "c37_H2 : ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c37_H2 : and (R P_fill Q') (and (eq P (ni_fill C P_fill)) (eq Q (ni_fill C Q')))",
                    "c37_Q' : process"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c37_H2 : ni_context_relation R P Q"
                ],
                "tactic_res": [
                    "c37_H3 : and (eq P (ni_fill C P_fill)) (eq Q (ni_fill C Q'))",
                    "c37_H2 : R P_fill Q'"
                ]
            },
            {
                "tactic_sig": "destruct _i as [  _o _o ] .",
                "tactic_sig_no_out_arg": "destruct _i .",
                "tactic_args": [
                    "c37_H3 : and (eq P (ni_fill C P_fill)) (eq Q (ni_fill C Q'))"
                ],
                "tactic_res": [
                    "c37_H4 : eq Q (ni_fill C Q')",
                    "c37_H3 : eq P (ni_fill C P_fill)"
                ]
            },
            {
                "tactic_sig": "subst .",
                "tactic_sig_no_out_arg": "subst .",
                "tactic_args": [
                    "c37_goal : ex\n  (fun Q' : process =>\n   and (lts Q l Q') (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c38_goal : ex\n  (fun Q'0 : process =>\n   and (lts (ni_fill C Q') l Q'0)\n     (closure ni_context_relation S P' Q'0))",
                    "c38_H1 : lts (ni_fill C P_fill) l P'"
                ]
            },
            {
                "tactic_sig": "eapply _i .",
                "tactic_sig_no_out_arg": "eapply _i .",
                "tactic_args": [
                    "c38_goal : ex\n  (fun Q'0 : process =>\n   and (lts (ni_fill C Q') l Q'0)\n     (closure ni_context_relation S P' Q'0))",
                    "_global_ni_context_progresses : forall (P P' Q : process) (C : ni_context) \n         (R S : relation) (l : label) (_ : subset R S) \n         (_ : progresses R S) (_ : lts (ni_fill C P) l P') \n         (_ : R P Q),\n       ex\n         (fun Q' : process =>\n          and (lts (ni_fill C Q) l Q') (closure ni_context_relation S P' Q'))"
                ],
                "tactic_res": [
                    "c39_goal : subset ?R S",
                    "c40_goal : progresses ?R S",
                    "c41_goal : lts (ni_fill C ?P) l P'",
                    "c42_goal : ?R ?P Q'"
                ]
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c39_goal : subset ?R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c40_goal : progresses R S"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c41_goal : lts (ni_fill C ?P) l P'"
                ],
                "tactic_res": []
            },
            {
                "tactic_sig": "eauto .",
                "tactic_sig_no_out_arg": "eauto .",
                "tactic_args": [
                    "c42_goal : R P_fill Q'"
                ],
                "tactic_res": []
            }
        ]
    }
]